// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: protos/tasks.proto

package proto

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskStatus int32

const (
	TaskStatus_Planned TaskStatus = 0
	TaskStatus_Split   TaskStatus = 1
	TaskStatus_Moved   TaskStatus = 2
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "Planned",
		1: "Split",
		2: "Moved",
	}
	TaskStatus_value = map[string]int32{
		"Planned": 0,
		"Split":   1,
		"Moved":   2,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_tasks_proto_enumTypes[0].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_protos_tasks_proto_enumTypes[0]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_tasks_proto_rawDescGZIP(), []int{0}
}

type JoinType int32

const (
	JoinType_JoinNone  JoinType = 0
	JoinType_JoinLeft  JoinType = 1
	JoinType_JoinRight JoinType = 2
)

// Enum value maps for JoinType.
var (
	JoinType_name = map[int32]string{
		0: "JoinNone",
		1: "JoinLeft",
		2: "JoinRight",
	}
	JoinType_value = map[string]int32{
		"JoinNone":  0,
		"JoinLeft":  1,
		"JoinRight": 2,
	}
)

func (x JoinType) Enum() *JoinType {
	p := new(JoinType)
	*p = x
	return p
}

func (x JoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_tasks_proto_enumTypes[1].Descriptor()
}

func (JoinType) Type() protoreflect.EnumType {
	return &file_protos_tasks_proto_enumTypes[1]
}

func (x JoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinType.Descriptor instead.
func (JoinType) EnumDescriptor() ([]byte, []int) {
	return file_protos_tasks_proto_rawDescGZIP(), []int{1}
}

type SplitType int32

const (
	SplitType_SplitLeft  SplitType = 0
	SplitType_SplitRight SplitType = 1
)

// Enum value maps for SplitType.
var (
	SplitType_name = map[int32]string{
		0: "SplitLeft",
		1: "SplitRight",
	}
	SplitType_value = map[string]int32{
		"SplitLeft":  0,
		"SplitRight": 1,
	}
)

func (x SplitType) Enum() *SplitType {
	p := new(SplitType)
	*p = x
	return p
}

func (x SplitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SplitType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_tasks_proto_enumTypes[2].Descriptor()
}

func (SplitType) Type() protoreflect.EnumType {
	return &file_protos_tasks_proto_enumTypes[2]
}

func (x SplitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SplitType.Descriptor instead.
func (SplitType) EnumDescriptor() ([]byte, []int) {
	return file_protos_tasks_proto_rawDescGZIP(), []int{2}
}

type BalancerTaskStatus int32

const (
	BalancerTaskStatus_BalancerTaskPlanned BalancerTaskStatus = 0
	BalancerTaskStatus_BalancerTaskMoved   BalancerTaskStatus = 1
)

// Enum value maps for BalancerTaskStatus.
var (
	BalancerTaskStatus_name = map[int32]string{
		0: "BalancerTaskPlanned",
		1: "BalancerTaskMoved",
	}
	BalancerTaskStatus_value = map[string]int32{
		"BalancerTaskPlanned": 0,
		"BalancerTaskMoved":   1,
	}
)

func (x BalancerTaskStatus) Enum() *BalancerTaskStatus {
	p := new(BalancerTaskStatus)
	*p = x
	return p
}

func (x BalancerTaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BalancerTaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_tasks_proto_enumTypes[3].Descriptor()
}

func (BalancerTaskStatus) Type() protoreflect.EnumType {
	return &file_protos_tasks_proto_enumTypes[3]
}

func (x BalancerTaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BalancerTaskStatus.Descriptor instead.
func (BalancerTaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_tasks_proto_rawDescGZIP(), []int{3}
}

type RedistributeTaskState int32

const (
	RedistributeTaskState_RedistributeTaskPlanned RedistributeTaskState = 0
	RedistributeTaskState_RedistributeTaskMoved   RedistributeTaskState = 1
)

// Enum value maps for RedistributeTaskState.
var (
	RedistributeTaskState_name = map[int32]string{
		0: "RedistributeTaskPlanned",
		1: "RedistributeTaskMoved",
	}
	RedistributeTaskState_value = map[string]int32{
		"RedistributeTaskPlanned": 0,
		"RedistributeTaskMoved":   1,
	}
)

func (x RedistributeTaskState) Enum() *RedistributeTaskState {
	p := new(RedistributeTaskState)
	*p = x
	return p
}

func (x RedistributeTaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedistributeTaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_tasks_proto_enumTypes[4].Descriptor()
}

func (RedistributeTaskState) Type() protoreflect.EnumType {
	return &file_protos_tasks_proto_enumTypes[4]
}

func (x RedistributeTaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedistributeTaskState.Descriptor instead.
func (RedistributeTaskState) EnumDescriptor() ([]byte, []int) {
	return file_protos_tasks_proto_rawDescGZIP(), []int{4}
}

type MoveTask struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ID             string                 `protobuf:"bytes,4,opt,name=ID,proto3" json:"ID,omitempty"`
	KeyRangeIdTemp string                 `protobuf:"bytes,1,opt,name=keyRangeIdTemp,proto3" json:"keyRangeIdTemp,omitempty"`
	Bound          [][]byte               `protobuf:"bytes,2,rep,name=bound,proto3" json:"bound,omitempty"`
	Status         TaskStatus             `protobuf:"varint,3,opt,name=status,proto3,enum=spqr.TaskStatus" json:"status,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MoveTask) Reset() {
	*x = MoveTask{}
	mi := &file_protos_tasks_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveTask) ProtoMessage() {}

func (x *MoveTask) ProtoReflect() protoreflect.Message {
	mi := &file_protos_tasks_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveTask.ProtoReflect.Descriptor instead.
func (*MoveTask) Descriptor() ([]byte, []int) {
	return file_protos_tasks_proto_rawDescGZIP(), []int{0}
}

func (x *MoveTask) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MoveTask) GetKeyRangeIdTemp() string {
	if x != nil {
		return x.KeyRangeIdTemp
	}
	return ""
}

func (x *MoveTask) GetBound() [][]byte {
	if x != nil {
		return x.Bound
	}
	return nil
}

func (x *MoveTask) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_Planned
}

type MoveTaskGroup struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ID             string                 `protobuf:"bytes,13,opt,name=ID,proto3" json:"ID,omitempty"`
	Type           SplitType              `protobuf:"varint,2,opt,name=type,proto3,enum=spqr.SplitType" json:"type,omitempty"`
	ShardIdTo      string                 `protobuf:"bytes,4,opt,name=shardIdTo,proto3" json:"shardIdTo,omitempty"`
	KeyRangeIdFrom string                 `protobuf:"bytes,5,opt,name=keyRangeIdFrom,proto3" json:"keyRangeIdFrom,omitempty"`
	KeyRangeIdTo   string                 `protobuf:"bytes,6,opt,name=keyRangeIdTo,proto3" json:"keyRangeIdTo,omitempty"`
	CurrentTask    *MoveTask              `protobuf:"bytes,7,opt,name=currentTask,proto3" json:"currentTask,omitempty"`
	BoundRel       string                 `protobuf:"bytes,8,opt,name=boundRel,proto3" json:"boundRel,omitempty"`
	Coeff          float64                `protobuf:"fixed64,9,opt,name=coeff,proto3" json:"coeff,omitempty"`
	BatchSize      int64                  `protobuf:"varint,10,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	Limit          int64                  `protobuf:"varint,11,opt,name=limit,proto3" json:"limit,omitempty"`
	TotalKeys      int64                  `protobuf:"varint,12,opt,name=totalKeys,proto3" json:"totalKeys,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MoveTaskGroup) Reset() {
	*x = MoveTaskGroup{}
	mi := &file_protos_tasks_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveTaskGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveTaskGroup) ProtoMessage() {}

func (x *MoveTaskGroup) ProtoReflect() protoreflect.Message {
	mi := &file_protos_tasks_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveTaskGroup.ProtoReflect.Descriptor instead.
func (*MoveTaskGroup) Descriptor() ([]byte, []int) {
	return file_protos_tasks_proto_rawDescGZIP(), []int{1}
}

func (x *MoveTaskGroup) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MoveTaskGroup) GetType() SplitType {
	if x != nil {
		return x.Type
	}
	return SplitType_SplitLeft
}

func (x *MoveTaskGroup) GetShardIdTo() string {
	if x != nil {
		return x.ShardIdTo
	}
	return ""
}

func (x *MoveTaskGroup) GetKeyRangeIdFrom() string {
	if x != nil {
		return x.KeyRangeIdFrom
	}
	return ""
}

func (x *MoveTaskGroup) GetKeyRangeIdTo() string {
	if x != nil {
		return x.KeyRangeIdTo
	}
	return ""
}

func (x *MoveTaskGroup) GetCurrentTask() *MoveTask {
	if x != nil {
		return x.CurrentTask
	}
	return nil
}

func (x *MoveTaskGroup) GetBoundRel() string {
	if x != nil {
		return x.BoundRel
	}
	return ""
}

func (x *MoveTaskGroup) GetCoeff() float64 {
	if x != nil {
		return x.Coeff
	}
	return 0
}

func (x *MoveTaskGroup) GetBatchSize() int64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *MoveTaskGroup) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *MoveTaskGroup) GetTotalKeys() int64 {
	if x != nil {
		return x.TotalKeys
	}
	return 0
}

type GetMoveTaskGroupReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskGroup     *MoveTaskGroup         `protobuf:"bytes,1,opt,name=taskGroup,proto3" json:"taskGroup,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMoveTaskGroupReply) Reset() {
	*x = GetMoveTaskGroupReply{}
	mi := &file_protos_tasks_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMoveTaskGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMoveTaskGroupReply) ProtoMessage() {}

func (x *GetMoveTaskGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_tasks_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMoveTaskGroupReply.ProtoReflect.Descriptor instead.
func (*GetMoveTaskGroupReply) Descriptor() ([]byte, []int) {
	return file_protos_tasks_proto_rawDescGZIP(), []int{2}
}

func (x *GetMoveTaskGroupReply) GetTaskGroup() *MoveTaskGroup {
	if x != nil {
		return x.TaskGroup
	}
	return nil
}

type WriteMoveTaskGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskGroup     *MoveTaskGroup         `protobuf:"bytes,1,opt,name=taskGroup,proto3" json:"taskGroup,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteMoveTaskGroupRequest) Reset() {
	*x = WriteMoveTaskGroupRequest{}
	mi := &file_protos_tasks_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteMoveTaskGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMoveTaskGroupRequest) ProtoMessage() {}

func (x *WriteMoveTaskGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_tasks_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMoveTaskGroupRequest.ProtoReflect.Descriptor instead.
func (*WriteMoveTaskGroupRequest) Descriptor() ([]byte, []int) {
	return file_protos_tasks_proto_rawDescGZIP(), []int{3}
}

func (x *WriteMoveTaskGroupRequest) GetTaskGroup() *MoveTaskGroup {
	if x != nil {
		return x.TaskGroup
	}
	return nil
}

type BalancerTask struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Type           JoinType               `protobuf:"varint,1,opt,name=type,proto3,enum=spqr.JoinType" json:"type,omitempty"`
	KeyRangeIdFrom string                 `protobuf:"bytes,2,opt,name=keyRangeIdFrom,proto3" json:"keyRangeIdFrom,omitempty"`
	KeyRangeIdTo   string                 `protobuf:"bytes,3,opt,name=keyRangeIdTo,proto3" json:"keyRangeIdTo,omitempty"`
	KeyRangeIdTemp string                 `protobuf:"bytes,4,opt,name=keyRangeIdTemp,proto3" json:"keyRangeIdTemp,omitempty"`
	ShardIdTo      string                 `protobuf:"bytes,5,opt,name=shardIdTo,proto3" json:"shardIdTo,omitempty"`
	KeyCount       int64                  `protobuf:"varint,6,opt,name=keyCount,proto3" json:"keyCount,omitempty"`
	State          BalancerTaskStatus     `protobuf:"varint,7,opt,name=state,proto3,enum=spqr.BalancerTaskStatus" json:"state,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BalancerTask) Reset() {
	*x = BalancerTask{}
	mi := &file_protos_tasks_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalancerTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalancerTask) ProtoMessage() {}

func (x *BalancerTask) ProtoReflect() protoreflect.Message {
	mi := &file_protos_tasks_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalancerTask.ProtoReflect.Descriptor instead.
func (*BalancerTask) Descriptor() ([]byte, []int) {
	return file_protos_tasks_proto_rawDescGZIP(), []int{4}
}

func (x *BalancerTask) GetType() JoinType {
	if x != nil {
		return x.Type
	}
	return JoinType_JoinNone
}

func (x *BalancerTask) GetKeyRangeIdFrom() string {
	if x != nil {
		return x.KeyRangeIdFrom
	}
	return ""
}

func (x *BalancerTask) GetKeyRangeIdTo() string {
	if x != nil {
		return x.KeyRangeIdTo
	}
	return ""
}

func (x *BalancerTask) GetKeyRangeIdTemp() string {
	if x != nil {
		return x.KeyRangeIdTemp
	}
	return ""
}

func (x *BalancerTask) GetShardIdTo() string {
	if x != nil {
		return x.ShardIdTo
	}
	return ""
}

func (x *BalancerTask) GetKeyCount() int64 {
	if x != nil {
		return x.KeyCount
	}
	return 0
}

func (x *BalancerTask) GetState() BalancerTaskStatus {
	if x != nil {
		return x.State
	}
	return BalancerTaskStatus_BalancerTaskPlanned
}

type GetBalancerTaskReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *BalancerTask          `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBalancerTaskReply) Reset() {
	*x = GetBalancerTaskReply{}
	mi := &file_protos_tasks_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBalancerTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalancerTaskReply) ProtoMessage() {}

func (x *GetBalancerTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_tasks_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalancerTaskReply.ProtoReflect.Descriptor instead.
func (*GetBalancerTaskReply) Descriptor() ([]byte, []int) {
	return file_protos_tasks_proto_rawDescGZIP(), []int{5}
}

func (x *GetBalancerTaskReply) GetTask() *BalancerTask {
	if x != nil {
		return x.Task
	}
	return nil
}

type WriteBalancerTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *BalancerTask          `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteBalancerTaskRequest) Reset() {
	*x = WriteBalancerTaskRequest{}
	mi := &file_protos_tasks_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteBalancerTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteBalancerTaskRequest) ProtoMessage() {}

func (x *WriteBalancerTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_tasks_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteBalancerTaskRequest.ProtoReflect.Descriptor instead.
func (*WriteBalancerTaskRequest) Descriptor() ([]byte, []int) {
	return file_protos_tasks_proto_rawDescGZIP(), []int{6}
}

func (x *WriteBalancerTaskRequest) GetTask() *BalancerTask {
	if x != nil {
		return x.Task
	}
	return nil
}

type RedistributeTask struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KeyRangeId    string                 `protobuf:"bytes,1,opt,name=keyRangeId,proto3" json:"keyRangeId,omitempty"`
	ShardId       string                 `protobuf:"bytes,2,opt,name=shardId,proto3" json:"shardId,omitempty"`
	BatchSize     int64                  `protobuf:"varint,3,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	State         RedistributeTaskState  `protobuf:"varint,4,opt,name=state,proto3,enum=spqr.RedistributeTaskState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedistributeTask) Reset() {
	*x = RedistributeTask{}
	mi := &file_protos_tasks_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedistributeTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedistributeTask) ProtoMessage() {}

func (x *RedistributeTask) ProtoReflect() protoreflect.Message {
	mi := &file_protos_tasks_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedistributeTask.ProtoReflect.Descriptor instead.
func (*RedistributeTask) Descriptor() ([]byte, []int) {
	return file_protos_tasks_proto_rawDescGZIP(), []int{7}
}

func (x *RedistributeTask) GetKeyRangeId() string {
	if x != nil {
		return x.KeyRangeId
	}
	return ""
}

func (x *RedistributeTask) GetShardId() string {
	if x != nil {
		return x.ShardId
	}
	return ""
}

func (x *RedistributeTask) GetBatchSize() int64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *RedistributeTask) GetState() RedistributeTaskState {
	if x != nil {
		return x.State
	}
	return RedistributeTaskState_RedistributeTaskPlanned
}

type GetRedistributeTaskReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *RedistributeTask      `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRedistributeTaskReply) Reset() {
	*x = GetRedistributeTaskReply{}
	mi := &file_protos_tasks_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRedistributeTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRedistributeTaskReply) ProtoMessage() {}

func (x *GetRedistributeTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_tasks_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRedistributeTaskReply.ProtoReflect.Descriptor instead.
func (*GetRedistributeTaskReply) Descriptor() ([]byte, []int) {
	return file_protos_tasks_proto_rawDescGZIP(), []int{8}
}

func (x *GetRedistributeTaskReply) GetTask() *RedistributeTask {
	if x != nil {
		return x.Task
	}
	return nil
}

type WriteRedistributeTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *RedistributeTask      `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteRedistributeTaskRequest) Reset() {
	*x = WriteRedistributeTaskRequest{}
	mi := &file_protos_tasks_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteRedistributeTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRedistributeTaskRequest) ProtoMessage() {}

func (x *WriteRedistributeTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_tasks_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRedistributeTaskRequest.ProtoReflect.Descriptor instead.
func (*WriteRedistributeTaskRequest) Descriptor() ([]byte, []int) {
	return file_protos_tasks_proto_rawDescGZIP(), []int{9}
}

func (x *WriteRedistributeTaskRequest) GetTask() *RedistributeTask {
	if x != nil {
		return x.Task
	}
	return nil
}

var File_protos_tasks_proto protoreflect.FileDescriptor

var file_protos_tasks_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x73, 0x70, 0x71, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x01, 0x0a, 0x08, 0x4d, 0x6f, 0x76, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x65,
	0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe4, 0x02, 0x0a,
	0x0d, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x23,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73,
	0x70, 0x71, 0x72, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x54, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x54,
	0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x6b, 0x65, 0x79,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x12, 0x30, 0x0a,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x65, 0x66, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x65, 0x66,
	0x66, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x65,
	0x79, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4b,
	0x65, 0x79, 0x73, 0x22, 0x4a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0x4e, 0x0a, 0x19, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0x90, 0x02, 0x0a, 0x0c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x65,
	0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x0c,
	0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x54, 0x6f,
	0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x54, 0x65,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x54, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x3e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x22, 0x42, 0x0a, 0x18, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x70, 0x71, 0x72, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x9d, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x6b,
	0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x46, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x4a,
	0x0a, 0x1c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x70, 0x71, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x2a, 0x2f, 0x0a, 0x0a, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x35, 0x0a, 0x08, 0x4a,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x65, 0x66,
	0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x10, 0x02, 0x2a, 0x2a, 0x0a, 0x09, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x01, 0x2a, 0x44,
	0x0a, 0x12, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x6f, 0x76,
	0x65, 0x64, 0x10, 0x01, 0x2a, 0x4f, 0x0a, 0x15, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x6f,
	0x76, 0x65, 0x64, 0x10, 0x01, 0x32, 0x86, 0x03, 0x0a, 0x10, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f,
	0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e, 0x73, 0x70,
	0x71, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x12, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x4d,
	0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0xf5,
	0x01, 0x0a, 0x13, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1a, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x11, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x8d, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1e, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x15, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x22, 0x2e, 0x73,
	0x70, 0x71, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x16, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x73, 0x70, 0x71, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_protos_tasks_proto_rawDescOnce sync.Once
	file_protos_tasks_proto_rawDescData []byte
)

func file_protos_tasks_proto_rawDescGZIP() []byte {
	file_protos_tasks_proto_rawDescOnce.Do(func() {
		file_protos_tasks_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_protos_tasks_proto_rawDesc), len(file_protos_tasks_proto_rawDesc)))
	})
	return file_protos_tasks_proto_rawDescData
}

var file_protos_tasks_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_protos_tasks_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_protos_tasks_proto_goTypes = []any{
	(TaskStatus)(0),                      // 0: spqr.TaskStatus
	(JoinType)(0),                        // 1: spqr.JoinType
	(SplitType)(0),                       // 2: spqr.SplitType
	(BalancerTaskStatus)(0),              // 3: spqr.BalancerTaskStatus
	(RedistributeTaskState)(0),           // 4: spqr.RedistributeTaskState
	(*MoveTask)(nil),                     // 5: spqr.MoveTask
	(*MoveTaskGroup)(nil),                // 6: spqr.MoveTaskGroup
	(*GetMoveTaskGroupReply)(nil),        // 7: spqr.GetMoveTaskGroupReply
	(*WriteMoveTaskGroupRequest)(nil),    // 8: spqr.WriteMoveTaskGroupRequest
	(*BalancerTask)(nil),                 // 9: spqr.BalancerTask
	(*GetBalancerTaskReply)(nil),         // 10: spqr.GetBalancerTaskReply
	(*WriteBalancerTaskRequest)(nil),     // 11: spqr.WriteBalancerTaskRequest
	(*RedistributeTask)(nil),             // 12: spqr.RedistributeTask
	(*GetRedistributeTaskReply)(nil),     // 13: spqr.GetRedistributeTaskReply
	(*WriteRedistributeTaskRequest)(nil), // 14: spqr.WriteRedistributeTaskRequest
	(*empty.Empty)(nil),                  // 15: google.protobuf.Empty
}
var file_protos_tasks_proto_depIdxs = []int32{
	0,  // 0: spqr.MoveTask.status:type_name -> spqr.TaskStatus
	2,  // 1: spqr.MoveTaskGroup.type:type_name -> spqr.SplitType
	5,  // 2: spqr.MoveTaskGroup.currentTask:type_name -> spqr.MoveTask
	6,  // 3: spqr.GetMoveTaskGroupReply.taskGroup:type_name -> spqr.MoveTaskGroup
	6,  // 4: spqr.WriteMoveTaskGroupRequest.taskGroup:type_name -> spqr.MoveTaskGroup
	1,  // 5: spqr.BalancerTask.type:type_name -> spqr.JoinType
	3,  // 6: spqr.BalancerTask.state:type_name -> spqr.BalancerTaskStatus
	9,  // 7: spqr.GetBalancerTaskReply.task:type_name -> spqr.BalancerTask
	9,  // 8: spqr.WriteBalancerTaskRequest.task:type_name -> spqr.BalancerTask
	4,  // 9: spqr.RedistributeTask.state:type_name -> spqr.RedistributeTaskState
	12, // 10: spqr.GetRedistributeTaskReply.task:type_name -> spqr.RedistributeTask
	12, // 11: spqr.WriteRedistributeTaskRequest.task:type_name -> spqr.RedistributeTask
	15, // 12: spqr.MoveTasksService.GetMoveTaskGroup:input_type -> google.protobuf.Empty
	8,  // 13: spqr.MoveTasksService.WriteMoveTaskGroup:input_type -> spqr.WriteMoveTaskGroupRequest
	15, // 14: spqr.MoveTasksService.RemoveMoveTaskGroup:input_type -> google.protobuf.Empty
	15, // 15: spqr.MoveTasksService.RetryMoveTaskGroup:input_type -> google.protobuf.Empty
	15, // 16: spqr.MoveTasksService.StopMoveTaskGroup:input_type -> google.protobuf.Empty
	15, // 17: spqr.BalancerTaskService.GetBalancerTask:input_type -> google.protobuf.Empty
	11, // 18: spqr.BalancerTaskService.WriteBalancerTask:input_type -> spqr.WriteBalancerTaskRequest
	15, // 19: spqr.BalancerTaskService.RemoveBalancerTask:input_type -> google.protobuf.Empty
	15, // 20: spqr.RedistributeTaskService.GetRedistributeTask:input_type -> google.protobuf.Empty
	14, // 21: spqr.RedistributeTaskService.WriteRedistributeTask:input_type -> spqr.WriteRedistributeTaskRequest
	15, // 22: spqr.RedistributeTaskService.RemoveRedistributeTask:input_type -> google.protobuf.Empty
	7,  // 23: spqr.MoveTasksService.GetMoveTaskGroup:output_type -> spqr.GetMoveTaskGroupReply
	15, // 24: spqr.MoveTasksService.WriteMoveTaskGroup:output_type -> google.protobuf.Empty
	15, // 25: spqr.MoveTasksService.RemoveMoveTaskGroup:output_type -> google.protobuf.Empty
	15, // 26: spqr.MoveTasksService.RetryMoveTaskGroup:output_type -> google.protobuf.Empty
	15, // 27: spqr.MoveTasksService.StopMoveTaskGroup:output_type -> google.protobuf.Empty
	10, // 28: spqr.BalancerTaskService.GetBalancerTask:output_type -> spqr.GetBalancerTaskReply
	15, // 29: spqr.BalancerTaskService.WriteBalancerTask:output_type -> google.protobuf.Empty
	15, // 30: spqr.BalancerTaskService.RemoveBalancerTask:output_type -> google.protobuf.Empty
	13, // 31: spqr.RedistributeTaskService.GetRedistributeTask:output_type -> spqr.GetRedistributeTaskReply
	15, // 32: spqr.RedistributeTaskService.WriteRedistributeTask:output_type -> google.protobuf.Empty
	15, // 33: spqr.RedistributeTaskService.RemoveRedistributeTask:output_type -> google.protobuf.Empty
	23, // [23:34] is the sub-list for method output_type
	12, // [12:23] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_protos_tasks_proto_init() }
func file_protos_tasks_proto_init() {
	if File_protos_tasks_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_protos_tasks_proto_rawDesc), len(file_protos_tasks_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_protos_tasks_proto_goTypes,
		DependencyIndexes: file_protos_tasks_proto_depIdxs,
		EnumInfos:         file_protos_tasks_proto_enumTypes,
		MessageInfos:      file_protos_tasks_proto_msgTypes,
	}.Build()
	File_protos_tasks_proto = out.File
	file_protos_tasks_proto_goTypes = nil
	file_protos_tasks_proto_depIdxs = nil
}
