// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: protos/reference_relation.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReferenceRelationsService_CreateReferenceRelations_FullMethodName      = "/spqr.ReferenceRelationsService/CreateReferenceRelations"
	ReferenceRelationsService_DropReferenceRelations_FullMethodName        = "/spqr.ReferenceRelationsService/DropReferenceRelations"
	ReferenceRelationsService_ListReferenceRelations_FullMethodName        = "/spqr.ReferenceRelationsService/ListReferenceRelations"
	ReferenceRelationsService_AlterReferenceRelationStorage_FullMethodName = "/spqr.ReferenceRelationsService/AlterReferenceRelationStorage"
	ReferenceRelationsService_SyncReferenceRelations_FullMethodName        = "/spqr.ReferenceRelationsService/SyncReferenceRelations"
)

// ReferenceRelationsServiceClient is the client API for ReferenceRelationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReferenceRelationsServiceClient interface {
	CreateReferenceRelations(ctx context.Context, in *CreateReferenceRelationsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DropReferenceRelations(ctx context.Context, in *DropReferenceRelationsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListReferenceRelations(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListReferenceRelationsReply, error)
	AlterReferenceRelationStorage(ctx context.Context, in *AlterReferenceRelationStorageRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SyncReferenceRelations(ctx context.Context, in *SyncReferenceRelationsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type referenceRelationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReferenceRelationsServiceClient(cc grpc.ClientConnInterface) ReferenceRelationsServiceClient {
	return &referenceRelationsServiceClient{cc}
}

func (c *referenceRelationsServiceClient) CreateReferenceRelations(ctx context.Context, in *CreateReferenceRelationsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ReferenceRelationsService_CreateReferenceRelations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceRelationsServiceClient) DropReferenceRelations(ctx context.Context, in *DropReferenceRelationsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ReferenceRelationsService_DropReferenceRelations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceRelationsServiceClient) ListReferenceRelations(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListReferenceRelationsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReferenceRelationsReply)
	err := c.cc.Invoke(ctx, ReferenceRelationsService_ListReferenceRelations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceRelationsServiceClient) AlterReferenceRelationStorage(ctx context.Context, in *AlterReferenceRelationStorageRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ReferenceRelationsService_AlterReferenceRelationStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceRelationsServiceClient) SyncReferenceRelations(ctx context.Context, in *SyncReferenceRelationsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ReferenceRelationsService_SyncReferenceRelations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReferenceRelationsServiceServer is the server API for ReferenceRelationsService service.
// All implementations must embed UnimplementedReferenceRelationsServiceServer
// for forward compatibility.
type ReferenceRelationsServiceServer interface {
	CreateReferenceRelations(context.Context, *CreateReferenceRelationsRequest) (*empty.Empty, error)
	DropReferenceRelations(context.Context, *DropReferenceRelationsRequest) (*empty.Empty, error)
	ListReferenceRelations(context.Context, *empty.Empty) (*ListReferenceRelationsReply, error)
	AlterReferenceRelationStorage(context.Context, *AlterReferenceRelationStorageRequest) (*empty.Empty, error)
	SyncReferenceRelations(context.Context, *SyncReferenceRelationsRequest) (*empty.Empty, error)
	mustEmbedUnimplementedReferenceRelationsServiceServer()
}

// UnimplementedReferenceRelationsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReferenceRelationsServiceServer struct{}

func (UnimplementedReferenceRelationsServiceServer) CreateReferenceRelations(context.Context, *CreateReferenceRelationsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReferenceRelations not implemented")
}
func (UnimplementedReferenceRelationsServiceServer) DropReferenceRelations(context.Context, *DropReferenceRelationsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropReferenceRelations not implemented")
}
func (UnimplementedReferenceRelationsServiceServer) ListReferenceRelations(context.Context, *empty.Empty) (*ListReferenceRelationsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReferenceRelations not implemented")
}
func (UnimplementedReferenceRelationsServiceServer) AlterReferenceRelationStorage(context.Context, *AlterReferenceRelationStorageRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterReferenceRelationStorage not implemented")
}
func (UnimplementedReferenceRelationsServiceServer) SyncReferenceRelations(context.Context, *SyncReferenceRelationsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncReferenceRelations not implemented")
}
func (UnimplementedReferenceRelationsServiceServer) mustEmbedUnimplementedReferenceRelationsServiceServer() {
}
func (UnimplementedReferenceRelationsServiceServer) testEmbeddedByValue() {}

// UnsafeReferenceRelationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReferenceRelationsServiceServer will
// result in compilation errors.
type UnsafeReferenceRelationsServiceServer interface {
	mustEmbedUnimplementedReferenceRelationsServiceServer()
}

func RegisterReferenceRelationsServiceServer(s grpc.ServiceRegistrar, srv ReferenceRelationsServiceServer) {
	// If the following call pancis, it indicates UnimplementedReferenceRelationsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReferenceRelationsService_ServiceDesc, srv)
}

func _ReferenceRelationsService_CreateReferenceRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReferenceRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceRelationsServiceServer).CreateReferenceRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceRelationsService_CreateReferenceRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceRelationsServiceServer).CreateReferenceRelations(ctx, req.(*CreateReferenceRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceRelationsService_DropReferenceRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropReferenceRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceRelationsServiceServer).DropReferenceRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceRelationsService_DropReferenceRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceRelationsServiceServer).DropReferenceRelations(ctx, req.(*DropReferenceRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceRelationsService_ListReferenceRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceRelationsServiceServer).ListReferenceRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceRelationsService_ListReferenceRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceRelationsServiceServer).ListReferenceRelations(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceRelationsService_AlterReferenceRelationStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterReferenceRelationStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceRelationsServiceServer).AlterReferenceRelationStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceRelationsService_AlterReferenceRelationStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceRelationsServiceServer).AlterReferenceRelationStorage(ctx, req.(*AlterReferenceRelationStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceRelationsService_SyncReferenceRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncReferenceRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceRelationsServiceServer).SyncReferenceRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceRelationsService_SyncReferenceRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceRelationsServiceServer).SyncReferenceRelations(ctx, req.(*SyncReferenceRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReferenceRelationsService_ServiceDesc is the grpc.ServiceDesc for ReferenceRelationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReferenceRelationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spqr.ReferenceRelationsService",
	HandlerType: (*ReferenceRelationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReferenceRelations",
			Handler:    _ReferenceRelationsService_CreateReferenceRelations_Handler,
		},
		{
			MethodName: "DropReferenceRelations",
			Handler:    _ReferenceRelationsService_DropReferenceRelations_Handler,
		},
		{
			MethodName: "ListReferenceRelations",
			Handler:    _ReferenceRelationsService_ListReferenceRelations_Handler,
		},
		{
			MethodName: "AlterReferenceRelationStorage",
			Handler:    _ReferenceRelationsService_AlterReferenceRelationStorage_Handler,
		},
		{
			MethodName: "SyncReferenceRelations",
			Handler:    _ReferenceRelationsService_SyncReferenceRelations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/reference_relation.proto",
}
