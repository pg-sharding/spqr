// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: protos/reference_relation.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReferenceTablesService_CreateReferenceTables_FullMethodName = "/spqr.ReferenceTablesService/CreateReferenceTables"
	ReferenceTablesService_DropReferenceTables_FullMethodName   = "/spqr.ReferenceTablesService/DropReferenceTables"
	ReferenceTablesService_ListReferenceTabless_FullMethodName  = "/spqr.ReferenceTablesService/ListReferenceTabless"
	ReferenceTablesService_SyncReferenceTables_FullMethodName   = "/spqr.ReferenceTablesService/SyncReferenceTables"
)

// ReferenceTablesServiceClient is the client API for ReferenceTablesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReferenceTablesServiceClient interface {
	CreateReferenceTables(ctx context.Context, in *CreateReferenceTablesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DropReferenceTables(ctx context.Context, in *DropReferenceTablesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListReferenceTabless(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListReferenceTablessReply, error)
	SyncReferenceTables(ctx context.Context, in *SyncReferenceTablesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type referenceTablesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReferenceTablesServiceClient(cc grpc.ClientConnInterface) ReferenceTablesServiceClient {
	return &referenceTablesServiceClient{cc}
}

func (c *referenceTablesServiceClient) CreateReferenceTables(ctx context.Context, in *CreateReferenceTablesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReferenceTablesService_CreateReferenceTables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceTablesServiceClient) DropReferenceTables(ctx context.Context, in *DropReferenceTablesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReferenceTablesService_DropReferenceTables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceTablesServiceClient) ListReferenceTabless(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListReferenceTablessReply, error) {
	out := new(ListReferenceTablessReply)
	err := c.cc.Invoke(ctx, ReferenceTablesService_ListReferenceTabless_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceTablesServiceClient) SyncReferenceTables(ctx context.Context, in *SyncReferenceTablesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReferenceTablesService_SyncReferenceTables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReferenceTablesServiceServer is the server API for ReferenceTablesService service.
// All implementations must embed UnimplementedReferenceTablesServiceServer
// for forward compatibility
type ReferenceTablesServiceServer interface {
	CreateReferenceTables(context.Context, *CreateReferenceTablesRequest) (*emptypb.Empty, error)
	DropReferenceTables(context.Context, *DropReferenceTablesRequest) (*emptypb.Empty, error)
	ListReferenceTabless(context.Context, *emptypb.Empty) (*ListReferenceTablessReply, error)
	SyncReferenceTables(context.Context, *SyncReferenceTablesRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedReferenceTablesServiceServer()
}

// UnimplementedReferenceTablesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReferenceTablesServiceServer struct {
}

func (UnimplementedReferenceTablesServiceServer) CreateReferenceTables(context.Context, *CreateReferenceTablesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReferenceTables not implemented")
}
func (UnimplementedReferenceTablesServiceServer) DropReferenceTables(context.Context, *DropReferenceTablesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropReferenceTables not implemented")
}
func (UnimplementedReferenceTablesServiceServer) ListReferenceTabless(context.Context, *emptypb.Empty) (*ListReferenceTablessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReferenceTabless not implemented")
}
func (UnimplementedReferenceTablesServiceServer) SyncReferenceTables(context.Context, *SyncReferenceTablesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncReferenceTables not implemented")
}
func (UnimplementedReferenceTablesServiceServer) mustEmbedUnimplementedReferenceTablesServiceServer() {
}

// UnsafeReferenceTablesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReferenceTablesServiceServer will
// result in compilation errors.
type UnsafeReferenceTablesServiceServer interface {
	mustEmbedUnimplementedReferenceTablesServiceServer()
}

func RegisterReferenceTablesServiceServer(s grpc.ServiceRegistrar, srv ReferenceTablesServiceServer) {
	s.RegisterService(&ReferenceTablesService_ServiceDesc, srv)
}

func _ReferenceTablesService_CreateReferenceTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReferenceTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceTablesServiceServer).CreateReferenceTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceTablesService_CreateReferenceTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceTablesServiceServer).CreateReferenceTables(ctx, req.(*CreateReferenceTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceTablesService_DropReferenceTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropReferenceTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceTablesServiceServer).DropReferenceTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceTablesService_DropReferenceTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceTablesServiceServer).DropReferenceTables(ctx, req.(*DropReferenceTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceTablesService_ListReferenceTabless_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceTablesServiceServer).ListReferenceTabless(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceTablesService_ListReferenceTabless_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceTablesServiceServer).ListReferenceTabless(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceTablesService_SyncReferenceTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncReferenceTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceTablesServiceServer).SyncReferenceTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferenceTablesService_SyncReferenceTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceTablesServiceServer).SyncReferenceTables(ctx, req.(*SyncReferenceTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReferenceTablesService_ServiceDesc is the grpc.ServiceDesc for ReferenceTablesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReferenceTablesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spqr.ReferenceTablesService",
	HandlerType: (*ReferenceTablesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReferenceTables",
			Handler:    _ReferenceTablesService_CreateReferenceTables_Handler,
		},
		{
			MethodName: "DropReferenceTables",
			Handler:    _ReferenceTablesService_DropReferenceTables_Handler,
		},
		{
			MethodName: "ListReferenceTabless",
			Handler:    _ReferenceTablesService_ListReferenceTabless_Handler,
		},
		{
			MethodName: "SyncReferenceTables",
			Handler:    _ReferenceTablesService_SyncReferenceTables_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/reference_relation.proto",
}
