// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: protos/keyspace.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyspaceServiceClient is the client API for KeyspaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyspaceServiceClient interface {
	AddKeyspace(ctx context.Context, in *AddKeyspaceRequest, opts ...grpc.CallOption) (*AddKeyspaceReply, error)
	DropKeyspace(ctx context.Context, in *DropKeyspaceRequest, opts ...grpc.CallOption) (*DropKeyspaceReply, error)
	ListKeyspace(ctx context.Context, in *ListKeyspaceRequest, opts ...grpc.CallOption) (*ListKeyspaceReply, error)
	AlterKeyspaceAttachRelation(ctx context.Context, in *AlterKeyspaceAttachRelationRequest, opts ...grpc.CallOption) (*AlterKeyspaceAttachRelationReply, error)
	GetKeyspace(ctx context.Context, in *GetKeyspaceRequest, opts ...grpc.CallOption) (*GetKeyspaceReply, error)
	GetKeyspaceForRelation(ctx context.Context, in *GetKeyspaceForRelationRequest, opts ...grpc.CallOption) (*GetKeyspaceForRelationReply, error)
}

type keyspaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyspaceServiceClient(cc grpc.ClientConnInterface) KeyspaceServiceClient {
	return &keyspaceServiceClient{cc}
}

func (c *keyspaceServiceClient) AddKeyspace(ctx context.Context, in *AddKeyspaceRequest, opts ...grpc.CallOption) (*AddKeyspaceReply, error) {
	out := new(AddKeyspaceReply)
	err := c.cc.Invoke(ctx, "/spqr.KeyspaceService/AddKeyspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyspaceServiceClient) DropKeyspace(ctx context.Context, in *DropKeyspaceRequest, opts ...grpc.CallOption) (*DropKeyspaceReply, error) {
	out := new(DropKeyspaceReply)
	err := c.cc.Invoke(ctx, "/spqr.KeyspaceService/DropKeyspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyspaceServiceClient) ListKeyspace(ctx context.Context, in *ListKeyspaceRequest, opts ...grpc.CallOption) (*ListKeyspaceReply, error) {
	out := new(ListKeyspaceReply)
	err := c.cc.Invoke(ctx, "/spqr.KeyspaceService/ListKeyspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyspaceServiceClient) AlterKeyspaceAttachRelation(ctx context.Context, in *AlterKeyspaceAttachRelationRequest, opts ...grpc.CallOption) (*AlterKeyspaceAttachRelationReply, error) {
	out := new(AlterKeyspaceAttachRelationReply)
	err := c.cc.Invoke(ctx, "/spqr.KeyspaceService/AlterKeyspaceAttachRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyspaceServiceClient) GetKeyspace(ctx context.Context, in *GetKeyspaceRequest, opts ...grpc.CallOption) (*GetKeyspaceReply, error) {
	out := new(GetKeyspaceReply)
	err := c.cc.Invoke(ctx, "/spqr.KeyspaceService/GetKeyspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyspaceServiceClient) GetKeyspaceForRelation(ctx context.Context, in *GetKeyspaceForRelationRequest, opts ...grpc.CallOption) (*GetKeyspaceForRelationReply, error) {
	out := new(GetKeyspaceForRelationReply)
	err := c.cc.Invoke(ctx, "/spqr.KeyspaceService/GetKeyspaceForRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyspaceServiceServer is the server API for KeyspaceService service.
// All implementations must embed UnimplementedKeyspaceServiceServer
// for forward compatibility
type KeyspaceServiceServer interface {
	AddKeyspace(context.Context, *AddKeyspaceRequest) (*AddKeyspaceReply, error)
	DropKeyspace(context.Context, *DropKeyspaceRequest) (*DropKeyspaceReply, error)
	ListKeyspace(context.Context, *ListKeyspaceRequest) (*ListKeyspaceReply, error)
	AlterKeyspaceAttachRelation(context.Context, *AlterKeyspaceAttachRelationRequest) (*AlterKeyspaceAttachRelationReply, error)
	GetKeyspace(context.Context, *GetKeyspaceRequest) (*GetKeyspaceReply, error)
	GetKeyspaceForRelation(context.Context, *GetKeyspaceForRelationRequest) (*GetKeyspaceForRelationReply, error)
	mustEmbedUnimplementedKeyspaceServiceServer()
}

// UnimplementedKeyspaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyspaceServiceServer struct {
}

func (UnimplementedKeyspaceServiceServer) AddKeyspace(context.Context, *AddKeyspaceRequest) (*AddKeyspaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKeyspace not implemented")
}
func (UnimplementedKeyspaceServiceServer) DropKeyspace(context.Context, *DropKeyspaceRequest) (*DropKeyspaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropKeyspace not implemented")
}
func (UnimplementedKeyspaceServiceServer) ListKeyspace(context.Context, *ListKeyspaceRequest) (*ListKeyspaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyspace not implemented")
}
func (UnimplementedKeyspaceServiceServer) AlterKeyspaceAttachRelation(context.Context, *AlterKeyspaceAttachRelationRequest) (*AlterKeyspaceAttachRelationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterKeyspaceAttachRelation not implemented")
}
func (UnimplementedKeyspaceServiceServer) GetKeyspace(context.Context, *GetKeyspaceRequest) (*GetKeyspaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyspace not implemented")
}
func (UnimplementedKeyspaceServiceServer) GetKeyspaceForRelation(context.Context, *GetKeyspaceForRelationRequest) (*GetKeyspaceForRelationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyspaceForRelation not implemented")
}
func (UnimplementedKeyspaceServiceServer) mustEmbedUnimplementedKeyspaceServiceServer() {}

// UnsafeKeyspaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyspaceServiceServer will
// result in compilation errors.
type UnsafeKeyspaceServiceServer interface {
	mustEmbedUnimplementedKeyspaceServiceServer()
}

func RegisterKeyspaceServiceServer(s grpc.ServiceRegistrar, srv KeyspaceServiceServer) {
	s.RegisterService(&KeyspaceService_ServiceDesc, srv)
}

func _KeyspaceService_AddKeyspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKeyspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyspaceServiceServer).AddKeyspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spqr.KeyspaceService/AddKeyspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyspaceServiceServer).AddKeyspace(ctx, req.(*AddKeyspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyspaceService_DropKeyspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropKeyspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyspaceServiceServer).DropKeyspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spqr.KeyspaceService/DropKeyspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyspaceServiceServer).DropKeyspace(ctx, req.(*DropKeyspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyspaceService_ListKeyspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyspaceServiceServer).ListKeyspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spqr.KeyspaceService/ListKeyspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyspaceServiceServer).ListKeyspace(ctx, req.(*ListKeyspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyspaceService_AlterKeyspaceAttachRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterKeyspaceAttachRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyspaceServiceServer).AlterKeyspaceAttachRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spqr.KeyspaceService/AlterKeyspaceAttachRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyspaceServiceServer).AlterKeyspaceAttachRelation(ctx, req.(*AlterKeyspaceAttachRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyspaceService_GetKeyspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyspaceServiceServer).GetKeyspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spqr.KeyspaceService/GetKeyspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyspaceServiceServer).GetKeyspace(ctx, req.(*GetKeyspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyspaceService_GetKeyspaceForRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyspaceForRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyspaceServiceServer).GetKeyspaceForRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spqr.KeyspaceService/GetKeyspaceForRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyspaceServiceServer).GetKeyspaceForRelation(ctx, req.(*GetKeyspaceForRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyspaceService_ServiceDesc is the grpc.ServiceDesc for KeyspaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyspaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spqr.KeyspaceService",
	HandlerType: (*KeyspaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddKeyspace",
			Handler:    _KeyspaceService_AddKeyspace_Handler,
		},
		{
			MethodName: "DropKeyspace",
			Handler:    _KeyspaceService_DropKeyspace_Handler,
		},
		{
			MethodName: "ListKeyspace",
			Handler:    _KeyspaceService_ListKeyspace_Handler,
		},
		{
			MethodName: "AlterKeyspaceAttachRelation",
			Handler:    _KeyspaceService_AlterKeyspaceAttachRelation_Handler,
		},
		{
			MethodName: "GetKeyspace",
			Handler:    _KeyspaceService_GetKeyspace_Handler,
		},
		{
			MethodName: "GetKeyspaceForRelation",
			Handler:    _KeyspaceService_GetKeyspaceForRelation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/keyspace.proto",
}
