// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/meta/meta.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	datashards "github.com/pg-sharding/spqr/pkg/models/datashards"
	distributions "github.com/pg-sharding/spqr/pkg/models/distributions"
	kr "github.com/pg-sharding/spqr/pkg/models/kr"
	tasks "github.com/pg-sharding/spqr/pkg/models/tasks"
	topology "github.com/pg-sharding/spqr/pkg/models/topology"
	qdb "github.com/pg-sharding/spqr/qdb"
	cache "github.com/pg-sharding/spqr/router/cache"
)

// MockEntityMgr is a mock of EntityMgr interface.
type MockEntityMgr struct {
	ctrl     *gomock.Controller
	recorder *MockEntityMgrMockRecorder
}

// MockEntityMgrMockRecorder is the mock recorder for MockEntityMgr.
type MockEntityMgrMockRecorder struct {
	mock *MockEntityMgr
}

// NewMockEntityMgr creates a new mock instance.
func NewMockEntityMgr(ctrl *gomock.Controller) *MockEntityMgr {
	mock := &MockEntityMgr{ctrl: ctrl}
	mock.recorder = &MockEntityMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityMgr) EXPECT() *MockEntityMgrMockRecorder {
	return m.recorder
}

// AddDataShard mocks base method.
func (m *MockEntityMgr) AddDataShard(ctx context.Context, shard *datashards.DataShard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDataShard", ctx, shard)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDataShard indicates an expected call of AddDataShard.
func (mr *MockEntityMgrMockRecorder) AddDataShard(ctx, shard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDataShard", reflect.TypeOf((*MockEntityMgr)(nil).AddDataShard), ctx, shard)
}

// AddWorldShard mocks base method.
func (m *MockEntityMgr) AddWorldShard(ctx context.Context, shard *datashards.DataShard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorldShard", ctx, shard)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWorldShard indicates an expected call of AddWorldShard.
func (mr *MockEntityMgrMockRecorder) AddWorldShard(ctx, shard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorldShard", reflect.TypeOf((*MockEntityMgr)(nil).AddWorldShard), ctx, shard)
}

// AlterDistributionAttach mocks base method.
func (m *MockEntityMgr) AlterDistributionAttach(ctx context.Context, id string, rels []*distributions.DistributedRelation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterDistributionAttach", ctx, id, rels)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterDistributionAttach indicates an expected call of AlterDistributionAttach.
func (mr *MockEntityMgrMockRecorder) AlterDistributionAttach(ctx, id, rels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterDistributionAttach", reflect.TypeOf((*MockEntityMgr)(nil).AlterDistributionAttach), ctx, id, rels)
}

// AlterDistributionDetach mocks base method.
func (m *MockEntityMgr) AlterDistributionDetach(ctx context.Context, id, relName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterDistributionDetach", ctx, id, relName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterDistributionDetach indicates an expected call of AlterDistributionDetach.
func (mr *MockEntityMgrMockRecorder) AlterDistributionDetach(ctx, id, relName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterDistributionDetach", reflect.TypeOf((*MockEntityMgr)(nil).AlterDistributionDetach), ctx, id, relName)
}

// BatchMoveKeyRange mocks base method.
func (m *MockEntityMgr) BatchMoveKeyRange(ctx context.Context, req *kr.BatchMoveKeyRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchMoveKeyRange", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchMoveKeyRange indicates an expected call of BatchMoveKeyRange.
func (mr *MockEntityMgrMockRecorder) BatchMoveKeyRange(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchMoveKeyRange", reflect.TypeOf((*MockEntityMgr)(nil).BatchMoveKeyRange), ctx, req)
}

// Cache mocks base method.
func (m *MockEntityMgr) Cache() *cache.SchemaCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cache")
	ret0, _ := ret[0].(*cache.SchemaCache)
	return ret0
}

// Cache indicates an expected call of Cache.
func (mr *MockEntityMgrMockRecorder) Cache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cache", reflect.TypeOf((*MockEntityMgr)(nil).Cache))
}

// CreateDistribution mocks base method.
func (m *MockEntityMgr) CreateDistribution(ctx context.Context, ds *distributions.Distribution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDistribution", ctx, ds)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDistribution indicates an expected call of CreateDistribution.
func (mr *MockEntityMgrMockRecorder) CreateDistribution(ctx, ds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistribution", reflect.TypeOf((*MockEntityMgr)(nil).CreateDistribution), ctx, ds)
}

// CreateKeyRange mocks base method.
func (m *MockEntityMgr) CreateKeyRange(ctx context.Context, kr *kr.KeyRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyRange", ctx, kr)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKeyRange indicates an expected call of CreateKeyRange.
func (mr *MockEntityMgrMockRecorder) CreateKeyRange(ctx, kr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyRange", reflect.TypeOf((*MockEntityMgr)(nil).CreateKeyRange), ctx, kr)
}

// DropDistribution mocks base method.
func (m *MockEntityMgr) DropDistribution(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDistribution", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropDistribution indicates an expected call of DropDistribution.
func (mr *MockEntityMgrMockRecorder) DropDistribution(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDistribution", reflect.TypeOf((*MockEntityMgr)(nil).DropDistribution), ctx, id)
}

// DropKeyRange mocks base method.
func (m *MockEntityMgr) DropKeyRange(ctx context.Context, krid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropKeyRange", ctx, krid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropKeyRange indicates an expected call of DropKeyRange.
func (mr *MockEntityMgrMockRecorder) DropKeyRange(ctx, krid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropKeyRange", reflect.TypeOf((*MockEntityMgr)(nil).DropKeyRange), ctx, krid)
}

// DropKeyRangeAll mocks base method.
func (m *MockEntityMgr) DropKeyRangeAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropKeyRangeAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropKeyRangeAll indicates an expected call of DropKeyRangeAll.
func (mr *MockEntityMgrMockRecorder) DropKeyRangeAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropKeyRangeAll", reflect.TypeOf((*MockEntityMgr)(nil).DropKeyRangeAll), ctx)
}

// DropShard mocks base method.
func (m *MockEntityMgr) DropShard(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropShard", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropShard indicates an expected call of DropShard.
func (mr *MockEntityMgrMockRecorder) DropShard(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropShard", reflect.TypeOf((*MockEntityMgr)(nil).DropShard), ctx, id)
}

// GetBalancerTask mocks base method.
func (m *MockEntityMgr) GetBalancerTask(ctx context.Context) (*tasks.BalancerTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalancerTask", ctx)
	ret0, _ := ret[0].(*tasks.BalancerTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalancerTask indicates an expected call of GetBalancerTask.
func (mr *MockEntityMgrMockRecorder) GetBalancerTask(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalancerTask", reflect.TypeOf((*MockEntityMgr)(nil).GetBalancerTask), ctx)
}

// GetCoordinator mocks base method.
func (m *MockEntityMgr) GetCoordinator(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoordinator", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoordinator indicates an expected call of GetCoordinator.
func (mr *MockEntityMgrMockRecorder) GetCoordinator(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoordinator", reflect.TypeOf((*MockEntityMgr)(nil).GetCoordinator), ctx)
}

// GetDistribution mocks base method.
func (m *MockEntityMgr) GetDistribution(ctx context.Context, id string) (*distributions.Distribution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistribution", ctx, id)
	ret0, _ := ret[0].(*distributions.Distribution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistribution indicates an expected call of GetDistribution.
func (mr *MockEntityMgrMockRecorder) GetDistribution(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistribution", reflect.TypeOf((*MockEntityMgr)(nil).GetDistribution), ctx, id)
}

// GetKeyRange mocks base method.
func (m *MockEntityMgr) GetKeyRange(ctx context.Context, krId string) (*kr.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyRange", ctx, krId)
	ret0, _ := ret[0].(*kr.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyRange indicates an expected call of GetKeyRange.
func (mr *MockEntityMgrMockRecorder) GetKeyRange(ctx, krId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyRange", reflect.TypeOf((*MockEntityMgr)(nil).GetKeyRange), ctx, krId)
}

// GetMoveTaskGroup mocks base method.
func (m *MockEntityMgr) GetMoveTaskGroup(ctx context.Context) (*tasks.MoveTaskGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoveTaskGroup", ctx)
	ret0, _ := ret[0].(*tasks.MoveTaskGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoveTaskGroup indicates an expected call of GetMoveTaskGroup.
func (mr *MockEntityMgrMockRecorder) GetMoveTaskGroup(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoveTaskGroup", reflect.TypeOf((*MockEntityMgr)(nil).GetMoveTaskGroup), ctx)
}

// GetRelationDistribution mocks base method.
func (m *MockEntityMgr) GetRelationDistribution(ctx context.Context, relation_name string) (*distributions.Distribution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationDistribution", ctx, relation_name)
	ret0, _ := ret[0].(*distributions.Distribution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationDistribution indicates an expected call of GetRelationDistribution.
func (mr *MockEntityMgrMockRecorder) GetRelationDistribution(ctx, relation_name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationDistribution", reflect.TypeOf((*MockEntityMgr)(nil).GetRelationDistribution), ctx, relation_name)
}

// GetShard mocks base method.
func (m *MockEntityMgr) GetShard(ctx context.Context, shardID string) (*datashards.DataShard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShard", ctx, shardID)
	ret0, _ := ret[0].(*datashards.DataShard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShard indicates an expected call of GetShard.
func (mr *MockEntityMgrMockRecorder) GetShard(ctx, shardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShard", reflect.TypeOf((*MockEntityMgr)(nil).GetShard), ctx, shardID)
}

// ListAllKeyRanges mocks base method.
func (m *MockEntityMgr) ListAllKeyRanges(ctx context.Context) ([]*kr.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllKeyRanges", ctx)
	ret0, _ := ret[0].([]*kr.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllKeyRanges indicates an expected call of ListAllKeyRanges.
func (mr *MockEntityMgrMockRecorder) ListAllKeyRanges(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllKeyRanges", reflect.TypeOf((*MockEntityMgr)(nil).ListAllKeyRanges), ctx)
}

// ListDistributions mocks base method.
func (m *MockEntityMgr) ListDistributions(ctx context.Context) ([]*distributions.Distribution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributions", ctx)
	ret0, _ := ret[0].([]*distributions.Distribution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributions indicates an expected call of ListDistributions.
func (mr *MockEntityMgrMockRecorder) ListDistributions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributions", reflect.TypeOf((*MockEntityMgr)(nil).ListDistributions), ctx)
}

// ListKeyRanges mocks base method.
func (m *MockEntityMgr) ListKeyRanges(ctx context.Context, distribution string) ([]*kr.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyRanges", ctx, distribution)
	ret0, _ := ret[0].([]*kr.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyRanges indicates an expected call of ListKeyRanges.
func (mr *MockEntityMgrMockRecorder) ListKeyRanges(ctx, distribution interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyRanges", reflect.TypeOf((*MockEntityMgr)(nil).ListKeyRanges), ctx, distribution)
}

// ListRouters mocks base method.
func (m *MockEntityMgr) ListRouters(ctx context.Context) ([]*topology.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouters", ctx)
	ret0, _ := ret[0].([]*topology.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouters indicates an expected call of ListRouters.
func (mr *MockEntityMgrMockRecorder) ListRouters(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouters", reflect.TypeOf((*MockEntityMgr)(nil).ListRouters), ctx)
}

// ListShards mocks base method.
func (m *MockEntityMgr) ListShards(ctx context.Context) ([]*datashards.DataShard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShards", ctx)
	ret0, _ := ret[0].([]*datashards.DataShard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShards indicates an expected call of ListShards.
func (mr *MockEntityMgrMockRecorder) ListShards(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShards", reflect.TypeOf((*MockEntityMgr)(nil).ListShards), ctx)
}

// LockKeyRange mocks base method.
func (m *MockEntityMgr) LockKeyRange(ctx context.Context, krid string) (*kr.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockKeyRange", ctx, krid)
	ret0, _ := ret[0].(*kr.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockKeyRange indicates an expected call of LockKeyRange.
func (mr *MockEntityMgrMockRecorder) LockKeyRange(ctx, krid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockKeyRange", reflect.TypeOf((*MockEntityMgr)(nil).LockKeyRange), ctx, krid)
}

// Move mocks base method.
func (m *MockEntityMgr) Move(ctx context.Context, move *kr.MoveKeyRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", ctx, move)
	ret0, _ := ret[0].(error)
	return ret0
}

// Move indicates an expected call of Move.
func (mr *MockEntityMgrMockRecorder) Move(ctx, move interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockEntityMgr)(nil).Move), ctx, move)
}

// QDB mocks base method.
func (m *MockEntityMgr) QDB() qdb.QDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QDB")
	ret0, _ := ret[0].(qdb.QDB)
	return ret0
}

// QDB indicates an expected call of QDB.
func (mr *MockEntityMgrMockRecorder) QDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QDB", reflect.TypeOf((*MockEntityMgr)(nil).QDB))
}

// RedistributeKeyRange mocks base method.
func (m *MockEntityMgr) RedistributeKeyRange(ctx context.Context, req *kr.RedistributeKeyRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedistributeKeyRange", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// RedistributeKeyRange indicates an expected call of RedistributeKeyRange.
func (mr *MockEntityMgrMockRecorder) RedistributeKeyRange(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedistributeKeyRange", reflect.TypeOf((*MockEntityMgr)(nil).RedistributeKeyRange), ctx, req)
}

// RegisterRouter mocks base method.
func (m *MockEntityMgr) RegisterRouter(ctx context.Context, r *topology.Router) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRouter", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterRouter indicates an expected call of RegisterRouter.
func (mr *MockEntityMgrMockRecorder) RegisterRouter(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRouter", reflect.TypeOf((*MockEntityMgr)(nil).RegisterRouter), ctx, r)
}

// RemoveBalancerTask mocks base method.
func (m *MockEntityMgr) RemoveBalancerTask(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBalancerTask", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBalancerTask indicates an expected call of RemoveBalancerTask.
func (mr *MockEntityMgrMockRecorder) RemoveBalancerTask(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBalancerTask", reflect.TypeOf((*MockEntityMgr)(nil).RemoveBalancerTask), ctx)
}

// RemoveMoveTaskGroup mocks base method.
func (m *MockEntityMgr) RemoveMoveTaskGroup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMoveTaskGroup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMoveTaskGroup indicates an expected call of RemoveMoveTaskGroup.
func (mr *MockEntityMgrMockRecorder) RemoveMoveTaskGroup(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMoveTaskGroup", reflect.TypeOf((*MockEntityMgr)(nil).RemoveMoveTaskGroup), ctx)
}

// RenameKeyRange mocks base method.
func (m *MockEntityMgr) RenameKeyRange(ctx context.Context, krId, krIdNew string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameKeyRange", ctx, krId, krIdNew)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameKeyRange indicates an expected call of RenameKeyRange.
func (mr *MockEntityMgrMockRecorder) RenameKeyRange(ctx, krId, krIdNew interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameKeyRange", reflect.TypeOf((*MockEntityMgr)(nil).RenameKeyRange), ctx, krId, krIdNew)
}

// ShareKeyRange mocks base method.
func (m *MockEntityMgr) ShareKeyRange(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareKeyRange", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShareKeyRange indicates an expected call of ShareKeyRange.
func (mr *MockEntityMgrMockRecorder) ShareKeyRange(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareKeyRange", reflect.TypeOf((*MockEntityMgr)(nil).ShareKeyRange), id)
}

// Split mocks base method.
func (m *MockEntityMgr) Split(ctx context.Context, split *kr.SplitKeyRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Split", ctx, split)
	ret0, _ := ret[0].(error)
	return ret0
}

// Split indicates an expected call of Split.
func (mr *MockEntityMgrMockRecorder) Split(ctx, split interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Split", reflect.TypeOf((*MockEntityMgr)(nil).Split), ctx, split)
}

// SyncRouterCoordinatorAddress mocks base method.
func (m *MockEntityMgr) SyncRouterCoordinatorAddress(ctx context.Context, router *topology.Router) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncRouterCoordinatorAddress", ctx, router)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncRouterCoordinatorAddress indicates an expected call of SyncRouterCoordinatorAddress.
func (mr *MockEntityMgrMockRecorder) SyncRouterCoordinatorAddress(ctx, router interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncRouterCoordinatorAddress", reflect.TypeOf((*MockEntityMgr)(nil).SyncRouterCoordinatorAddress), ctx, router)
}

// SyncRouterMetadata mocks base method.
func (m *MockEntityMgr) SyncRouterMetadata(ctx context.Context, router *topology.Router) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncRouterMetadata", ctx, router)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncRouterMetadata indicates an expected call of SyncRouterMetadata.
func (mr *MockEntityMgrMockRecorder) SyncRouterMetadata(ctx, router interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncRouterMetadata", reflect.TypeOf((*MockEntityMgr)(nil).SyncRouterMetadata), ctx, router)
}

// Unite mocks base method.
func (m *MockEntityMgr) Unite(ctx context.Context, unite *kr.UniteKeyRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unite", ctx, unite)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unite indicates an expected call of Unite.
func (mr *MockEntityMgrMockRecorder) Unite(ctx, unite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unite", reflect.TypeOf((*MockEntityMgr)(nil).Unite), ctx, unite)
}

// UnlockKeyRange mocks base method.
func (m *MockEntityMgr) UnlockKeyRange(ctx context.Context, krid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockKeyRange", ctx, krid)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockKeyRange indicates an expected call of UnlockKeyRange.
func (mr *MockEntityMgrMockRecorder) UnlockKeyRange(ctx, krid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockKeyRange", reflect.TypeOf((*MockEntityMgr)(nil).UnlockKeyRange), ctx, krid)
}

// UnregisterRouter mocks base method.
func (m *MockEntityMgr) UnregisterRouter(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterRouter", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterRouter indicates an expected call of UnregisterRouter.
func (mr *MockEntityMgrMockRecorder) UnregisterRouter(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterRouter", reflect.TypeOf((*MockEntityMgr)(nil).UnregisterRouter), ctx, id)
}

// UpdateCoordinator mocks base method.
func (m *MockEntityMgr) UpdateCoordinator(ctx context.Context, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoordinator", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCoordinator indicates an expected call of UpdateCoordinator.
func (mr *MockEntityMgrMockRecorder) UpdateCoordinator(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoordinator", reflect.TypeOf((*MockEntityMgr)(nil).UpdateCoordinator), ctx, address)
}

// WriteBalancerTask mocks base method.
func (m *MockEntityMgr) WriteBalancerTask(ctx context.Context, task *tasks.BalancerTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBalancerTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBalancerTask indicates an expected call of WriteBalancerTask.
func (mr *MockEntityMgrMockRecorder) WriteBalancerTask(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBalancerTask", reflect.TypeOf((*MockEntityMgr)(nil).WriteBalancerTask), ctx, task)
}

// WriteMoveTaskGroup mocks base method.
func (m *MockEntityMgr) WriteMoveTaskGroup(ctx context.Context, taskGroup *tasks.MoveTaskGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMoveTaskGroup", ctx, taskGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMoveTaskGroup indicates an expected call of WriteMoveTaskGroup.
func (mr *MockEntityMgrMockRecorder) WriteMoveTaskGroup(ctx, taskGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMoveTaskGroup", reflect.TypeOf((*MockEntityMgr)(nil).WriteMoveTaskGroup), ctx, taskGroup)
}
