// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/shard/shard.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/shard/shard.go -destination=pkg/mock/shard/mock_shard.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	pgproto3 "github.com/jackc/pgx/v5/pgproto3"
	config "github.com/pg-sharding/spqr/pkg/config"
	conn "github.com/pg-sharding/spqr/pkg/conn"
	kr "github.com/pg-sharding/spqr/pkg/models/kr"
	prepstatement "github.com/pg-sharding/spqr/pkg/prepstatement"
	shard "github.com/pg-sharding/spqr/pkg/shard"
	txstatus "github.com/pg-sharding/spqr/pkg/txstatus"
	gomock "go.uber.org/mock/gomock"
)

// MockShardHostInfo is a mock of ShardHostInfo interface.
type MockShardHostInfo struct {
	ctrl     *gomock.Controller
	recorder *MockShardHostInfoMockRecorder
	isgomock struct{}
}

// MockShardHostInfoMockRecorder is the mock recorder for MockShardHostInfo.
type MockShardHostInfoMockRecorder struct {
	mock *MockShardHostInfo
}

// NewMockShardHostInfo creates a new mock instance.
func NewMockShardHostInfo(ctrl *gomock.Controller) *MockShardHostInfo {
	mock := &MockShardHostInfo{ctrl: ctrl}
	mock.recorder = &MockShardHostInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardHostInfo) EXPECT() *MockShardHostInfoMockRecorder {
	return m.recorder
}

// DB mocks base method.
func (m *MockShardHostInfo) DB() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(string)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockShardHostInfoMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockShardHostInfo)(nil).DB))
}

// DataPending mocks base method.
func (m *MockShardHostInfo) DataPending() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataPending")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DataPending indicates an expected call of DataPending.
func (mr *MockShardHostInfoMockRecorder) DataPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataPending", reflect.TypeOf((*MockShardHostInfo)(nil).DataPending))
}

// ID mocks base method.
func (m *MockShardHostInfo) ID() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(uint)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockShardHostInfoMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockShardHostInfo)(nil).ID))
}

// InstanceHostname mocks base method.
func (m *MockShardHostInfo) InstanceHostname() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceHostname")
	ret0, _ := ret[0].(string)
	return ret0
}

// InstanceHostname indicates an expected call of InstanceHostname.
func (mr *MockShardHostInfoMockRecorder) InstanceHostname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceHostname", reflect.TypeOf((*MockShardHostInfo)(nil).InstanceHostname))
}

// ListPreparedStatements mocks base method.
func (m *MockShardHostInfo) ListPreparedStatements() []shard.PreparedStatementsMgrDescriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPreparedStatements")
	ret0, _ := ret[0].([]shard.PreparedStatementsMgrDescriptor)
	return ret0
}

// ListPreparedStatements indicates an expected call of ListPreparedStatements.
func (mr *MockShardHostInfoMockRecorder) ListPreparedStatements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPreparedStatements", reflect.TypeOf((*MockShardHostInfo)(nil).ListPreparedStatements))
}

// Pid mocks base method.
func (m *MockShardHostInfo) Pid() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pid")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Pid indicates an expected call of Pid.
func (mr *MockShardHostInfoMockRecorder) Pid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pid", reflect.TypeOf((*MockShardHostInfo)(nil).Pid))
}

// ShardKeyName mocks base method.
func (m *MockShardHostInfo) ShardKeyName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShardKeyName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ShardKeyName indicates an expected call of ShardKeyName.
func (mr *MockShardHostInfoMockRecorder) ShardKeyName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShardKeyName", reflect.TypeOf((*MockShardHostInfo)(nil).ShardKeyName))
}

// Sync mocks base method.
func (m *MockShardHostInfo) Sync() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockShardHostInfoMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockShardHostInfo)(nil).Sync))
}

// TxServed mocks base method.
func (m *MockShardHostInfo) TxServed() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxServed")
	ret0, _ := ret[0].(int64)
	return ret0
}

// TxServed indicates an expected call of TxServed.
func (mr *MockShardHostInfoMockRecorder) TxServed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxServed", reflect.TypeOf((*MockShardHostInfo)(nil).TxServed))
}

// TxStatus mocks base method.
func (m *MockShardHostInfo) TxStatus() txstatus.TXStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxStatus")
	ret0, _ := ret[0].(txstatus.TXStatus)
	return ret0
}

// TxStatus indicates an expected call of TxStatus.
func (mr *MockShardHostInfoMockRecorder) TxStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxStatus", reflect.TypeOf((*MockShardHostInfo)(nil).TxStatus))
}

// Usr mocks base method.
func (m *MockShardHostInfo) Usr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Usr")
	ret0, _ := ret[0].(string)
	return ret0
}

// Usr indicates an expected call of Usr.
func (mr *MockShardHostInfoMockRecorder) Usr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Usr", reflect.TypeOf((*MockShardHostInfo)(nil).Usr))
}

// MockCoordShardinfo is a mock of CoordShardinfo interface.
type MockCoordShardinfo struct {
	ctrl     *gomock.Controller
	recorder *MockCoordShardinfoMockRecorder
	isgomock struct{}
}

// MockCoordShardinfoMockRecorder is the mock recorder for MockCoordShardinfo.
type MockCoordShardinfoMockRecorder struct {
	mock *MockCoordShardinfo
}

// NewMockCoordShardinfo creates a new mock instance.
func NewMockCoordShardinfo(ctrl *gomock.Controller) *MockCoordShardinfo {
	mock := &MockCoordShardinfo{ctrl: ctrl}
	mock.recorder = &MockCoordShardinfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoordShardinfo) EXPECT() *MockCoordShardinfoMockRecorder {
	return m.recorder
}

// DB mocks base method.
func (m *MockCoordShardinfo) DB() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(string)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockCoordShardinfoMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockCoordShardinfo)(nil).DB))
}

// DataPending mocks base method.
func (m *MockCoordShardinfo) DataPending() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataPending")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DataPending indicates an expected call of DataPending.
func (mr *MockCoordShardinfoMockRecorder) DataPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataPending", reflect.TypeOf((*MockCoordShardinfo)(nil).DataPending))
}

// ID mocks base method.
func (m *MockCoordShardinfo) ID() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(uint)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockCoordShardinfoMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockCoordShardinfo)(nil).ID))
}

// InstanceHostname mocks base method.
func (m *MockCoordShardinfo) InstanceHostname() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceHostname")
	ret0, _ := ret[0].(string)
	return ret0
}

// InstanceHostname indicates an expected call of InstanceHostname.
func (mr *MockCoordShardinfoMockRecorder) InstanceHostname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceHostname", reflect.TypeOf((*MockCoordShardinfo)(nil).InstanceHostname))
}

// ListPreparedStatements mocks base method.
func (m *MockCoordShardinfo) ListPreparedStatements() []shard.PreparedStatementsMgrDescriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPreparedStatements")
	ret0, _ := ret[0].([]shard.PreparedStatementsMgrDescriptor)
	return ret0
}

// ListPreparedStatements indicates an expected call of ListPreparedStatements.
func (mr *MockCoordShardinfoMockRecorder) ListPreparedStatements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPreparedStatements", reflect.TypeOf((*MockCoordShardinfo)(nil).ListPreparedStatements))
}

// Pid mocks base method.
func (m *MockCoordShardinfo) Pid() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pid")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Pid indicates an expected call of Pid.
func (mr *MockCoordShardinfoMockRecorder) Pid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pid", reflect.TypeOf((*MockCoordShardinfo)(nil).Pid))
}

// Router mocks base method.
func (m *MockCoordShardinfo) Router() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Router")
	ret0, _ := ret[0].(string)
	return ret0
}

// Router indicates an expected call of Router.
func (mr *MockCoordShardinfoMockRecorder) Router() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Router", reflect.TypeOf((*MockCoordShardinfo)(nil).Router))
}

// ShardKeyName mocks base method.
func (m *MockCoordShardinfo) ShardKeyName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShardKeyName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ShardKeyName indicates an expected call of ShardKeyName.
func (mr *MockCoordShardinfoMockRecorder) ShardKeyName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShardKeyName", reflect.TypeOf((*MockCoordShardinfo)(nil).ShardKeyName))
}

// Sync mocks base method.
func (m *MockCoordShardinfo) Sync() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockCoordShardinfoMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockCoordShardinfo)(nil).Sync))
}

// TxServed mocks base method.
func (m *MockCoordShardinfo) TxServed() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxServed")
	ret0, _ := ret[0].(int64)
	return ret0
}

// TxServed indicates an expected call of TxServed.
func (mr *MockCoordShardinfoMockRecorder) TxServed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxServed", reflect.TypeOf((*MockCoordShardinfo)(nil).TxServed))
}

// TxStatus mocks base method.
func (m *MockCoordShardinfo) TxStatus() txstatus.TXStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxStatus")
	ret0, _ := ret[0].(txstatus.TXStatus)
	return ret0
}

// TxStatus indicates an expected call of TxStatus.
func (mr *MockCoordShardinfoMockRecorder) TxStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxStatus", reflect.TypeOf((*MockCoordShardinfo)(nil).TxStatus))
}

// Usr mocks base method.
func (m *MockCoordShardinfo) Usr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Usr")
	ret0, _ := ret[0].(string)
	return ret0
}

// Usr indicates an expected call of Usr.
func (mr *MockCoordShardinfoMockRecorder) Usr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Usr", reflect.TypeOf((*MockCoordShardinfo)(nil).Usr))
}

// MockShardHostInstance is a mock of ShardHostInstance interface.
type MockShardHostInstance struct {
	ctrl     *gomock.Controller
	recorder *MockShardHostInstanceMockRecorder
	isgomock struct{}
}

// MockShardHostInstanceMockRecorder is the mock recorder for MockShardHostInstance.
type MockShardHostInstanceMockRecorder struct {
	mock *MockShardHostInstance
}

// NewMockShardHostInstance creates a new mock instance.
func NewMockShardHostInstance(ctrl *gomock.Controller) *MockShardHostInstance {
	mock := &MockShardHostInstance{ctrl: ctrl}
	mock.recorder = &MockShardHostInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardHostInstance) EXPECT() *MockShardHostInstanceMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockShardHostInstance) Cancel() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockShardHostInstanceMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockShardHostInstance)(nil).Cancel))
}

// Cleanup mocks base method.
func (m *MockShardHostInstance) Cleanup(rule *config.FrontendRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup", rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockShardHostInstanceMockRecorder) Cleanup(rule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockShardHostInstance)(nil).Cleanup), rule)
}

// Close mocks base method.
func (m *MockShardHostInstance) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockShardHostInstanceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockShardHostInstance)(nil).Close))
}

// DB mocks base method.
func (m *MockShardHostInstance) DB() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(string)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockShardHostInstanceMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockShardHostInstance)(nil).DB))
}

// DataPending mocks base method.
func (m *MockShardHostInstance) DataPending() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataPending")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DataPending indicates an expected call of DataPending.
func (mr *MockShardHostInstanceMockRecorder) DataPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataPending", reflect.TypeOf((*MockShardHostInstance)(nil).DataPending))
}

// HasPrepareStatement mocks base method.
func (m *MockShardHostInstance) HasPrepareStatement(hash uint64, shardId uint) (bool, *prepstatement.PreparedStatementDescriptor) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPrepareStatement", hash, shardId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*prepstatement.PreparedStatementDescriptor)
	return ret0, ret1
}

// HasPrepareStatement indicates an expected call of HasPrepareStatement.
func (mr *MockShardHostInstanceMockRecorder) HasPrepareStatement(hash, shardId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPrepareStatement", reflect.TypeOf((*MockShardHostInstance)(nil).HasPrepareStatement), hash, shardId)
}

// ID mocks base method.
func (m *MockShardHostInstance) ID() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(uint)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockShardHostInstanceMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockShardHostInstance)(nil).ID))
}

// Instance mocks base method.
func (m *MockShardHostInstance) Instance() conn.DBInstance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instance")
	ret0, _ := ret[0].(conn.DBInstance)
	return ret0
}

// Instance indicates an expected call of Instance.
func (mr *MockShardHostInstanceMockRecorder) Instance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instance", reflect.TypeOf((*MockShardHostInstance)(nil).Instance))
}

// InstanceHostname mocks base method.
func (m *MockShardHostInstance) InstanceHostname() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceHostname")
	ret0, _ := ret[0].(string)
	return ret0
}

// InstanceHostname indicates an expected call of InstanceHostname.
func (mr *MockShardHostInstanceMockRecorder) InstanceHostname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceHostname", reflect.TypeOf((*MockShardHostInstance)(nil).InstanceHostname))
}

// ListPreparedStatements mocks base method.
func (m *MockShardHostInstance) ListPreparedStatements() []shard.PreparedStatementsMgrDescriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPreparedStatements")
	ret0, _ := ret[0].([]shard.PreparedStatementsMgrDescriptor)
	return ret0
}

// ListPreparedStatements indicates an expected call of ListPreparedStatements.
func (mr *MockShardHostInstanceMockRecorder) ListPreparedStatements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPreparedStatements", reflect.TypeOf((*MockShardHostInstance)(nil).ListPreparedStatements))
}

// Name mocks base method.
func (m *MockShardHostInstance) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockShardHostInstanceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockShardHostInstance)(nil).Name))
}

// Params mocks base method.
func (m *MockShardHostInstance) Params() shard.ParameterSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Params")
	ret0, _ := ret[0].(shard.ParameterSet)
	return ret0
}

// Params indicates an expected call of Params.
func (mr *MockShardHostInstanceMockRecorder) Params() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockShardHostInstance)(nil).Params))
}

// Pid mocks base method.
func (m *MockShardHostInstance) Pid() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pid")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Pid indicates an expected call of Pid.
func (mr *MockShardHostInstanceMockRecorder) Pid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pid", reflect.TypeOf((*MockShardHostInstance)(nil).Pid))
}

// Receive mocks base method.
func (m *MockShardHostInstance) Receive() (pgproto3.BackendMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive")
	ret0, _ := ret[0].(pgproto3.BackendMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockShardHostInstanceMockRecorder) Receive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockShardHostInstance)(nil).Receive))
}

// SHKey mocks base method.
func (m *MockShardHostInstance) SHKey() kr.ShardKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SHKey")
	ret0, _ := ret[0].(kr.ShardKey)
	return ret0
}

// SHKey indicates an expected call of SHKey.
func (mr *MockShardHostInstanceMockRecorder) SHKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SHKey", reflect.TypeOf((*MockShardHostInstance)(nil).SHKey))
}

// Send mocks base method.
func (m *MockShardHostInstance) Send(query pgproto3.FrontendMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", query)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockShardHostInstanceMockRecorder) Send(query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockShardHostInstance)(nil).Send), query)
}

// SetTxStatus mocks base method.
func (m *MockShardHostInstance) SetTxStatus(status txstatus.TXStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTxStatus", status)
}

// SetTxStatus indicates an expected call of SetTxStatus.
func (mr *MockShardHostInstanceMockRecorder) SetTxStatus(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTxStatus", reflect.TypeOf((*MockShardHostInstance)(nil).SetTxStatus), status)
}

// ShardKeyName mocks base method.
func (m *MockShardHostInstance) ShardKeyName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShardKeyName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ShardKeyName indicates an expected call of ShardKeyName.
func (mr *MockShardHostInstanceMockRecorder) ShardKeyName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShardKeyName", reflect.TypeOf((*MockShardHostInstance)(nil).ShardKeyName))
}

// StorePrepareStatement mocks base method.
func (m *MockShardHostInstance) StorePrepareStatement(hash uint64, shardId uint, d *prepstatement.PreparedStatementDefinition, rd *prepstatement.PreparedStatementDescriptor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePrepareStatement", hash, shardId, d, rd)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorePrepareStatement indicates an expected call of StorePrepareStatement.
func (mr *MockShardHostInstanceMockRecorder) StorePrepareStatement(hash, shardId, d, rd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePrepareStatement", reflect.TypeOf((*MockShardHostInstance)(nil).StorePrepareStatement), hash, shardId, d, rd)
}

// Sync mocks base method.
func (m *MockShardHostInstance) Sync() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockShardHostInstanceMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockShardHostInstance)(nil).Sync))
}

// TxServed mocks base method.
func (m *MockShardHostInstance) TxServed() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxServed")
	ret0, _ := ret[0].(int64)
	return ret0
}

// TxServed indicates an expected call of TxServed.
func (mr *MockShardHostInstanceMockRecorder) TxServed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxServed", reflect.TypeOf((*MockShardHostInstance)(nil).TxServed))
}

// TxStatus mocks base method.
func (m *MockShardHostInstance) TxStatus() txstatus.TXStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxStatus")
	ret0, _ := ret[0].(txstatus.TXStatus)
	return ret0
}

// TxStatus indicates an expected call of TxStatus.
func (mr *MockShardHostInstanceMockRecorder) TxStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxStatus", reflect.TypeOf((*MockShardHostInstance)(nil).TxStatus))
}

// Usr mocks base method.
func (m *MockShardHostInstance) Usr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Usr")
	ret0, _ := ret[0].(string)
	return ret0
}

// Usr indicates an expected call of Usr.
func (mr *MockShardHostInstanceMockRecorder) Usr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Usr", reflect.TypeOf((*MockShardHostInstance)(nil).Usr))
}

// MockShardIterator is a mock of ShardIterator interface.
type MockShardIterator struct {
	ctrl     *gomock.Controller
	recorder *MockShardIteratorMockRecorder
	isgomock struct{}
}

// MockShardIteratorMockRecorder is the mock recorder for MockShardIterator.
type MockShardIteratorMockRecorder struct {
	mock *MockShardIterator
}

// NewMockShardIterator creates a new mock instance.
func NewMockShardIterator(ctrl *gomock.Controller) *MockShardIterator {
	mock := &MockShardIterator{ctrl: ctrl}
	mock.recorder = &MockShardIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardIterator) EXPECT() *MockShardIteratorMockRecorder {
	return m.recorder
}

// ForEach mocks base method.
func (m *MockShardIterator) ForEach(cb func(shard.ShardHostInfo) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForEach", cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForEach indicates an expected call of ForEach.
func (mr *MockShardIteratorMockRecorder) ForEach(cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEach", reflect.TypeOf((*MockShardIterator)(nil).ForEach), cb)
}
