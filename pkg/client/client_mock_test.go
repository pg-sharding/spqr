// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pg-sharding/spqr/pkg/client (interfaces: Client)

// Package client_test is a generated GoMock package.
package client_test

import (
	tls "crypto/tls"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	pgproto3 "github.com/jackc/pgx/v5/pgproto3"
	shard "github.com/pg-sharding/spqr/pkg/shard"
	tsa "github.com/pg-sharding/spqr/pkg/tsa"
	txstatus "github.com/pg-sharding/spqr/pkg/txstatus"
	statistics "github.com/pg-sharding/spqr/router/statistics"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockClient) Add(arg0 statistics.StatisticsType, arg1 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockClientMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockClient)(nil).Add), arg0, arg1)
}

// AutoDistribution mocks base method.
func (m *MockClient) AutoDistribution() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoDistribution")
	ret0, _ := ret[0].(string)
	return ret0
}

// AutoDistribution indicates an expected call of AutoDistribution.
func (mr *MockClientMockRecorder) AutoDistribution() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoDistribution", reflect.TypeOf((*MockClient)(nil).AutoDistribution))
}

// BindParamFormatCodes mocks base method.
func (m *MockClient) BindParamFormatCodes() []int16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindParamFormatCodes")
	ret0, _ := ret[0].([]int16)
	return ret0
}

// BindParamFormatCodes indicates an expected call of BindParamFormatCodes.
func (mr *MockClientMockRecorder) BindParamFormatCodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindParamFormatCodes", reflect.TypeOf((*MockClient)(nil).BindParamFormatCodes))
}

// BindParams mocks base method.
func (m *MockClient) BindParams() [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindParams")
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// BindParams indicates an expected call of BindParams.
func (mr *MockClientMockRecorder) BindParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindParams", reflect.TypeOf((*MockClient)(nil).BindParams))
}

// Cancel mocks base method.
func (m *MockClient) Cancel() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockClientMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockClient)(nil).Cancel))
}

// CancelMsg mocks base method.
func (m *MockClient) CancelMsg() *pgproto3.CancelRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelMsg")
	ret0, _ := ret[0].(*pgproto3.CancelRequest)
	return ret0
}

// CancelMsg indicates an expected call of CancelMsg.
func (mr *MockClientMockRecorder) CancelMsg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMsg", reflect.TypeOf((*MockClient)(nil).CancelMsg))
}

// CleanupStatementSet mocks base method.
func (m *MockClient) CleanupStatementSet() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanupStatementSet")
}

// CleanupStatementSet indicates an expected call of CleanupStatementSet.
func (mr *MockClientMockRecorder) CleanupStatementSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupStatementSet", reflect.TypeOf((*MockClient)(nil).CleanupStatementSet))
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// CommitActiveSet mocks base method.
func (m *MockClient) CommitActiveSet() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CommitActiveSet")
}

// CommitActiveSet indicates an expected call of CommitActiveSet.
func (mr *MockClientMockRecorder) CommitActiveSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitActiveSet", reflect.TypeOf((*MockClient)(nil).CommitActiveSet))
}

// CommitStrategy mocks base method.
func (m *MockClient) CommitStrategy() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitStrategy")
	ret0, _ := ret[0].(string)
	return ret0
}

// CommitStrategy indicates an expected call of CommitStrategy.
func (mr *MockClientMockRecorder) CommitStrategy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitStrategy", reflect.TypeOf((*MockClient)(nil).CommitStrategy))
}

// ConstructClientParams mocks base method.
func (m *MockClient) ConstructClientParams() *pgproto3.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructClientParams")
	ret0, _ := ret[0].(*pgproto3.Query)
	return ret0
}

// ConstructClientParams indicates an expected call of ConstructClientParams.
func (mr *MockClientMockRecorder) ConstructClientParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructClientParams", reflect.TypeOf((*MockClient)(nil).ConstructClientParams))
}

// DB mocks base method.
func (m *MockClient) DB() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(string)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockClientMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockClient)(nil).DB))
}

// DefaultReply mocks base method.
func (m *MockClient) DefaultReply() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultReply")
	ret0, _ := ret[0].(error)
	return ret0
}

// DefaultReply indicates an expected call of DefaultReply.
func (mr *MockClientMockRecorder) DefaultReply() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultReply", reflect.TypeOf((*MockClient)(nil).DefaultReply))
}

// DefaultRouteBehaviour mocks base method.
func (m *MockClient) DefaultRouteBehaviour() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultRouteBehaviour")
	ret0, _ := ret[0].(string)
	return ret0
}

// DefaultRouteBehaviour indicates an expected call of DefaultRouteBehaviour.
func (mr *MockClientMockRecorder) DefaultRouteBehaviour() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultRouteBehaviour", reflect.TypeOf((*MockClient)(nil).DefaultRouteBehaviour))
}

// DistributedRelation mocks base method.
func (m *MockClient) DistributedRelation() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistributedRelation")
	ret0, _ := ret[0].(string)
	return ret0
}

// DistributedRelation indicates an expected call of DistributedRelation.
func (mr *MockClientMockRecorder) DistributedRelation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributedRelation", reflect.TypeOf((*MockClient)(nil).DistributedRelation))
}

// Distribution mocks base method.
func (m *MockClient) Distribution() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Distribution")
	ret0, _ := ret[0].(string)
	return ret0
}

// Distribution indicates an expected call of Distribution.
func (mr *MockClientMockRecorder) Distribution() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distribution", reflect.TypeOf((*MockClient)(nil).Distribution))
}

// DistributionKey mocks base method.
func (m *MockClient) DistributionKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistributionKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// DistributionKey indicates an expected call of DistributionKey.
func (mr *MockClientMockRecorder) DistributionKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributionKey", reflect.TypeOf((*MockClient)(nil).DistributionKey))
}

// EnhancedMultiShardProcessing mocks base method.
func (m *MockClient) EnhancedMultiShardProcessing() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnhancedMultiShardProcessing")
	ret0, _ := ret[0].(bool)
	return ret0
}

// EnhancedMultiShardProcessing indicates an expected call of EnhancedMultiShardProcessing.
func (mr *MockClientMockRecorder) EnhancedMultiShardProcessing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnhancedMultiShardProcessing", reflect.TypeOf((*MockClient)(nil).EnhancedMultiShardProcessing))
}

// ExecuteOn mocks base method.
func (m *MockClient) ExecuteOn() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteOn")
	ret0, _ := ret[0].(string)
	return ret0
}

// ExecuteOn indicates an expected call of ExecuteOn.
func (mr *MockClientMockRecorder) ExecuteOn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteOn", reflect.TypeOf((*MockClient)(nil).ExecuteOn))
}

// GetTimeData mocks base method.
func (m *MockClient) GetTimeData() *statistics.StartTimes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeData")
	ret0, _ := ret[0].(*statistics.StartTimes)
	return ret0
}

// GetTimeData indicates an expected call of GetTimeData.
func (mr *MockClientMockRecorder) GetTimeData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeData", reflect.TypeOf((*MockClient)(nil).GetTimeData))
}

// GetTimeQuantile mocks base method.
func (m *MockClient) GetTimeQuantile(arg0 statistics.StatisticsType, arg1 float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeQuantile", arg0, arg1)
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetTimeQuantile indicates an expected call of GetTimeQuantile.
func (mr *MockClientMockRecorder) GetTimeQuantile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeQuantile", reflect.TypeOf((*MockClient)(nil).GetTimeQuantile), arg0, arg1)
}

// GetTsa mocks base method.
func (m *MockClient) GetTsa() tsa.TSA {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTsa")
	ret0, _ := ret[0].(tsa.TSA)
	return ret0
}

// GetTsa indicates an expected call of GetTsa.
func (mr *MockClientMockRecorder) GetTsa() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTsa", reflect.TypeOf((*MockClient)(nil).GetTsa))
}

// ID mocks base method.
func (m *MockClient) ID() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(uint)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockClientMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockClient)(nil).ID))
}

// Init mocks base method.
func (m *MockClient) Init(arg0 *tls.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockClientMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockClient)(nil).Init), arg0)
}

// MaintainParams mocks base method.
func (m *MockClient) MaintainParams() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaintainParams")
	ret0, _ := ret[0].(bool)
	return ret0
}

// MaintainParams indicates an expected call of MaintainParams.
func (mr *MockClientMockRecorder) MaintainParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaintainParams", reflect.TypeOf((*MockClient)(nil).MaintainParams))
}

// Params mocks base method.
func (m *MockClient) Params() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Params")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Params indicates an expected call of Params.
func (mr *MockClientMockRecorder) Params() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockClient)(nil).Params))
}

// PasswordCT mocks base method.
func (m *MockClient) PasswordCT() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordCT")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PasswordCT indicates an expected call of PasswordCT.
func (mr *MockClientMockRecorder) PasswordCT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordCT", reflect.TypeOf((*MockClient)(nil).PasswordCT))
}

// PasswordMD5 mocks base method.
func (m *MockClient) PasswordMD5(arg0 [4]byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordMD5", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PasswordMD5 indicates an expected call of PasswordMD5.
func (mr *MockClientMockRecorder) PasswordMD5(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordMD5", reflect.TypeOf((*MockClient)(nil).PasswordMD5), arg0)
}

// Receive mocks base method.
func (m *MockClient) Receive() (pgproto3.FrontendMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive")
	ret0, _ := ret[0].(pgproto3.FrontendMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockClientMockRecorder) Receive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockClient)(nil).Receive))
}

// RecordStartTime mocks base method.
func (m *MockClient) RecordStartTime(arg0 statistics.StatisticsType, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordStartTime", arg0, arg1)
}

// RecordStartTime indicates an expected call of RecordStartTime.
func (mr *MockClientMockRecorder) RecordStartTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordStartTime", reflect.TypeOf((*MockClient)(nil).RecordStartTime), arg0, arg1)
}

// Reply mocks base method.
func (m *MockClient) Reply(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reply", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reply indicates an expected call of Reply.
func (mr *MockClientMockRecorder) Reply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reply", reflect.TypeOf((*MockClient)(nil).Reply), arg0)
}

// ReplyDebugNotice mocks base method.
func (m *MockClient) ReplyDebugNotice(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyDebugNotice", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyDebugNotice indicates an expected call of ReplyDebugNotice.
func (mr *MockClientMockRecorder) ReplyDebugNotice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyDebugNotice", reflect.TypeOf((*MockClient)(nil).ReplyDebugNotice), arg0)
}

// ReplyDebugNoticef mocks base method.
func (m *MockClient) ReplyDebugNoticef(arg0 string, arg1 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReplyDebugNoticef", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyDebugNoticef indicates an expected call of ReplyDebugNoticef.
func (mr *MockClientMockRecorder) ReplyDebugNoticef(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyDebugNoticef", reflect.TypeOf((*MockClient)(nil).ReplyDebugNoticef), varargs...)
}

// ReplyErr mocks base method.
func (m *MockClient) ReplyErr(arg0 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyErr", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyErr indicates an expected call of ReplyErr.
func (mr *MockClientMockRecorder) ReplyErr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyErr", reflect.TypeOf((*MockClient)(nil).ReplyErr), arg0)
}

// ReplyErrMsg mocks base method.
func (m *MockClient) ReplyErrMsg(arg0, arg1 string, arg2 txstatus.TXStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyErrMsg", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyErrMsg indicates an expected call of ReplyErrMsg.
func (mr *MockClientMockRecorder) ReplyErrMsg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyErrMsg", reflect.TypeOf((*MockClient)(nil).ReplyErrMsg), arg0, arg1, arg2)
}

// ReplyErrMsgByCode mocks base method.
func (m *MockClient) ReplyErrMsgByCode(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyErrMsgByCode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyErrMsgByCode indicates an expected call of ReplyErrMsgByCode.
func (mr *MockClientMockRecorder) ReplyErrMsgByCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyErrMsgByCode", reflect.TypeOf((*MockClient)(nil).ReplyErrMsgByCode), arg0)
}

// ReplyErrWithTxStatus mocks base method.
func (m *MockClient) ReplyErrWithTxStatus(arg0 error, arg1 txstatus.TXStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyErrWithTxStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyErrWithTxStatus indicates an expected call of ReplyErrWithTxStatus.
func (mr *MockClientMockRecorder) ReplyErrWithTxStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyErrWithTxStatus", reflect.TypeOf((*MockClient)(nil).ReplyErrWithTxStatus), arg0, arg1)
}

// ReplyNotice mocks base method.
func (m *MockClient) ReplyNotice(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyNotice", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyNotice indicates an expected call of ReplyNotice.
func (mr *MockClientMockRecorder) ReplyNotice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyNotice", reflect.TypeOf((*MockClient)(nil).ReplyNotice), arg0)
}

// ReplyRFQ mocks base method.
func (m *MockClient) ReplyRFQ(arg0 txstatus.TXStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyRFQ", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyRFQ indicates an expected call of ReplyRFQ.
func (mr *MockClientMockRecorder) ReplyRFQ(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyRFQ", reflect.TypeOf((*MockClient)(nil).ReplyRFQ), arg0)
}

// ReplyWarningMsg mocks base method.
func (m *MockClient) ReplyWarningMsg(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyWarningMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyWarningMsg indicates an expected call of ReplyWarningMsg.
func (mr *MockClientMockRecorder) ReplyWarningMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyWarningMsg", reflect.TypeOf((*MockClient)(nil).ReplyWarningMsg), arg0)
}

// ReplyWarningf mocks base method.
func (m *MockClient) ReplyWarningf(arg0 string, arg1 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReplyWarningf", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyWarningf indicates an expected call of ReplyWarningf.
func (mr *MockClientMockRecorder) ReplyWarningf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyWarningf", reflect.TypeOf((*MockClient)(nil).ReplyWarningf), varargs...)
}

// Reset mocks base method.
func (m *MockClient) Reset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockClientMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockClient)(nil).Reset))
}

// ResetAll mocks base method.
func (m *MockClient) ResetAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetAll")
}

// ResetAll indicates an expected call of ResetAll.
func (mr *MockClientMockRecorder) ResetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAll", reflect.TypeOf((*MockClient)(nil).ResetAll))
}

// ResetParam mocks base method.
func (m *MockClient) ResetParam(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetParam", arg0)
}

// ResetParam indicates an expected call of ResetParam.
func (mr *MockClientMockRecorder) ResetParam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetParam", reflect.TypeOf((*MockClient)(nil).ResetParam), arg0)
}

// Rollback mocks base method.
func (m *MockClient) Rollback() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback")
}

// Rollback indicates an expected call of Rollback.
func (mr *MockClientMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockClient)(nil).Rollback))
}

// RollbackToSP mocks base method.
func (m *MockClient) RollbackToSP(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RollbackToSP", arg0)
}

// RollbackToSP indicates an expected call of RollbackToSP.
func (mr *MockClientMockRecorder) RollbackToSP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackToSP", reflect.TypeOf((*MockClient)(nil).RollbackToSP), arg0)
}

// Savepoint mocks base method.
func (m *MockClient) Savepoint(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Savepoint", arg0)
}

// Savepoint indicates an expected call of Savepoint.
func (mr *MockClientMockRecorder) Savepoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Savepoint", reflect.TypeOf((*MockClient)(nil).Savepoint), arg0)
}

// ScatterQuery mocks base method.
func (m *MockClient) ScatterQuery() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScatterQuery")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ScatterQuery indicates an expected call of ScatterQuery.
func (mr *MockClientMockRecorder) ScatterQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScatterQuery", reflect.TypeOf((*MockClient)(nil).ScatterQuery))
}

// Send mocks base method.
func (m *MockClient) Send(arg0 pgproto3.BackendMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockClient)(nil).Send), arg0)
}

// SetAuthType mocks base method.
func (m *MockClient) SetAuthType(arg0 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAuthType", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAuthType indicates an expected call of SetAuthType.
func (mr *MockClientMockRecorder) SetAuthType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthType", reflect.TypeOf((*MockClient)(nil).SetAuthType), arg0)
}

// SetAutoDistribution mocks base method.
func (m *MockClient) SetAutoDistribution(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAutoDistribution", arg0)
}

// SetAutoDistribution indicates an expected call of SetAutoDistribution.
func (mr *MockClientMockRecorder) SetAutoDistribution(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAutoDistribution", reflect.TypeOf((*MockClient)(nil).SetAutoDistribution), arg0)
}

// SetBindParams mocks base method.
func (m *MockClient) SetBindParams(arg0 [][]byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBindParams", arg0)
}

// SetBindParams indicates an expected call of SetBindParams.
func (mr *MockClientMockRecorder) SetBindParams(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBindParams", reflect.TypeOf((*MockClient)(nil).SetBindParams), arg0)
}

// SetCommitStrategy mocks base method.
func (m *MockClient) SetCommitStrategy(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCommitStrategy", arg0)
}

// SetCommitStrategy indicates an expected call of SetCommitStrategy.
func (mr *MockClientMockRecorder) SetCommitStrategy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommitStrategy", reflect.TypeOf((*MockClient)(nil).SetCommitStrategy), arg0)
}

// SetDefaultRouteBehaviour mocks base method.
func (m *MockClient) SetDefaultRouteBehaviour(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDefaultRouteBehaviour", arg0, arg1)
}

// SetDefaultRouteBehaviour indicates an expected call of SetDefaultRouteBehaviour.
func (mr *MockClientMockRecorder) SetDefaultRouteBehaviour(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultRouteBehaviour", reflect.TypeOf((*MockClient)(nil).SetDefaultRouteBehaviour), arg0, arg1)
}

// SetDistributedRelation mocks base method.
func (m *MockClient) SetDistributedRelation(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDistributedRelation", arg0, arg1)
}

// SetDistributedRelation indicates an expected call of SetDistributedRelation.
func (mr *MockClientMockRecorder) SetDistributedRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDistributedRelation", reflect.TypeOf((*MockClient)(nil).SetDistributedRelation), arg0, arg1)
}

// SetDistribution mocks base method.
func (m *MockClient) SetDistribution(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDistribution", arg0, arg1)
}

// SetDistribution indicates an expected call of SetDistribution.
func (mr *MockClientMockRecorder) SetDistribution(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDistribution", reflect.TypeOf((*MockClient)(nil).SetDistribution), arg0, arg1)
}

// SetDistributionKey mocks base method.
func (m *MockClient) SetDistributionKey(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDistributionKey", arg0)
}

// SetDistributionKey indicates an expected call of SetDistributionKey.
func (mr *MockClientMockRecorder) SetDistributionKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDistributionKey", reflect.TypeOf((*MockClient)(nil).SetDistributionKey), arg0)
}

// SetEnhancedMultiShardProcessing mocks base method.
func (m *MockClient) SetEnhancedMultiShardProcessing(arg0 string, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEnhancedMultiShardProcessing", arg0, arg1)
}

// SetEnhancedMultiShardProcessing indicates an expected call of SetEnhancedMultiShardProcessing.
func (mr *MockClientMockRecorder) SetEnhancedMultiShardProcessing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEnhancedMultiShardProcessing", reflect.TypeOf((*MockClient)(nil).SetEnhancedMultiShardProcessing), arg0, arg1)
}

// SetExecuteOn mocks base method.
func (m *MockClient) SetExecuteOn(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExecuteOn", arg0, arg1)
}

// SetExecuteOn indicates an expected call of SetExecuteOn.
func (mr *MockClientMockRecorder) SetExecuteOn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExecuteOn", reflect.TypeOf((*MockClient)(nil).SetExecuteOn), arg0, arg1)
}

// SetMaintainParams mocks base method.
func (m *MockClient) SetMaintainParams(arg0 string, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaintainParams", arg0, arg1)
}

// SetMaintainParams indicates an expected call of SetMaintainParams.
func (mr *MockClientMockRecorder) SetMaintainParams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaintainParams", reflect.TypeOf((*MockClient)(nil).SetMaintainParams), arg0, arg1)
}

// SetParam mocks base method.
func (m *MockClient) SetParam(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParam", arg0, arg1)
}

// SetParam indicates an expected call of SetParam.
func (mr *MockClientMockRecorder) SetParam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParam", reflect.TypeOf((*MockClient)(nil).SetParam), arg0, arg1)
}

// SetParamFormatCodes mocks base method.
func (m *MockClient) SetParamFormatCodes(arg0 []int16) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParamFormatCodes", arg0)
}

// SetParamFormatCodes indicates an expected call of SetParamFormatCodes.
func (mr *MockClientMockRecorder) SetParamFormatCodes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParamFormatCodes", reflect.TypeOf((*MockClient)(nil).SetParamFormatCodes), arg0)
}

// SetScatterQuery mocks base method.
func (m *MockClient) SetScatterQuery(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetScatterQuery", arg0)
}

// SetScatterQuery indicates an expected call of SetScatterQuery.
func (mr *MockClientMockRecorder) SetScatterQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetScatterQuery", reflect.TypeOf((*MockClient)(nil).SetScatterQuery), arg0)
}

// SetShardingKey mocks base method.
func (m *MockClient) SetShardingKey(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetShardingKey", arg0, arg1)
}

// SetShardingKey indicates an expected call of SetShardingKey.
func (mr *MockClientMockRecorder) SetShardingKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShardingKey", reflect.TypeOf((*MockClient)(nil).SetShardingKey), arg0, arg1)
}

// SetShowNoticeMsg mocks base method.
func (m *MockClient) SetShowNoticeMsg(arg0 string, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetShowNoticeMsg", arg0, arg1)
}

// SetShowNoticeMsg indicates an expected call of SetShowNoticeMsg.
func (mr *MockClientMockRecorder) SetShowNoticeMsg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShowNoticeMsg", reflect.TypeOf((*MockClient)(nil).SetShowNoticeMsg), arg0, arg1)
}

// SetTsa mocks base method.
func (m *MockClient) SetTsa(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTsa", arg0, arg1)
}

// SetTsa indicates an expected call of SetTsa.
func (mr *MockClientMockRecorder) SetTsa(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTsa", reflect.TypeOf((*MockClient)(nil).SetTsa), arg0, arg1)
}

// ShardingKey mocks base method.
func (m *MockClient) ShardingKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShardingKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// ShardingKey indicates an expected call of ShardingKey.
func (mr *MockClientMockRecorder) ShardingKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShardingKey", reflect.TypeOf((*MockClient)(nil).ShardingKey))
}

// Shards mocks base method.
func (m *MockClient) Shards() []shard.ShardHostInstance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shards")
	ret0, _ := ret[0].([]shard.ShardHostInstance)
	return ret0
}

// Shards indicates an expected call of Shards.
func (mr *MockClientMockRecorder) Shards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shards", reflect.TypeOf((*MockClient)(nil).Shards))
}

// ShowNoticeMsg mocks base method.
func (m *MockClient) ShowNoticeMsg() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowNoticeMsg")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShowNoticeMsg indicates an expected call of ShowNoticeMsg.
func (mr *MockClientMockRecorder) ShowNoticeMsg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowNoticeMsg", reflect.TypeOf((*MockClient)(nil).ShowNoticeMsg))
}

// Shutdown mocks base method.
func (m *MockClient) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockClientMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockClient)(nil).Shutdown))
}

// StartTx mocks base method.
func (m *MockClient) StartTx() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartTx")
}

// StartTx indicates an expected call of StartTx.
func (mr *MockClientMockRecorder) StartTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTx", reflect.TypeOf((*MockClient)(nil).StartTx))
}

// StartupMessage mocks base method.
func (m *MockClient) StartupMessage() *pgproto3.StartupMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartupMessage")
	ret0, _ := ret[0].(*pgproto3.StartupMessage)
	return ret0
}

// StartupMessage indicates an expected call of StartupMessage.
func (mr *MockClientMockRecorder) StartupMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartupMessage", reflect.TypeOf((*MockClient)(nil).StartupMessage))
}

// Usr mocks base method.
func (m *MockClient) Usr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Usr")
	ret0, _ := ret[0].(string)
	return ret0
}

// Usr indicates an expected call of Usr.
func (mr *MockClientMockRecorder) Usr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Usr", reflect.TypeOf((*MockClient)(nil).Usr))
}
