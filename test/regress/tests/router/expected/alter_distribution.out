\c spqr-console

		SPQR router admin console
	Here you can configure your routing rules
------------------------------------------------
	You can find documentation here 
https://github.com/pg-sharding/spqr/tree/master/docs

CREATE DISTRIBUTION ds1 COLUMN TYPES int;
         add distribution         
----------------------------------
 created distribution with id ds1
(1 row)

CREATE DISTRIBUTION ds2 COLUMN TYPES int;
         add distribution         
----------------------------------
 created distribution with id ds2
(1 row)

CREATE KEY RANGE krid1 FROM 1 ROUTE TO sh1 FOR DISTRIBUTION ds1;
         add key range          
--------------------------------
 created key range with bound 1
(1 row)

CREATE KEY RANGE krid2 FROM 11 ROUTE TO sh2 FOR DISTRIBUTION ds1;
          add key range          
---------------------------------
 created key range with bound 11
(1 row)

CREATE KEY RANGE krid3 FROM 11 ROUTE TO sh2 FOR DISTRIBUTION ds2;
          add key range          
---------------------------------
 created key range with bound 11
(1 row)

CREATE KEY RANGE FROM 1 ROUTE TO sh2 FOR DISTRIBUTION ds2;
         add key range          
--------------------------------
 created key range with bound 1
(1 row)

ALTER DISTRIBUTION ds1 ATTACH RELATION xx DISTRIBUTION KEY w_id;
               attach table               
------------------------------------------
 attached relation xx to distribution ds1
(1 row)

ALTER DISTRIBUTION ds2 ATTACH RELATION yy DISTRIBUTION KEY w_id;
               attach table               
------------------------------------------
 attached relation yy to distribution ds2
(1 row)

ALTER DISTRIBUTION ds3 ATTACH RELATION xx DISTRIBUTION KEY w_id;
ERROR:  distribution "ds3" not found.
ALTER DISTRIBUTION ds1 ATTACH RELATION xx DISTRIBUTION KEY w_id;
ERROR:  relation "xx" is already attached.
\c regress
DROP TABLE IF EXISTS xx;
NOTICE: send query to shard(s) : sh1,sh2
CREATE TABLE xx (w_id int);
NOTICE: send query to shard(s) : sh1,sh2
INSERT INTO xx(w_id) VALUES(5);
NOTICE: send query to shard(s) : sh1
INSERT INTO xx(w_id) VALUES(20);
NOTICE: send query to shard(s) : sh2
SELECT * FROM xx WHERE w_id=5;
NOTICE: send query to shard(s) : sh1
 w_id 
------
    5
(1 row)

CREATE TABLE yy (w_id int);
NOTICE: send query to shard(s) : sh1,sh2
SELECT * FROM yy WHERE w_id=5;
NOTICE: send query to shard(s) : sh2
 w_id 
------
(0 rows)

\c spqr-console

		SPQR router admin console
	Here you can configure your routing rules
------------------------------------------------
	You can find documentation here 
https://github.com/pg-sharding/spqr/tree/master/docs

ALTER DISTRIBUTION ds1 ATTACH RELATION yy DISTRIBUTION KEY w_id;
ERROR:  relation "yy" is already attached.
ALTER DISTRIBUTION ds2 DETACH RELATION yy;
              detach relation               
--------------------------------------------
 detached relation yy from distribution ds2
(1 row)

ALTER DISTRIBUTION ds2 DETACH RELATION yy;
              detach relation               
--------------------------------------------
 detached relation yy from distribution ds2
(1 row)

ALTER DISTRIBUTION ds1 ATTACH RELATION yy DISTRIBUTION KEY w_id;
               attach table               
------------------------------------------
 attached relation yy to distribution ds1
(1 row)

\c regress
SELECT * FROM yy WHERE w_id=5;
NOTICE: send query to shard(s) : sh1
 w_id 
------
(0 rows)

DROP TABLE xx;
NOTICE: send query to shard(s) : sh1,sh2
DROP TABLE yy;
NOTICE: send query to shard(s) : sh1,sh2
\c spqr-console

		SPQR router admin console
	Here you can configure your routing rules
------------------------------------------------
	You can find documentation here 
https://github.com/pg-sharding/spqr/tree/master/docs

DROP DISTRIBUTION ALL CASCADE;
   drop distribution   
-----------------------
 drop distribution ds1
 drop distribution ds2
(2 rows)

DROP KEY RANGE ALL;
 drop key range 
----------------
(0 rows)

