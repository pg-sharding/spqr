\c spqr-console

		SPQR router admin console
	Here you can configure your routing rules
------------------------------------------------
	You can find documentation here 
https://github.com/pg-sharding/spqr/tree/master/docs

CREATE DISTRIBUTION ds1 COLUMN TYPES integer;
    add distribution    
------------------------
 distribution id -> ds1
(1 row)

-- test both ways of ref relation crete syntax
CREATE REFERENCE TABLE test_ref_rel;
   create reference table    
-----------------------------
 table    -> test_ref_rel
 shard id -> sh1,sh2,sh3,sh4
(2 rows)

-- partial ref relation test
CREATE REFERENCE RELATION test_ref_rel_part ON sh1, sh3;
    create reference table     
-------------------------------
 table    -> test_ref_rel_part
 shard id -> sh1,sh3
(2 rows)

CREATE DISTRIBUTED RELATION test_distr_ref_rel DISTRIBUTION KEY id IN ds1;
             attach table              
---------------------------------------
 relation name   -> test_distr_ref_rel
 distribution id -> ds1
(2 rows)

CREATE KEY RANGE kr4 FROM 300 ROUTE TO sh4 FOR DISTRIBUTION ds1;
 add key range 
---------------
 bound -> 300
(1 row)

CREATE KEY RANGE kr3 FROM 200 ROUTE TO sh3 FOR DISTRIBUTION ds1;
 add key range 
---------------
 bound -> 200
(1 row)

CREATE KEY RANGE kr2 FROM 100 ROUTE TO sh2 FOR DISTRIBUTION ds1;
 add key range 
---------------
 bound -> 100
(1 row)

CREATE KEY RANGE kr1 FROM 0 ROUTE TO sh1 FOR DISTRIBUTION ds1;
 add key range 
---------------
 bound -> 0
(1 row)

\c regress
CREATE TABLE test_ref_rel(i int, j int);
NOTICE: send query to shard(s) : sh1,sh2,sh3,sh4
CREATE TABLE test_distr_ref_rel(id int, val int);
NOTICE: send query to shard(s) : sh1,sh2,sh3,sh4
CREATE TABLE test_ref_rel_part(i int, j int);
NOTICE: send query to shard(s) : sh1,sh2,sh3,sh4
COPY test_ref_rel FROM STDIN;
NOTICE: send query to shard(s) : sh1,sh2,sh3,sh4
COPY test_ref_rel_part FROM STDIN;
NOTICE: send query to shard(s) : sh1,sh2,sh3,sh4
COPY test_distr_ref_rel(id, val) FROM STDIN WITH DELIMITER '|';
NOTICE: send query to shard(s) : sh1,sh2,sh3,sh4
set __spqr__default_route_behaviour to allow;
SELECT * FROM test_ref_rel ORDER BY i, j /*__spqr__execute_on: sh1 */;
NOTICE: send query to shard(s) : sh1
 i | j 
---+---
 1 | 2
 2 | 3
 3 | 4
 4 | 5
(4 rows)

set __spqr__default_route_behaviour to block;
SELECT * FROM test_ref_rel ORDER BY i, j /*__spqr__execute_on: sh2 */;
NOTICE: send query to shard(s) : sh2
 i | j 
---+---
 1 | 2
 2 | 3
 3 | 4
 4 | 5
(4 rows)

INSERT INTO test_ref_rel VALUES(1) /* __spqr__engine_v2: true */;
NOTICE: send query to shard(s) : sh1,sh2,sh3,sh4
INSERT INTO test_ref_rel SELECT 1 /* __spqr__engine_v2: true */;
NOTICE: send query to shard(s) : sh1,sh2,sh3,sh4
SELECT * FROM test_ref_rel ORDER BY i, j /*__spqr__execute_on: sh1 */;
NOTICE: send query to shard(s) : sh1
 i | j 
---+---
 1 | 2
 1 |  
 1 |  
 2 | 3
 3 | 4
 4 | 5
(6 rows)

SELECT * FROM test_ref_rel ORDER BY i, j /*__spqr__execute_on: sh2 */;
NOTICE: send query to shard(s) : sh2
 i | j 
---+---
 1 | 2
 1 |  
 1 |  
 2 | 3
 3 | 4
 4 | 5
(6 rows)

SELECT * FROM test_ref_rel ORDER BY i, j /*__spqr__execute_on: sh3 */;
NOTICE: send query to shard(s) : sh3
 i | j 
---+---
 1 | 2
 1 |  
 1 |  
 2 | 3
 3 | 4
 4 | 5
(6 rows)

SELECT * FROM test_ref_rel ORDER BY i, j /*__spqr__execute_on: sh4 */;
NOTICE: send query to shard(s) : sh4
 i | j 
---+---
 1 | 2
 1 |  
 1 |  
 2 | 3
 3 | 4
 4 | 5
(6 rows)

UPDATE test_ref_rel SET i = i + 1 /* __spqr__engine_v2: true */;
NOTICE: send query to shard(s) : sh1,sh2,sh3,sh4
UPDATE test_ref_rel SET i = - i WHERE i IN (3, 4) /* __spqr__engine_v2: true */;
NOTICE: send query to shard(s) : sh1,sh2,sh3,sh4
SELECT * FROM test_ref_rel ORDER BY i, j /*__spqr__execute_on: sh1 */;
NOTICE: send query to shard(s) : sh1
 i  | j 
----+---
 -4 | 4
 -3 | 3
  2 | 2
  2 |  
  2 |  
  5 | 5
(6 rows)

SELECT * FROM test_ref_rel ORDER BY i, j /*__spqr__execute_on: sh2 */;
NOTICE: send query to shard(s) : sh2
 i  | j 
----+---
 -4 | 4
 -3 | 3
  2 | 2
  2 |  
  2 |  
  5 | 5
(6 rows)

SELECT * FROM test_ref_rel ORDER BY i, j /*__spqr__execute_on: sh3 */;
NOTICE: send query to shard(s) : sh3
 i  | j 
----+---
 -4 | 4
 -3 | 3
  2 | 2
  2 |  
  2 |  
  5 | 5
(6 rows)

SELECT * FROM test_ref_rel ORDER BY i, j /*__spqr__execute_on: sh4 */;
NOTICE: send query to shard(s) : sh4
 i  | j 
----+---
 -4 | 4
 -3 | 3
  2 | 2
  2 |  
  2 |  
  5 | 5
(6 rows)

DELETE FROM test_ref_rel WHERE i = 2 /* __spqr__engine_v2: true */;
NOTICE: send query to shard(s) : sh1,sh2,sh3,sh4
-- check data
SELECT * FROM test_ref_rel ORDER BY i, j /*__spqr__execute_on: sh1 */;
NOTICE: send query to shard(s) : sh1
 i  | j 
----+---
 -4 | 4
 -3 | 3
  5 | 5
(3 rows)

SELECT * FROM test_ref_rel ORDER BY i, j /*__spqr__execute_on: sh2 */;
NOTICE: send query to shard(s) : sh2
 i  | j 
----+---
 -4 | 4
 -3 | 3
  5 | 5
(3 rows)

SELECT * FROM test_ref_rel ORDER BY i, j /*__spqr__execute_on: sh3 */;
NOTICE: send query to shard(s) : sh3
 i  | j 
----+---
 -4 | 4
 -3 | 3
  5 | 5
(3 rows)

SELECT * FROM test_ref_rel ORDER BY i, j /*__spqr__execute_on: sh4 */;
NOTICE: send query to shard(s) : sh4
 i  | j 
----+---
 -4 | 4
 -3 | 3
  5 | 5
(3 rows)

INSERT INTO test_ref_rel_part VALUES(1) /* __spqr__engine_v2: true */;
NOTICE: send query to shard(s) : sh1,sh3
INSERT INTO test_ref_rel_part SELECT 1 /* __spqr__engine_v2: true */;
NOTICE: send query to shard(s) : sh1,sh3
-- check data on partially distributed reference relation
SELECT * FROM test_ref_rel_part ORDER BY i, j /*__spqr__execute_on: sh1 */;
NOTICE: send query to shard(s) : sh1
 i | j 
---+---
 1 | 2
 1 |  
 1 |  
 2 | 3
 3 | 4
 4 | 5
(6 rows)

SELECT * FROM test_ref_rel_part ORDER BY i, j /*__spqr__execute_on: sh2 */;
NOTICE: send query to shard(s) : sh2
 i | j 
---+---
(0 rows)

SELECT * FROM test_ref_rel_part ORDER BY i, j /*__spqr__execute_on: sh3 */;
NOTICE: send query to shard(s) : sh3
 i | j 
---+---
 1 | 2
 1 |  
 1 |  
 2 | 3
 3 | 4
 4 | 5
(6 rows)

SELECT * FROM test_ref_rel_part ORDER BY i, j /*__spqr__execute_on: sh4 */;
NOTICE: send query to shard(s) : sh4
 i | j 
---+---
(0 rows)

/* Check execution for returning clause */
TRUNCATE test_ref_rel;
NOTICE: send query to shard(s) : sh1,sh2,sh3,sh4
INSERT INTO test_ref_rel VALUES(1,3),(2,4),(3,-1) RETURNING *;
NOTICE: send query to shard(s) : sh1,sh2,sh3,sh4
 i | j  
---+----
 1 |  3
 2 |  4
 3 | -1
(3 rows)

-- check data on partially distributed reference relation
SELECT * FROM test_ref_rel ORDER BY i, j /*__spqr__execute_on: sh1 */;
NOTICE: send query to shard(s) : sh1
 i | j  
---+----
 1 |  3
 2 |  4
 3 | -1
(3 rows)

SELECT * FROM test_ref_rel ORDER BY i, j /*__spqr__execute_on: sh2 */;
NOTICE: send query to shard(s) : sh2
 i | j  
---+----
 1 |  3
 2 |  4
 3 | -1
(3 rows)

SELECT * FROM test_ref_rel ORDER BY i, j /*__spqr__execute_on: sh3 */;
NOTICE: send query to shard(s) : sh3
 i | j  
---+----
 1 |  3
 2 |  4
 3 | -1
(3 rows)

SELECT * FROM test_ref_rel ORDER BY i, j /*__spqr__execute_on: sh4 */;
NOTICE: send query to shard(s) : sh4
 i | j  
---+----
 1 |  3
 2 |  4
 3 | -1
(3 rows)

-- Check routing for reference relation JOIN distributed relation
SELECT FROM test_distr_ref_rel a JOIN test_ref_rel b ON TRUE WHERE a.id = 333;
NOTICE: send query to shard(s) : sh4
--
(0 rows)

SELECT FROM test_distr_ref_rel a, test_ref_rel b WHERE a.id = 133;
NOTICE: send query to shard(s) : sh2
--
(0 rows)

SELECT FROM test_distr_ref_rel a, test_ref_rel_part b WHERE a.id = 33;
NOTICE: send query to shard(s) : sh1
--
(0 rows)

SELECT FROM test_distr_ref_rel a, test_ref_rel_part b WHERE a.id = 233;
NOTICE: send query to shard(s) : sh3
--
(0 rows)

DROP TABLE test_ref_rel;
NOTICE: send query to shard(s) : sh1,sh2,sh3,sh4
DROP TABLE test_ref_rel_part;
NOTICE: send query to shard(s) : sh1,sh2,sh3,sh4
DROP TABLE test_distr_ref_rel;
NOTICE: send query to shard(s) : sh1,sh2,sh3,sh4
\c spqr-console

		SPQR router admin console
	Here you can configure your routing rules
------------------------------------------------
	You can find documentation here 
https://github.com/pg-sharding/spqr/tree/master/docs

SHOW reference_relations;
    table name     | schema version |      shards       
-------------------+----------------+-------------------
 test_ref_rel      | 1              | [sh1 sh2 sh3 sh4]
 test_ref_rel_part | 1              | [sh1 sh3]
(2 rows)

DROP DISTRIBUTION ALL CASCADE;
       drop distribution       
-------------------------------
 distribution id -> REPLICATED
 distribution id -> ds1
(2 rows)

DROP KEY RANGE ALL;
 drop key range 
----------------
(0 rows)

