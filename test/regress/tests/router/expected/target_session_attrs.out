\c spqr-console

		SPQR router admin console
	Here you can configure your routing rules
------------------------------------------------
	You can find documentation here 
https://github.com/pg-sharding/spqr/tree/master/docs

CREATE DISTRIBUTION ds1 COLUMN TYPES integer;
    add distribution    
------------------------
 distribution id -> ds1
(1 row)

CREATE KEY RANGE krid2 FROM 101 ROUTE TO sh2 FOR DISTRIBUTION ds1;
 add key range 
---------------
 bound -> 101
(1 row)

CREATE KEY RANGE krid1 FROM 1 ROUTE TO sh1 FOR DISTRIBUTION ds1;
 add key range 
---------------
 bound -> 1
(1 row)

ALTER DISTRIBUTION ds1 ATTACH RELATION tsa_test DISTRIBUTION KEY id;
        attach table         
-----------------------------
 relation name   -> tsa_test
 distribution id -> ds1
(2 rows)

\c regress
CREATE TABLE tsa_test (id int);
NOTICE: send query to shard(s) : sh1,sh2,sh3,sh4
INSERT INTO tsa_test (id) VALUES (22);
NOTICE: send query to shard(s) : sh1
-- you could specify target-session-attrs anywhere in your query
SELECT pg_is_in_recovery() /* target-session-attrs: read-write */ , id FROM tsa_test WHERE id = 22;
NOTICE: send query to shard(s) : sh1
 pg_is_in_recovery | id 
-------------------+----
 f                 | 22
(1 row)

/* target-session-attrs: read-write */ SELECT pg_is_in_recovery(), id FROM tsa_test WHERE id = 22;
NOTICE: send query to shard(s) : sh1
 pg_is_in_recovery | id 
-------------------+----
 f                 | 22
(1 row)

SELECT pg_is_in_recovery(), id FROM tsa_test WHERE id = 22 /* target-session-attrs: read-write */;
NOTICE: send query to shard(s) : sh1
 pg_is_in_recovery | id 
-------------------+----
 f                 | 22
(1 row)

-- read-only is also supported but there is no high availability cluster in our tests yet, so it returns error
SELECT pg_is_in_recovery() /* target-session-attrs: read-only */ , id FROM tsa_test WHERE id = 22;
NOTICE: send query to shard(s) : sh1
 pg_is_in_recovery | id 
-------------------+----
 t                 | 22
(1 row)

SELECT NOT pg_is_in_recovery() /* target-session-attrs: read-only */ , id FROM tsa_test WHERE id = 22;
NOTICE: send query to shard(s) : sh1
 ?column? | id 
----------+----
 f        | 22
(1 row)

SHOW __spqr__target_session_attrs;
 target session attrs 
----------------------
 smart-read-write
(1 row)

SET __spqr__target_session_attrs TO 'prefer-standby';
SELECT pg_is_in_recovery();
 pg_is_in_recovery 
-------------------
 t
(1 row)

SELECT NOT pg_is_in_recovery();
 pg_is_in_recovery 
-------------------
 f
(1 row)

SHOW __spqr__target_session_attrs;
 target session attrs 
----------------------
 prefer-standby
(1 row)

SET __spqr__execute_on TO sh1;
SET __spqr__engine_v2 TO true;
select (select extract(epoch from TIMESTAMP '2024-12-09T21:05:00' AT TIME ZONE 'UTC-8')::integer) zz;
NOTICE: send query to shard(s) : sh1
     zz     
------------
 1733749500
(1 row)

SHOW __spqr__target_session_attrs;
 target session attrs 
----------------------
 prefer-standby
(1 row)

select (select /* target-session-attrs: prefer-standby */ extract(epoch from TIMESTAMP '2024-12-09T21:05:00' AT TIME ZONE 'UTC-8')::integer) zz;
NOTICE: send query to shard(s) : sh1
     zz     
------------
 1733749500
(1 row)

SET __spqr__target_session_attrs TO 'read-only';
SHOW __spqr__target_session_attrs;
 target session attrs 
----------------------
 read-only
(1 row)

SELECT TO_TIMESTAMP(
    '2017-03-31 9:30:20',
    'YYYY-MM-DD HH:MI:SS'
);
NOTICE: send query to shard(s) : sh1
      to_timestamp      
------------------------
 2017-03-31 09:30:20+00
(1 row)

SELECT /* __spqr__target_session_attrs: read-only */TO_TIMESTAMP(
    '2017-03-31 9:30:20',
    'YYYY-MM-DD HH:MI:SS'
);
NOTICE: send query to shard(s) : sh1
      to_timestamp      
------------------------
 2017-03-31 09:30:20+00
(1 row)

SHOW __spqr__target_session_attrs;
 target session attrs 
----------------------
 read-only
(1 row)

SET __spqr__target_session_attrs TO 'prefer-standby';
SHOW __spqr__target_session_attrs;
 target session attrs 
----------------------
 prefer-standby
(1 row)

BEGIN;
SET __spqr__target_session_attrs TO 'read-write';
SHOW __spqr__target_session_attrs;
 target session attrs 
----------------------
 read-write
(1 row)

ROLLBACK;
SHOW __spqr__target_session_attrs;
 target session attrs 
----------------------
 prefer-standby
(1 row)

SELECT TO_TIMESTAMP(
    '2017-03-31 9:30:20',
    'YYYY-MM-DD HH:MI:SS'
);
NOTICE: send query to shard(s) : sh1
      to_timestamp      
------------------------
 2017-03-31 09:30:20+00
(1 row)

SELECT /* __spqr__target_session_attrs: read-only */TO_TIMESTAMP(
    '2017-03-31 9:30:20',
    'YYYY-MM-DD HH:MI:SS'
);
NOTICE: send query to shard(s) : sh1
      to_timestamp      
------------------------
 2017-03-31 09:30:20+00
(1 row)

SHOW __spqr__target_session_attrs;
 target session attrs 
----------------------
 prefer-standby
(1 row)

RESET __spqr__target_session_attrs;
DROP TABLE tsa_test;
NOTICE: send query to shard(s) : sh1
\c spqr-console

		SPQR router admin console
	Here you can configure your routing rules
------------------------------------------------
	You can find documentation here 
https://github.com/pg-sharding/spqr/tree/master/docs

DROP DISTRIBUTION ALL CASCADE;
   drop distribution    
------------------------
 distribution id -> ds1
(1 row)

DROP KEY RANGE ALL;
 drop key range 
----------------
(0 rows)

