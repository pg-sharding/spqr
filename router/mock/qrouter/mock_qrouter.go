// Code generated by MockGen. DO NOT EDIT.
// Source: ./router/qrouter/qrouter.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	lyx "github.com/pg-sharding/lyx/lyx"
	qrouter "github.com/pg-sharding/spqr/router/qrouter"
)

// MockShardRoute is a mock of ShardRoute interface.
type MockShardRoute struct {
	ctrl     *gomock.Controller
	recorder *MockShardRouteMockRecorder
}

// MockShardRouteMockRecorder is the mock recorder for MockShardRoute.
type MockShardRouteMockRecorder struct {
	mock *MockShardRoute
}

// NewMockShardRoute creates a new mock instance.
func NewMockShardRoute(ctrl *gomock.Controller) *MockShardRoute {
	mock := &MockShardRoute{ctrl: ctrl}
	mock.recorder = &MockShardRouteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardRoute) EXPECT() *MockShardRouteMockRecorder {
	return m.recorder
}

// MockRoutingState is a mock of RoutingState interface.
type MockRoutingState struct {
	ctrl     *gomock.Controller
	recorder *MockRoutingStateMockRecorder
}

// MockRoutingStateMockRecorder is the mock recorder for MockRoutingState.
type MockRoutingStateMockRecorder struct {
	mock *MockRoutingState
}

// NewMockRoutingState creates a new mock instance.
func NewMockRoutingState(ctrl *gomock.Controller) *MockRoutingState {
	mock := &MockRoutingState{ctrl: ctrl}
	mock.recorder = &MockRoutingStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoutingState) EXPECT() *MockRoutingStateMockRecorder {
	return m.recorder
}

// iState mocks base method.
func (m *MockRoutingState) iState() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "iState")
}

// iState indicates an expected call of iState.
func (mr *MockRoutingStateMockRecorder) iState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "iState", reflect.TypeOf((*MockRoutingState)(nil).iState))
}

// MockQueryRouter is a mock of QueryRouter interface.
type MockQueryRouter struct {
	ctrl     *gomock.Controller
	recorder *MockQueryRouterMockRecorder
}

// MockQueryRouterMockRecorder is the mock recorder for MockQueryRouter.
type MockQueryRouterMockRecorder struct {
	mock *MockQueryRouter
}

// NewMockQueryRouter creates a new mock instance.
func NewMockQueryRouter(ctrl *gomock.Controller) *MockQueryRouter {
	mock := &MockQueryRouter{ctrl: ctrl}
	mock.recorder = &MockQueryRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryRouter) EXPECT() *MockQueryRouterMockRecorder {
	return m.recorder
}

// DataShardsRoutes mocks base method.
func (m *MockQueryRouter) DataShardsRoutes() []*qrouter.DataShardRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataShardsRoutes")
	ret0, _ := ret[0].([]*qrouter.DataShardRoute)
	return ret0
}

// DataShardsRoutes indicates an expected call of DataShardsRoutes.
func (mr *MockQueryRouterMockRecorder) DataShardsRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataShardsRoutes", reflect.TypeOf((*MockQueryRouter)(nil).DataShardsRoutes))
}

// Initialize mocks base method.
func (m *MockQueryRouter) Initialize() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockQueryRouterMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockQueryRouter)(nil).Initialize))
}

// Initialized mocks base method.
func (m *MockQueryRouter) Initialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Initialized indicates an expected call of Initialized.
func (mr *MockQueryRouterMockRecorder) Initialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialized", reflect.TypeOf((*MockQueryRouter)(nil).Initialized))
}

// Route mocks base method.
func (m *MockQueryRouter) Route(ctx context.Context, stmt lyx.Node, dataspace string, params [][]byte) (qrouter.RoutingState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Route", ctx, stmt, dataspace, params)
	ret0, _ := ret[0].(qrouter.RoutingState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Route indicates an expected call of Route.
func (mr *MockQueryRouterMockRecorder) Route(ctx, stmt, dataspace, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Route", reflect.TypeOf((*MockQueryRouter)(nil).Route), ctx, stmt, dataspace, params)
}

// WorldShardsRoutes mocks base method.
func (m *MockQueryRouter) WorldShardsRoutes() []*qrouter.DataShardRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorldShardsRoutes")
	ret0, _ := ret[0].([]*qrouter.DataShardRoute)
	return ret0
}

// WorldShardsRoutes indicates an expected call of WorldShardsRoutes.
func (mr *MockQueryRouterMockRecorder) WorldShardsRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorldShardsRoutes", reflect.TypeOf((*MockQueryRouter)(nil).WorldShardsRoutes))
}
