// Code generated by MockGen. DO NOT EDIT.
// Source: ./router/qrouter/qrouter.go
//
// Generated by this command:
//
//	mockgen -source=./router/qrouter/qrouter.go -destination=./router/mock/qrouter/mock_qrouter.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	lyx "github.com/pg-sharding/lyx/lyx"
	meta "github.com/pg-sharding/spqr/pkg/meta"
	kr "github.com/pg-sharding/spqr/pkg/models/kr"
	session "github.com/pg-sharding/spqr/pkg/session"
	cache "github.com/pg-sharding/spqr/router/cache"
	plan "github.com/pg-sharding/spqr/router/plan"
	gomock "go.uber.org/mock/gomock"
)

// MockQueryRouter is a mock of QueryRouter interface.
type MockQueryRouter struct {
	ctrl     *gomock.Controller
	recorder *MockQueryRouterMockRecorder
	isgomock struct{}
}

// MockQueryRouterMockRecorder is the mock recorder for MockQueryRouter.
type MockQueryRouterMockRecorder struct {
	mock *MockQueryRouter
}

// NewMockQueryRouter creates a new mock instance.
func NewMockQueryRouter(ctrl *gomock.Controller) *MockQueryRouter {
	mock := &MockQueryRouter{ctrl: ctrl}
	mock.recorder = &MockQueryRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryRouter) EXPECT() *MockQueryRouterMockRecorder {
	return m.recorder
}

// DataShardsRoutes mocks base method.
func (m *MockQueryRouter) DataShardsRoutes() []kr.ShardKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataShardsRoutes")
	ret0, _ := ret[0].([]kr.ShardKey)
	return ret0
}

// DataShardsRoutes indicates an expected call of DataShardsRoutes.
func (mr *MockQueryRouterMockRecorder) DataShardsRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataShardsRoutes", reflect.TypeOf((*MockQueryRouter)(nil).DataShardsRoutes))
}

// Initialize mocks base method.
func (m *MockQueryRouter) Initialize() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockQueryRouterMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockQueryRouter)(nil).Initialize))
}

// Initialized mocks base method.
func (m *MockQueryRouter) Initialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Initialized indicates an expected call of Initialized.
func (mr *MockQueryRouterMockRecorder) Initialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialized", reflect.TypeOf((*MockQueryRouter)(nil).Initialized))
}

// Mgr mocks base method.
func (m *MockQueryRouter) Mgr() meta.EntityMgr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mgr")
	ret0, _ := ret[0].(meta.EntityMgr)
	return ret0
}

// Mgr indicates an expected call of Mgr.
func (mr *MockQueryRouterMockRecorder) Mgr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mgr", reflect.TypeOf((*MockQueryRouter)(nil).Mgr))
}

// PlanQuery mocks base method.
func (m *MockQueryRouter) PlanQuery(ctx context.Context, OriginQuery string, stmt lyx.Node, sph session.SessionParamsHolder) (plan.Plan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlanQuery", ctx, OriginQuery, stmt, sph)
	ret0, _ := ret[0].(plan.Plan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlanQuery indicates an expected call of PlanQuery.
func (mr *MockQueryRouterMockRecorder) PlanQuery(ctx, OriginQuery, stmt, sph any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlanQuery", reflect.TypeOf((*MockQueryRouter)(nil).PlanQuery), ctx, OriginQuery, stmt, sph)
}

// Ready mocks base method.
func (m *MockQueryRouter) Ready() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ready indicates an expected call of Ready.
func (mr *MockQueryRouterMockRecorder) Ready() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockQueryRouter)(nil).Ready))
}

// SchemaCache mocks base method.
func (m *MockQueryRouter) SchemaCache() *cache.SchemaCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SchemaCache")
	ret0, _ := ret[0].(*cache.SchemaCache)
	return ret0
}

// SchemaCache indicates an expected call of SchemaCache.
func (mr *MockQueryRouterMockRecorder) SchemaCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchemaCache", reflect.TypeOf((*MockQueryRouter)(nil).SchemaCache))
}

// SetReady mocks base method.
func (m *MockQueryRouter) SetReady(ready bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReady", ready)
}

// SetReady indicates an expected call of SetReady.
func (mr *MockQueryRouterMockRecorder) SetReady(ready any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReady", reflect.TypeOf((*MockQueryRouter)(nil).SetReady), ready)
}

// WorldShardsRoutes mocks base method.
func (m *MockQueryRouter) WorldShardsRoutes() []kr.ShardKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorldShardsRoutes")
	ret0, _ := ret[0].([]kr.ShardKey)
	return ret0
}

// WorldShardsRoutes indicates an expected call of WorldShardsRoutes.
func (mr *MockQueryRouterMockRecorder) WorldShardsRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorldShardsRoutes", reflect.TypeOf((*MockQueryRouter)(nil).WorldShardsRoutes))
}
