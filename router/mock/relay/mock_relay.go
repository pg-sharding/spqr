// Code generated by MockGen. DO NOT EDIT.
// Source: ./router/relay/relay.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgproto3 "github.com/jackc/pgx/v5/pgproto3"
	config "github.com/pg-sharding/spqr/pkg/config"
	kr "github.com/pg-sharding/spqr/pkg/models/kr"
	shard "github.com/pg-sharding/spqr/pkg/shard"
	txstatus "github.com/pg-sharding/spqr/pkg/txstatus"
	client "github.com/pg-sharding/spqr/router/client"
	parser "github.com/pg-sharding/spqr/router/parser"
	poolmgr "github.com/pg-sharding/spqr/router/poolmgr"
	qrouter "github.com/pg-sharding/spqr/router/qrouter"
	routingstate "github.com/pg-sharding/spqr/router/routingstate"
	server "github.com/pg-sharding/spqr/router/server"
)

// MockRelayStateMgr is a mock of RelayStateMgr interface.
type MockRelayStateMgr struct {
	ctrl     *gomock.Controller
	recorder *MockRelayStateMgrMockRecorder
}

// MockRelayStateMgrMockRecorder is the mock recorder for MockRelayStateMgr.
type MockRelayStateMgrMockRecorder struct {
	mock *MockRelayStateMgr
}

// NewMockRelayStateMgr creates a new mock instance.
func NewMockRelayStateMgr(ctrl *gomock.Controller) *MockRelayStateMgr {
	mock := &MockRelayStateMgr{ctrl: ctrl}
	mock.recorder = &MockRelayStateMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayStateMgr) EXPECT() *MockRelayStateMgrMockRecorder {
	return m.recorder
}

// ActiveShards mocks base method.
func (m *MockRelayStateMgr) ActiveShards() []kr.ShardKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveShards")
	ret0, _ := ret[0].([]kr.ShardKey)
	return ret0
}

// ActiveShards indicates an expected call of ActiveShards.
func (mr *MockRelayStateMgrMockRecorder) ActiveShards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveShards", reflect.TypeOf((*MockRelayStateMgr)(nil).ActiveShards))
}

// ActiveShardsReset mocks base method.
func (m *MockRelayStateMgr) ActiveShardsReset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ActiveShardsReset")
}

// ActiveShardsReset indicates an expected call of ActiveShardsReset.
func (mr *MockRelayStateMgrMockRecorder) ActiveShardsReset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveShardsReset", reflect.TypeOf((*MockRelayStateMgr)(nil).ActiveShardsReset))
}

// AddExtendedProtocMessage mocks base method.
func (m *MockRelayStateMgr) AddExtendedProtocMessage(q pgproto3.FrontendMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddExtendedProtocMessage", q)
}

// AddExtendedProtocMessage indicates an expected call of AddExtendedProtocMessage.
func (mr *MockRelayStateMgrMockRecorder) AddExtendedProtocMessage(q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExtendedProtocMessage", reflect.TypeOf((*MockRelayStateMgr)(nil).AddExtendedProtocMessage), q)
}

// AddQuery mocks base method.
func (m *MockRelayStateMgr) AddQuery(q pgproto3.FrontendMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddQuery", q)
}

// AddQuery indicates an expected call of AddQuery.
func (mr *MockRelayStateMgrMockRecorder) AddQuery(q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuery", reflect.TypeOf((*MockRelayStateMgr)(nil).AddQuery), q)
}

// AddSilentQuery mocks base method.
func (m *MockRelayStateMgr) AddSilentQuery(q pgproto3.FrontendMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSilentQuery", q)
}

// AddSilentQuery indicates an expected call of AddSilentQuery.
func (mr *MockRelayStateMgrMockRecorder) AddSilentQuery(q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSilentQuery", reflect.TypeOf((*MockRelayStateMgr)(nil).AddSilentQuery), q)
}

// Client mocks base method.
func (m *MockRelayStateMgr) Client() client.RouterClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(client.RouterClient)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockRelayStateMgrMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockRelayStateMgr)(nil).Client))
}

// Close mocks base method.
func (m *MockRelayStateMgr) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRelayStateMgrMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRelayStateMgr)(nil).Close))
}

// CompleteRelay mocks base method.
func (m *MockRelayStateMgr) CompleteRelay(replyCl bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteRelay", replyCl)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteRelay indicates an expected call of CompleteRelay.
func (mr *MockRelayStateMgrMockRecorder) CompleteRelay(replyCl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteRelay", reflect.TypeOf((*MockRelayStateMgr)(nil).CompleteRelay), replyCl)
}

// ConnMgr mocks base method.
func (m *MockRelayStateMgr) ConnMgr() poolmgr.PoolMgr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnMgr")
	ret0, _ := ret[0].(poolmgr.PoolMgr)
	return ret0
}

// ConnMgr indicates an expected call of ConnMgr.
func (mr *MockRelayStateMgrMockRecorder) ConnMgr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnMgr", reflect.TypeOf((*MockRelayStateMgr)(nil).ConnMgr))
}

// CurrentRoutes mocks base method.
func (m *MockRelayStateMgr) CurrentRoutes() []*routingstate.DataShardRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentRoutes")
	ret0, _ := ret[0].([]*routingstate.DataShardRoute)
	return ret0
}

// CurrentRoutes indicates an expected call of CurrentRoutes.
func (mr *MockRelayStateMgrMockRecorder) CurrentRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentRoutes", reflect.TypeOf((*MockRelayStateMgr)(nil).CurrentRoutes))
}

// DataPending mocks base method.
func (m *MockRelayStateMgr) DataPending() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataPending")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DataPending indicates an expected call of DataPending.
func (mr *MockRelayStateMgrMockRecorder) DataPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataPending", reflect.TypeOf((*MockRelayStateMgr)(nil).DataPending))
}

// Flush mocks base method.
func (m *MockRelayStateMgr) Flush() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush")
}

// Flush indicates an expected call of Flush.
func (mr *MockRelayStateMgrMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockRelayStateMgr)(nil).Flush))
}

// Parse mocks base method.
func (m *MockRelayStateMgr) Parse(query string) (parser.ParseState, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", query)
	ret0, _ := ret[0].(parser.ParseState)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Parse indicates an expected call of Parse.
func (mr *MockRelayStateMgrMockRecorder) Parse(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockRelayStateMgr)(nil).Parse), query)
}

// PgprotoDebug mocks base method.
func (m *MockRelayStateMgr) PgprotoDebug() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PgprotoDebug")
	ret0, _ := ret[0].(bool)
	return ret0
}

// PgprotoDebug indicates an expected call of PgprotoDebug.
func (mr *MockRelayStateMgrMockRecorder) PgprotoDebug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PgprotoDebug", reflect.TypeOf((*MockRelayStateMgr)(nil).PgprotoDebug))
}

// PrepareRelayStep mocks base method.
func (m *MockRelayStateMgr) PrepareRelayStep(cmngr poolmgr.PoolMgr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareRelayStep", cmngr)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareRelayStep indicates an expected call of PrepareRelayStep.
func (mr *MockRelayStateMgrMockRecorder) PrepareRelayStep(cmngr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareRelayStep", reflect.TypeOf((*MockRelayStateMgr)(nil).PrepareRelayStep), cmngr)
}

// PrepareRelayStepOnAnyRoute mocks base method.
func (m *MockRelayStateMgr) PrepareRelayStepOnAnyRoute(cmngr poolmgr.PoolMgr) (func() error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareRelayStepOnAnyRoute", cmngr)
	ret0, _ := ret[0].(func() error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareRelayStepOnAnyRoute indicates an expected call of PrepareRelayStepOnAnyRoute.
func (mr *MockRelayStateMgrMockRecorder) PrepareRelayStepOnAnyRoute(cmngr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareRelayStepOnAnyRoute", reflect.TypeOf((*MockRelayStateMgr)(nil).PrepareRelayStepOnAnyRoute), cmngr)
}

// PrepareRelayStepOnHintRoute mocks base method.
func (m *MockRelayStateMgr) PrepareRelayStepOnHintRoute(cmngr poolmgr.PoolMgr, route *routingstate.DataShardRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareRelayStepOnHintRoute", cmngr, route)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareRelayStepOnHintRoute indicates an expected call of PrepareRelayStepOnHintRoute.
func (mr *MockRelayStateMgrMockRecorder) PrepareRelayStepOnHintRoute(cmngr, route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareRelayStepOnHintRoute", reflect.TypeOf((*MockRelayStateMgr)(nil).PrepareRelayStepOnHintRoute), cmngr, route)
}

// PrepareStatement mocks base method.
func (m *MockRelayStateMgr) PrepareStatement(hash uint64, d server.PrepStmtDesc) (*shard.PreparedStatementDescriptor, pgproto3.BackendMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareStatement", hash, d)
	ret0, _ := ret[0].(*shard.PreparedStatementDescriptor)
	ret1, _ := ret[1].(pgproto3.BackendMessage)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PrepareStatement indicates an expected call of PrepareStatement.
func (mr *MockRelayStateMgrMockRecorder) PrepareStatement(hash, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareStatement", reflect.TypeOf((*MockRelayStateMgr)(nil).PrepareStatement), hash, d)
}

// ProcCommand mocks base method.
func (m *MockRelayStateMgr) ProcCommand(query pgproto3.FrontendMessage, waitForResp, replyCl bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcCommand", query, waitForResp, replyCl)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcCommand indicates an expected call of ProcCommand.
func (mr *MockRelayStateMgrMockRecorder) ProcCommand(query, waitForResp, replyCl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcCommand", reflect.TypeOf((*MockRelayStateMgr)(nil).ProcCommand), query, waitForResp, replyCl)
}

// ProcCopy mocks base method.
func (m *MockRelayStateMgr) ProcCopy(query pgproto3.FrontendMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcCopy", query)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcCopy indicates an expected call of ProcCopy.
func (mr *MockRelayStateMgrMockRecorder) ProcCopy(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcCopy", reflect.TypeOf((*MockRelayStateMgr)(nil).ProcCopy), query)
}

// ProcCopyComplete mocks base method.
func (m *MockRelayStateMgr) ProcCopyComplete(query *pgproto3.FrontendMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcCopyComplete", query)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcCopyComplete indicates an expected call of ProcCopyComplete.
func (mr *MockRelayStateMgrMockRecorder) ProcCopyComplete(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcCopyComplete", reflect.TypeOf((*MockRelayStateMgr)(nil).ProcCopyComplete), query)
}

// ProcQuery mocks base method.
func (m *MockRelayStateMgr) ProcQuery(query pgproto3.FrontendMessage, waitForResp, replyCl bool) (txstatus.TXStatus, []pgproto3.BackendMessage, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcQuery", query, waitForResp, replyCl)
	ret0, _ := ret[0].(txstatus.TXStatus)
	ret1, _ := ret[1].([]pgproto3.BackendMessage)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ProcQuery indicates an expected call of ProcQuery.
func (mr *MockRelayStateMgrMockRecorder) ProcQuery(query, waitForResp, replyCl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcQuery", reflect.TypeOf((*MockRelayStateMgr)(nil).ProcQuery), query, waitForResp, replyCl)
}

// ProcessExtendedBuffer mocks base method.
func (m *MockRelayStateMgr) ProcessExtendedBuffer(cmngr poolmgr.PoolMgr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessExtendedBuffer", cmngr)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessExtendedBuffer indicates an expected call of ProcessExtendedBuffer.
func (mr *MockRelayStateMgrMockRecorder) ProcessExtendedBuffer(cmngr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessExtendedBuffer", reflect.TypeOf((*MockRelayStateMgr)(nil).ProcessExtendedBuffer), cmngr)
}

// ProcessMessage mocks base method.
func (m *MockRelayStateMgr) ProcessMessage(msg pgproto3.FrontendMessage, waitForResp, replyCl bool, cmngr poolmgr.PoolMgr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMessage", msg, waitForResp, replyCl, cmngr)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessMessage indicates an expected call of ProcessMessage.
func (mr *MockRelayStateMgrMockRecorder) ProcessMessage(msg, waitForResp, replyCl, cmngr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockRelayStateMgr)(nil).ProcessMessage), msg, waitForResp, replyCl, cmngr)
}

// ProcessMessageBuf mocks base method.
func (m *MockRelayStateMgr) ProcessMessageBuf(waitForResp, replyCl, completeRelay bool, cmngr poolmgr.PoolMgr) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMessageBuf", waitForResp, replyCl, completeRelay, cmngr)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessMessageBuf indicates an expected call of ProcessMessageBuf.
func (mr *MockRelayStateMgrMockRecorder) ProcessMessageBuf(waitForResp, replyCl, completeRelay, cmngr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessageBuf", reflect.TypeOf((*MockRelayStateMgr)(nil).ProcessMessageBuf), waitForResp, replyCl, completeRelay, cmngr)
}

// QueryRouter mocks base method.
func (m *MockRelayStateMgr) QueryRouter() qrouter.QueryRouter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRouter")
	ret0, _ := ret[0].(qrouter.QueryRouter)
	return ret0
}

// QueryRouter indicates an expected call of QueryRouter.
func (mr *MockRelayStateMgrMockRecorder) QueryRouter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRouter", reflect.TypeOf((*MockRelayStateMgr)(nil).QueryRouter))
}

// RelayRunCommand mocks base method.
func (m *MockRelayStateMgr) RelayRunCommand(msg pgproto3.FrontendMessage, waitForResp, replyCl bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayRunCommand", msg, waitForResp, replyCl)
	ret0, _ := ret[0].(error)
	return ret0
}

// RelayRunCommand indicates an expected call of RelayRunCommand.
func (mr *MockRelayStateMgrMockRecorder) RelayRunCommand(msg, waitForResp, replyCl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayRunCommand", reflect.TypeOf((*MockRelayStateMgr)(nil).RelayRunCommand), msg, waitForResp, replyCl)
}

// RelayStep mocks base method.
func (m *MockRelayStateMgr) RelayStep(msg pgproto3.FrontendMessage, waitForResp, replyCl bool) (txstatus.TXStatus, []pgproto3.BackendMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayStep", msg, waitForResp, replyCl)
	ret0, _ := ret[0].(txstatus.TXStatus)
	ret1, _ := ret[1].([]pgproto3.BackendMessage)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RelayStep indicates an expected call of RelayStep.
func (mr *MockRelayStateMgrMockRecorder) RelayStep(msg, waitForResp, replyCl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayStep", reflect.TypeOf((*MockRelayStateMgr)(nil).RelayStep), msg, waitForResp, replyCl)
}

// RequestData mocks base method.
func (m *MockRelayStateMgr) RequestData() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequestData")
}

// RequestData indicates an expected call of RequestData.
func (mr *MockRelayStateMgrMockRecorder) RequestData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestData", reflect.TypeOf((*MockRelayStateMgr)(nil).RequestData))
}

// Reroute mocks base method.
func (m *MockRelayStateMgr) Reroute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reroute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reroute indicates an expected call of Reroute.
func (mr *MockRelayStateMgrMockRecorder) Reroute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reroute", reflect.TypeOf((*MockRelayStateMgr)(nil).Reroute))
}

// RerouteToRandomRoute mocks base method.
func (m *MockRelayStateMgr) RerouteToRandomRoute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RerouteToRandomRoute")
	ret0, _ := ret[0].(error)
	return ret0
}

// RerouteToRandomRoute indicates an expected call of RerouteToRandomRoute.
func (mr *MockRelayStateMgrMockRecorder) RerouteToRandomRoute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RerouteToRandomRoute", reflect.TypeOf((*MockRelayStateMgr)(nil).RerouteToRandomRoute))
}

// RerouteToTargetRoute mocks base method.
func (m *MockRelayStateMgr) RerouteToTargetRoute(route *routingstate.DataShardRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RerouteToTargetRoute", route)
	ret0, _ := ret[0].(error)
	return ret0
}

// RerouteToTargetRoute indicates an expected call of RerouteToTargetRoute.
func (mr *MockRelayStateMgrMockRecorder) RerouteToTargetRoute(route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RerouteToTargetRoute", reflect.TypeOf((*MockRelayStateMgr)(nil).RerouteToTargetRoute), route)
}

// Reset mocks base method.
func (m *MockRelayStateMgr) Reset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockRelayStateMgrMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockRelayStateMgr)(nil).Reset))
}

// RouterMode mocks base method.
func (m *MockRelayStateMgr) RouterMode() config.RouterMode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouterMode")
	ret0, _ := ret[0].(config.RouterMode)
	return ret0
}

// RouterMode indicates an expected call of RouterMode.
func (mr *MockRelayStateMgrMockRecorder) RouterMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouterMode", reflect.TypeOf((*MockRelayStateMgr)(nil).RouterMode))
}

// SetTxStatus mocks base method.
func (m *MockRelayStateMgr) SetTxStatus(status txstatus.TXStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTxStatus", status)
}

// SetTxStatus indicates an expected call of SetTxStatus.
func (mr *MockRelayStateMgrMockRecorder) SetTxStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTxStatus", reflect.TypeOf((*MockRelayStateMgr)(nil).SetTxStatus), status)
}

// ShouldRetry mocks base method.
func (m *MockRelayStateMgr) ShouldRetry(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldRetry", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldRetry indicates an expected call of ShouldRetry.
func (mr *MockRelayStateMgrMockRecorder) ShouldRetry(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldRetry", reflect.TypeOf((*MockRelayStateMgr)(nil).ShouldRetry), err)
}

// StartTrace mocks base method.
func (m *MockRelayStateMgr) StartTrace() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartTrace")
}

// StartTrace indicates an expected call of StartTrace.
func (mr *MockRelayStateMgrMockRecorder) StartTrace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTrace", reflect.TypeOf((*MockRelayStateMgr)(nil).StartTrace))
}

// Sync mocks base method.
func (m *MockRelayStateMgr) Sync(waitForResp, replyCl bool, cmngr poolmgr.PoolMgr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", waitForResp, replyCl, cmngr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockRelayStateMgrMockRecorder) Sync(waitForResp, replyCl, cmngr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockRelayStateMgr)(nil).Sync), waitForResp, replyCl, cmngr)
}

// SyncCount mocks base method.
func (m *MockRelayStateMgr) SyncCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// SyncCount indicates an expected call of SyncCount.
func (mr *MockRelayStateMgrMockRecorder) SyncCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCount", reflect.TypeOf((*MockRelayStateMgr)(nil).SyncCount))
}

// TxActive mocks base method.
func (m *MockRelayStateMgr) TxActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TxActive indicates an expected call of TxActive.
func (mr *MockRelayStateMgrMockRecorder) TxActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxActive", reflect.TypeOf((*MockRelayStateMgr)(nil).TxActive))
}

// TxStatus mocks base method.
func (m *MockRelayStateMgr) TxStatus() txstatus.TXStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxStatus")
	ret0, _ := ret[0].(txstatus.TXStatus)
	return ret0
}

// TxStatus indicates an expected call of TxStatus.
func (mr *MockRelayStateMgrMockRecorder) TxStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxStatus", reflect.TypeOf((*MockRelayStateMgr)(nil).TxStatus))
}

// UnRouteWithError mocks base method.
func (m *MockRelayStateMgr) UnRouteWithError(shkey []kr.ShardKey, errmsg error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnRouteWithError", shkey, errmsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnRouteWithError indicates an expected call of UnRouteWithError.
func (mr *MockRelayStateMgrMockRecorder) UnRouteWithError(shkey, errmsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRouteWithError", reflect.TypeOf((*MockRelayStateMgr)(nil).UnRouteWithError), shkey, errmsg)
}

// Unroute mocks base method.
func (m *MockRelayStateMgr) Unroute(shkey []kr.ShardKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unroute", shkey)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unroute indicates an expected call of Unroute.
func (mr *MockRelayStateMgrMockRecorder) Unroute(shkey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unroute", reflect.TypeOf((*MockRelayStateMgr)(nil).Unroute), shkey)
}

// UnrouteRoutes mocks base method.
func (m *MockRelayStateMgr) UnrouteRoutes(routes []*routingstate.DataShardRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnrouteRoutes", routes)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnrouteRoutes indicates an expected call of UnrouteRoutes.
func (mr *MockRelayStateMgrMockRecorder) UnrouteRoutes(routes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnrouteRoutes", reflect.TypeOf((*MockRelayStateMgr)(nil).UnrouteRoutes), routes)
}
