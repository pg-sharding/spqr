// Code generated by MockGen. DO NOT EDIT.
// Source: ./router/rulerouter/pool_mgr.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	kr "github.com/pg-sharding/spqr/pkg/models/kr"
	client "github.com/pg-sharding/spqr/router/client"
	rulerouter "github.com/pg-sharding/spqr/router/rulerouter"
	gomock "go.uber.org/mock/gomock"
)

// MockPoolMgr is a mock of PoolMgr interface.
type MockPoolMgr struct {
	ctrl     *gomock.Controller
	recorder *MockPoolMgrMockRecorder
}

// MockPoolMgrMockRecorder is the mock recorder for MockPoolMgr.
type MockPoolMgrMockRecorder struct {
	mock *MockPoolMgr
}

// NewMockPoolMgr creates a new mock instance.
func NewMockPoolMgr(ctrl *gomock.Controller) *MockPoolMgr {
	mock := &MockPoolMgr{ctrl: ctrl}
	mock.recorder = &MockPoolMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoolMgr) EXPECT() *MockPoolMgrMockRecorder {
	return m.recorder
}

// ConnectionActive mocks base method.
func (m *MockPoolMgr) ConnectionActive(rst rulerouter.RelayStateMgr) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionActive", rst)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ConnectionActive indicates an expected call of ConnectionActive.
func (mr *MockPoolMgrMockRecorder) ConnectionActive(rst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionActive", reflect.TypeOf((*MockPoolMgr)(nil).ConnectionActive), rst)
}

// RouteCB mocks base method.
func (m *MockPoolMgr) RouteCB(client client.RouterClient, sh []kr.ShardKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteCB", client, sh)
	ret0, _ := ret[0].(error)
	return ret0
}

// RouteCB indicates an expected call of RouteCB.
func (mr *MockPoolMgrMockRecorder) RouteCB(client, sh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteCB", reflect.TypeOf((*MockPoolMgr)(nil).RouteCB), client, sh)
}

// TXBeginCB mocks base method.
func (m *MockPoolMgr) TXBeginCB(rst rulerouter.RelayStateMgr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TXBeginCB", rst)
	ret0, _ := ret[0].(error)
	return ret0
}

// TXBeginCB indicates an expected call of TXBeginCB.
func (mr *MockPoolMgrMockRecorder) TXBeginCB(rst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TXBeginCB", reflect.TypeOf((*MockPoolMgr)(nil).TXBeginCB), rst)
}

// TXEndCB mocks base method.
func (m *MockPoolMgr) TXEndCB(rst rulerouter.RelayStateMgr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TXEndCB", rst)
	ret0, _ := ret[0].(error)
	return ret0
}

// TXEndCB indicates an expected call of TXEndCB.
func (mr *MockPoolMgrMockRecorder) TXEndCB(rst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TXEndCB", reflect.TypeOf((*MockPoolMgr)(nil).TXEndCB), rst)
}

// UnRouteCB mocks base method.
func (m *MockPoolMgr) UnRouteCB(client client.RouterClient, sh []kr.ShardKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnRouteCB", client, sh)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnRouteCB indicates an expected call of UnRouteCB.
func (mr *MockPoolMgrMockRecorder) UnRouteCB(client, sh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRouteCB", reflect.TypeOf((*MockPoolMgr)(nil).UnRouteCB), client, sh)
}

// UnRouteWithError mocks base method.
func (m *MockPoolMgr) UnRouteWithError(client client.RouterClient, sh []kr.ShardKey, errmsg error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnRouteWithError", client, sh, errmsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnRouteWithError indicates an expected call of UnRouteWithError.
func (mr *MockPoolMgrMockRecorder) UnRouteWithError(client, sh, errmsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRouteWithError", reflect.TypeOf((*MockPoolMgr)(nil).UnRouteWithError), client, sh, errmsg)
}

// ValidateReRoute mocks base method.
func (m *MockPoolMgr) ValidateReRoute(rst rulerouter.RelayStateMgr) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateReRoute", rst)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateReRoute indicates an expected call of ValidateReRoute.
func (mr *MockPoolMgrMockRecorder) ValidateReRoute(rst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateReRoute", reflect.TypeOf((*MockPoolMgr)(nil).ValidateReRoute), rst)
}
