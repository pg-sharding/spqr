// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protos/coordinator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoutersServiceClient is the client API for RoutersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutersServiceClient interface {
	ListRouters(ctx context.Context, in *ListRoutersRequest, opts ...grpc.CallOption) (*ListRoutersReply, error)
	AddRouters(ctx context.Context, in *AddRoutersRequest, opts ...grpc.CallOption) (*AddRoutersReply, error)
	ShutdownRouter(ctx context.Context, in *ShutdownRouterRequest, opts ...grpc.CallOption) (*ShutdownRouterReply, error)
}

type routersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutersServiceClient(cc grpc.ClientConnInterface) RoutersServiceClient {
	return &routersServiceClient{cc}
}

func (c *routersServiceClient) ListRouters(ctx context.Context, in *ListRoutersRequest, opts ...grpc.CallOption) (*ListRoutersReply, error) {
	out := new(ListRoutersReply)
	err := c.cc.Invoke(ctx, "/yandex.spqr.RoutersService/ListRouters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routersServiceClient) AddRouters(ctx context.Context, in *AddRoutersRequest, opts ...grpc.CallOption) (*AddRoutersReply, error) {
	out := new(AddRoutersReply)
	err := c.cc.Invoke(ctx, "/yandex.spqr.RoutersService/AddRouters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routersServiceClient) ShutdownRouter(ctx context.Context, in *ShutdownRouterRequest, opts ...grpc.CallOption) (*ShutdownRouterReply, error) {
	out := new(ShutdownRouterReply)
	err := c.cc.Invoke(ctx, "/yandex.spqr.RoutersService/ShutdownRouter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutersServiceServer is the server API for RoutersService service.
// All implementations must embed UnimplementedRoutersServiceServer
// for forward compatibility
type RoutersServiceServer interface {
	ListRouters(context.Context, *ListRoutersRequest) (*ListRoutersReply, error)
	AddRouters(context.Context, *AddRoutersRequest) (*AddRoutersReply, error)
	ShutdownRouter(context.Context, *ShutdownRouterRequest) (*ShutdownRouterReply, error)
	mustEmbedUnimplementedRoutersServiceServer()
}

// UnimplementedRoutersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoutersServiceServer struct {
}

func (UnimplementedRoutersServiceServer) ListRouters(context.Context, *ListRoutersRequest) (*ListRoutersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRouters not implemented")
}
func (UnimplementedRoutersServiceServer) AddRouters(context.Context, *AddRoutersRequest) (*AddRoutersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRouters not implemented")
}
func (UnimplementedRoutersServiceServer) ShutdownRouter(context.Context, *ShutdownRouterRequest) (*ShutdownRouterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownRouter not implemented")
}
func (UnimplementedRoutersServiceServer) mustEmbedUnimplementedRoutersServiceServer() {}

// UnsafeRoutersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutersServiceServer will
// result in compilation errors.
type UnsafeRoutersServiceServer interface {
	mustEmbedUnimplementedRoutersServiceServer()
}

func RegisterRoutersServiceServer(s grpc.ServiceRegistrar, srv RoutersServiceServer) {
	s.RegisterService(&RoutersService_ServiceDesc, srv)
}

func _RoutersService_ListRouters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutersServiceServer).ListRouters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.spqr.RoutersService/ListRouters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutersServiceServer).ListRouters(ctx, req.(*ListRoutersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutersService_AddRouters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoutersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutersServiceServer).AddRouters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.spqr.RoutersService/AddRouters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutersServiceServer).AddRouters(ctx, req.(*AddRoutersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutersService_ShutdownRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutersServiceServer).ShutdownRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.spqr.RoutersService/ShutdownRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutersServiceServer).ShutdownRouter(ctx, req.(*ShutdownRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoutersService_ServiceDesc is the grpc.ServiceDesc for RoutersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.spqr.RoutersService",
	HandlerType: (*RoutersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRouters",
			Handler:    _RoutersService_ListRouters_Handler,
		},
		{
			MethodName: "AddRouters",
			Handler:    _RoutersService_AddRouters_Handler,
		},
		{
			MethodName: "ShutdownRouter",
			Handler:    _RoutersService_ShutdownRouter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/coordinator.proto",
}
