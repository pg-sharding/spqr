// Code generated by MockGen. DO NOT EDIT.
// Source: qdb/qdb.go
//
// Generated by this command:
//
//	mockgen -source=qdb/qdb.go -destination=qdb/mock/qdb.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	qdb "github.com/pg-sharding/spqr/qdb"
	rfqn "github.com/pg-sharding/spqr/router/rfqn"
	gomock "go.uber.org/mock/gomock"
)

// MockShardingSchemaKeeper is a mock of ShardingSchemaKeeper interface.
type MockShardingSchemaKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockShardingSchemaKeeperMockRecorder
	isgomock struct{}
}

// MockShardingSchemaKeeperMockRecorder is the mock recorder for MockShardingSchemaKeeper.
type MockShardingSchemaKeeperMockRecorder struct {
	mock *MockShardingSchemaKeeper
}

// NewMockShardingSchemaKeeper creates a new mock instance.
func NewMockShardingSchemaKeeper(ctrl *gomock.Controller) *MockShardingSchemaKeeper {
	mock := &MockShardingSchemaKeeper{ctrl: ctrl}
	mock.recorder = &MockShardingSchemaKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardingSchemaKeeper) EXPECT() *MockShardingSchemaKeeperMockRecorder {
	return m.recorder
}

// DeleteKeyRangeMove mocks base method.
func (m *MockShardingSchemaKeeper) DeleteKeyRangeMove(ctx context.Context, moveId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyRangeMove", ctx, moveId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeyRangeMove indicates an expected call of DeleteKeyRangeMove.
func (mr *MockShardingSchemaKeeperMockRecorder) DeleteKeyRangeMove(ctx, moveId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyRangeMove", reflect.TypeOf((*MockShardingSchemaKeeper)(nil).DeleteKeyRangeMove), ctx, moveId)
}

// ListKeyRangeMoves mocks base method.
func (m *MockShardingSchemaKeeper) ListKeyRangeMoves(ctx context.Context) ([]*qdb.MoveKeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyRangeMoves", ctx)
	ret0, _ := ret[0].([]*qdb.MoveKeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyRangeMoves indicates an expected call of ListKeyRangeMoves.
func (mr *MockShardingSchemaKeeperMockRecorder) ListKeyRangeMoves(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyRangeMoves", reflect.TypeOf((*MockShardingSchemaKeeper)(nil).ListKeyRangeMoves), ctx)
}

// RecordKeyRangeMove mocks base method.
func (m_2 *MockShardingSchemaKeeper) RecordKeyRangeMove(ctx context.Context, m *qdb.MoveKeyRange) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecordKeyRangeMove", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordKeyRangeMove indicates an expected call of RecordKeyRangeMove.
func (mr *MockShardingSchemaKeeperMockRecorder) RecordKeyRangeMove(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordKeyRangeMove", reflect.TypeOf((*MockShardingSchemaKeeper)(nil).RecordKeyRangeMove), ctx, m)
}

// UpdateKeyRangeMoveStatus mocks base method.
func (m *MockShardingSchemaKeeper) UpdateKeyRangeMoveStatus(ctx context.Context, moveId string, s qdb.MoveKeyRangeStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeyRangeMoveStatus", ctx, moveId, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKeyRangeMoveStatus indicates an expected call of UpdateKeyRangeMoveStatus.
func (mr *MockShardingSchemaKeeperMockRecorder) UpdateKeyRangeMoveStatus(ctx, moveId, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeyRangeMoveStatus", reflect.TypeOf((*MockShardingSchemaKeeper)(nil).UpdateKeyRangeMoveStatus), ctx, moveId, s)
}

// MockTopologyKeeper is a mock of TopologyKeeper interface.
type MockTopologyKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockTopologyKeeperMockRecorder
	isgomock struct{}
}

// MockTopologyKeeperMockRecorder is the mock recorder for MockTopologyKeeper.
type MockTopologyKeeperMockRecorder struct {
	mock *MockTopologyKeeper
}

// NewMockTopologyKeeper creates a new mock instance.
func NewMockTopologyKeeper(ctrl *gomock.Controller) *MockTopologyKeeper {
	mock := &MockTopologyKeeper{ctrl: ctrl}
	mock.recorder = &MockTopologyKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopologyKeeper) EXPECT() *MockTopologyKeeperMockRecorder {
	return m.recorder
}

// AddRouter mocks base method.
func (m *MockTopologyKeeper) AddRouter(ctx context.Context, r *qdb.Router) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRouter", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRouter indicates an expected call of AddRouter.
func (mr *MockTopologyKeeperMockRecorder) AddRouter(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRouter", reflect.TypeOf((*MockTopologyKeeper)(nil).AddRouter), ctx, r)
}

// CloseRouter mocks base method.
func (m *MockTopologyKeeper) CloseRouter(ctx context.Context, rID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseRouter", ctx, rID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseRouter indicates an expected call of CloseRouter.
func (mr *MockTopologyKeeperMockRecorder) CloseRouter(ctx, rID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseRouter", reflect.TypeOf((*MockTopologyKeeper)(nil).CloseRouter), ctx, rID)
}

// DeleteRouter mocks base method.
func (m *MockTopologyKeeper) DeleteRouter(ctx context.Context, rID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouter", ctx, rID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouter indicates an expected call of DeleteRouter.
func (mr *MockTopologyKeeperMockRecorder) DeleteRouter(ctx, rID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouter", reflect.TypeOf((*MockTopologyKeeper)(nil).DeleteRouter), ctx, rID)
}

// ListRouters mocks base method.
func (m *MockTopologyKeeper) ListRouters(ctx context.Context) ([]*qdb.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouters", ctx)
	ret0, _ := ret[0].([]*qdb.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouters indicates an expected call of ListRouters.
func (mr *MockTopologyKeeperMockRecorder) ListRouters(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouters", reflect.TypeOf((*MockTopologyKeeper)(nil).ListRouters), ctx)
}

// OpenRouter mocks base method.
func (m *MockTopologyKeeper) OpenRouter(ctx context.Context, rID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenRouter", ctx, rID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenRouter indicates an expected call of OpenRouter.
func (mr *MockTopologyKeeperMockRecorder) OpenRouter(ctx, rID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenRouter", reflect.TypeOf((*MockTopologyKeeper)(nil).OpenRouter), ctx, rID)
}

// MockDistributedXactKepper is a mock of DistributedXactKepper interface.
type MockDistributedXactKepper struct {
	ctrl     *gomock.Controller
	recorder *MockDistributedXactKepperMockRecorder
	isgomock struct{}
}

// MockDistributedXactKepperMockRecorder is the mock recorder for MockDistributedXactKepper.
type MockDistributedXactKepperMockRecorder struct {
	mock *MockDistributedXactKepper
}

// NewMockDistributedXactKepper creates a new mock instance.
func NewMockDistributedXactKepper(ctrl *gomock.Controller) *MockDistributedXactKepper {
	mock := &MockDistributedXactKepper{ctrl: ctrl}
	mock.recorder = &MockDistributedXactKepperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributedXactKepper) EXPECT() *MockDistributedXactKepperMockRecorder {
	return m.recorder
}

// GetTransferTx mocks base method.
func (m *MockDistributedXactKepper) GetTransferTx(ctx context.Context, key string) (*qdb.DataTransferTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferTx", ctx, key)
	ret0, _ := ret[0].(*qdb.DataTransferTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferTx indicates an expected call of GetTransferTx.
func (mr *MockDistributedXactKepperMockRecorder) GetTransferTx(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferTx", reflect.TypeOf((*MockDistributedXactKepper)(nil).GetTransferTx), ctx, key)
}

// RecordTransferTx mocks base method.
func (m *MockDistributedXactKepper) RecordTransferTx(ctx context.Context, key string, info *qdb.DataTransferTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordTransferTx", ctx, key, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordTransferTx indicates an expected call of RecordTransferTx.
func (mr *MockDistributedXactKepperMockRecorder) RecordTransferTx(ctx, key, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTransferTx", reflect.TypeOf((*MockDistributedXactKepper)(nil).RecordTransferTx), ctx, key, info)
}

// RemoveTransferTx mocks base method.
func (m *MockDistributedXactKepper) RemoveTransferTx(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTransferTx", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTransferTx indicates an expected call of RemoveTransferTx.
func (mr *MockDistributedXactKepperMockRecorder) RemoveTransferTx(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTransferTx", reflect.TypeOf((*MockDistributedXactKepper)(nil).RemoveTransferTx), ctx, key)
}

// MockQDB is a mock of QDB interface.
type MockQDB struct {
	ctrl     *gomock.Controller
	recorder *MockQDBMockRecorder
	isgomock struct{}
}

// MockQDBMockRecorder is the mock recorder for MockQDB.
type MockQDBMockRecorder struct {
	mock *MockQDB
}

// NewMockQDB creates a new mock instance.
func NewMockQDB(ctrl *gomock.Controller) *MockQDB {
	mock := &MockQDB{ctrl: ctrl}
	mock.recorder = &MockQDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQDB) EXPECT() *MockQDBMockRecorder {
	return m.recorder
}

// AddShard mocks base method.
func (m *MockQDB) AddShard(ctx context.Context, shard *qdb.Shard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddShard", ctx, shard)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddShard indicates an expected call of AddShard.
func (mr *MockQDBMockRecorder) AddShard(ctx, shard any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShard", reflect.TypeOf((*MockQDB)(nil).AddShard), ctx, shard)
}

// AlterDistributedRelation mocks base method.
func (m *MockQDB) AlterDistributedRelation(ctx context.Context, id string, rel *qdb.DistributedRelation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterDistributedRelation", ctx, id, rel)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterDistributedRelation indicates an expected call of AlterDistributedRelation.
func (mr *MockQDBMockRecorder) AlterDistributedRelation(ctx, id, rel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterDistributedRelation", reflect.TypeOf((*MockQDB)(nil).AlterDistributedRelation), ctx, id, rel)
}

// AlterDistributionAttach mocks base method.
func (m *MockQDB) AlterDistributionAttach(ctx context.Context, id string, rels []*qdb.DistributedRelation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterDistributionAttach", ctx, id, rels)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterDistributionAttach indicates an expected call of AlterDistributionAttach.
func (mr *MockQDBMockRecorder) AlterDistributionAttach(ctx, id, rels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterDistributionAttach", reflect.TypeOf((*MockQDB)(nil).AlterDistributionAttach), ctx, id, rels)
}

// AlterDistributionDetach mocks base method.
func (m *MockQDB) AlterDistributionDetach(ctx context.Context, id string, relName *rfqn.RelationFQN) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterDistributionDetach", ctx, id, relName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterDistributionDetach indicates an expected call of AlterDistributionDetach.
func (mr *MockQDBMockRecorder) AlterDistributionDetach(ctx, id, relName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterDistributionDetach", reflect.TypeOf((*MockQDB)(nil).AlterDistributionDetach), ctx, id, relName)
}

// AlterSequenceAttach mocks base method.
func (m *MockQDB) AlterSequenceAttach(ctx context.Context, seqName string, relName *rfqn.RelationFQN, colName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterSequenceAttach", ctx, seqName, relName, colName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterSequenceAttach indicates an expected call of AlterSequenceAttach.
func (mr *MockQDBMockRecorder) AlterSequenceAttach(ctx, seqName, relName, colName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterSequenceAttach", reflect.TypeOf((*MockQDB)(nil).AlterSequenceAttach), ctx, seqName, relName, colName)
}

// CheckLockedKeyRange mocks base method.
func (m *MockQDB) CheckLockedKeyRange(ctx context.Context, id string) (*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLockedKeyRange", ctx, id)
	ret0, _ := ret[0].(*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLockedKeyRange indicates an expected call of CheckLockedKeyRange.
func (mr *MockQDBMockRecorder) CheckLockedKeyRange(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLockedKeyRange", reflect.TypeOf((*MockQDB)(nil).CheckLockedKeyRange), ctx, id)
}

// CreateDistribution mocks base method.
func (m *MockQDB) CreateDistribution(ctx context.Context, distr *qdb.Distribution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDistribution", ctx, distr)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDistribution indicates an expected call of CreateDistribution.
func (mr *MockQDBMockRecorder) CreateDistribution(ctx, distr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistribution", reflect.TypeOf((*MockQDB)(nil).CreateDistribution), ctx, distr)
}

// CreateKeyRange mocks base method.
func (m *MockQDB) CreateKeyRange(ctx context.Context, keyRange *qdb.KeyRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyRange", ctx, keyRange)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKeyRange indicates an expected call of CreateKeyRange.
func (mr *MockQDBMockRecorder) CreateKeyRange(ctx, keyRange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyRange", reflect.TypeOf((*MockQDB)(nil).CreateKeyRange), ctx, keyRange)
}

// CreateMoveTask mocks base method.
func (m *MockQDB) CreateMoveTask(ctx context.Context, task *qdb.MoveTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMoveTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMoveTask indicates an expected call of CreateMoveTask.
func (mr *MockQDBMockRecorder) CreateMoveTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMoveTask", reflect.TypeOf((*MockQDB)(nil).CreateMoveTask), ctx, task)
}

// CreateReferenceRelation mocks base method.
func (m *MockQDB) CreateReferenceRelation(ctx context.Context, r *qdb.ReferenceRelation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReferenceRelation", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReferenceRelation indicates an expected call of CreateReferenceRelation.
func (mr *MockQDBMockRecorder) CreateReferenceRelation(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReferenceRelation", reflect.TypeOf((*MockQDB)(nil).CreateReferenceRelation), ctx, r)
}

// CreateSequence mocks base method.
func (m *MockQDB) CreateSequence(ctx context.Context, seqName string, initialValue int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSequence", ctx, seqName, initialValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSequence indicates an expected call of CreateSequence.
func (mr *MockQDBMockRecorder) CreateSequence(ctx, seqName, initialValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSequence", reflect.TypeOf((*MockQDB)(nil).CreateSequence), ctx, seqName, initialValue)
}

// CurrVal mocks base method.
func (m *MockQDB) CurrVal(ctx context.Context, seqName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrVal", ctx, seqName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrVal indicates an expected call of CurrVal.
func (mr *MockQDBMockRecorder) CurrVal(ctx, seqName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrVal", reflect.TypeOf((*MockQDB)(nil).CurrVal), ctx, seqName)
}

// DropDistribution mocks base method.
func (m *MockQDB) DropDistribution(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDistribution", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropDistribution indicates an expected call of DropDistribution.
func (mr *MockQDBMockRecorder) DropDistribution(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDistribution", reflect.TypeOf((*MockQDB)(nil).DropDistribution), ctx, id)
}

// DropKeyRange mocks base method.
func (m *MockQDB) DropKeyRange(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropKeyRange", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropKeyRange indicates an expected call of DropKeyRange.
func (mr *MockQDBMockRecorder) DropKeyRange(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropKeyRange", reflect.TypeOf((*MockQDB)(nil).DropKeyRange), ctx, id)
}

// DropKeyRangeAll mocks base method.
func (m *MockQDB) DropKeyRangeAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropKeyRangeAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropKeyRangeAll indicates an expected call of DropKeyRangeAll.
func (mr *MockQDBMockRecorder) DropKeyRangeAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropKeyRangeAll", reflect.TypeOf((*MockQDB)(nil).DropKeyRangeAll), ctx)
}

// DropReferenceRelation mocks base method.
func (m *MockQDB) DropReferenceRelation(ctx context.Context, tableName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropReferenceRelation", ctx, tableName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropReferenceRelation indicates an expected call of DropReferenceRelation.
func (mr *MockQDBMockRecorder) DropReferenceRelation(ctx, tableName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropReferenceRelation", reflect.TypeOf((*MockQDB)(nil).DropReferenceRelation), ctx, tableName)
}

// DropSequence mocks base method.
func (m *MockQDB) DropSequence(ctx context.Context, seqName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropSequence", ctx, seqName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropSequence indicates an expected call of DropSequence.
func (mr *MockQDBMockRecorder) DropSequence(ctx, seqName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropSequence", reflect.TypeOf((*MockQDB)(nil).DropSequence), ctx, seqName)
}

// DropShard mocks base method.
func (m *MockQDB) DropShard(ctx context.Context, shardID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropShard", ctx, shardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropShard indicates an expected call of DropShard.
func (mr *MockQDBMockRecorder) DropShard(ctx, shardID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropShard", reflect.TypeOf((*MockQDB)(nil).DropShard), ctx, shardID)
}

// GetBalancerTask mocks base method.
func (m *MockQDB) GetBalancerTask(ctx context.Context) (*qdb.BalancerTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalancerTask", ctx)
	ret0, _ := ret[0].(*qdb.BalancerTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalancerTask indicates an expected call of GetBalancerTask.
func (mr *MockQDBMockRecorder) GetBalancerTask(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalancerTask", reflect.TypeOf((*MockQDB)(nil).GetBalancerTask), ctx)
}

// GetCoordinator mocks base method.
func (m *MockQDB) GetCoordinator(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoordinator", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoordinator indicates an expected call of GetCoordinator.
func (mr *MockQDBMockRecorder) GetCoordinator(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoordinator", reflect.TypeOf((*MockQDB)(nil).GetCoordinator), ctx)
}

// GetCurrentMoveTaskIndex mocks base method.
func (m *MockQDB) GetCurrentMoveTaskIndex(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentMoveTaskIndex", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentMoveTaskIndex indicates an expected call of GetCurrentMoveTaskIndex.
func (mr *MockQDBMockRecorder) GetCurrentMoveTaskIndex(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMoveTaskIndex", reflect.TypeOf((*MockQDB)(nil).GetCurrentMoveTaskIndex), ctx)
}

// GetDistribution mocks base method.
func (m *MockQDB) GetDistribution(ctx context.Context, id string) (*qdb.Distribution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistribution", ctx, id)
	ret0, _ := ret[0].(*qdb.Distribution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistribution indicates an expected call of GetDistribution.
func (mr *MockQDBMockRecorder) GetDistribution(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistribution", reflect.TypeOf((*MockQDB)(nil).GetDistribution), ctx, id)
}

// GetKeyRange mocks base method.
func (m *MockQDB) GetKeyRange(ctx context.Context, id string) (*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyRange", ctx, id)
	ret0, _ := ret[0].(*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyRange indicates an expected call of GetKeyRange.
func (mr *MockQDBMockRecorder) GetKeyRange(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyRange", reflect.TypeOf((*MockQDB)(nil).GetKeyRange), ctx, id)
}

// GetMoveTask mocks base method.
func (m *MockQDB) GetMoveTask(ctx context.Context, id string) (*qdb.MoveTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoveTask", ctx, id)
	ret0, _ := ret[0].(*qdb.MoveTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoveTask indicates an expected call of GetMoveTask.
func (mr *MockQDBMockRecorder) GetMoveTask(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoveTask", reflect.TypeOf((*MockQDB)(nil).GetMoveTask), ctx, id)
}

// GetMoveTaskGroup mocks base method.
func (m *MockQDB) GetMoveTaskGroup(ctx context.Context) (*qdb.MoveTaskGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoveTaskGroup", ctx)
	ret0, _ := ret[0].(*qdb.MoveTaskGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoveTaskGroup indicates an expected call of GetMoveTaskGroup.
func (mr *MockQDBMockRecorder) GetMoveTaskGroup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoveTaskGroup", reflect.TypeOf((*MockQDB)(nil).GetMoveTaskGroup), ctx)
}

// GetRedistributeTask mocks base method.
func (m *MockQDB) GetRedistributeTask(ctx context.Context) (*qdb.RedistributeTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedistributeTask", ctx)
	ret0, _ := ret[0].(*qdb.RedistributeTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRedistributeTask indicates an expected call of GetRedistributeTask.
func (mr *MockQDBMockRecorder) GetRedistributeTask(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedistributeTask", reflect.TypeOf((*MockQDB)(nil).GetRedistributeTask), ctx)
}

// GetReferenceRelation mocks base method.
func (m *MockQDB) GetReferenceRelation(ctx context.Context, tableName string) (*qdb.ReferenceRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceRelation", ctx, tableName)
	ret0, _ := ret[0].(*qdb.ReferenceRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceRelation indicates an expected call of GetReferenceRelation.
func (mr *MockQDBMockRecorder) GetReferenceRelation(ctx, tableName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceRelation", reflect.TypeOf((*MockQDB)(nil).GetReferenceRelation), ctx, tableName)
}

// GetRelationDistribution mocks base method.
func (m *MockQDB) GetRelationDistribution(ctx context.Context, relation *rfqn.RelationFQN) (*qdb.Distribution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationDistribution", ctx, relation)
	ret0, _ := ret[0].(*qdb.Distribution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationDistribution indicates an expected call of GetRelationDistribution.
func (mr *MockQDBMockRecorder) GetRelationDistribution(ctx, relation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationDistribution", reflect.TypeOf((*MockQDB)(nil).GetRelationDistribution), ctx, relation)
}

// GetRelationSequence mocks base method.
func (m *MockQDB) GetRelationSequence(ctx context.Context, relName *rfqn.RelationFQN) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationSequence", ctx, relName)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationSequence indicates an expected call of GetRelationSequence.
func (mr *MockQDBMockRecorder) GetRelationSequence(ctx, relName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationSequence", reflect.TypeOf((*MockQDB)(nil).GetRelationSequence), ctx, relName)
}

// GetShard mocks base method.
func (m *MockQDB) GetShard(ctx context.Context, shardID string) (*qdb.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShard", ctx, shardID)
	ret0, _ := ret[0].(*qdb.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShard indicates an expected call of GetShard.
func (mr *MockQDBMockRecorder) GetShard(ctx, shardID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShard", reflect.TypeOf((*MockQDB)(nil).GetShard), ctx, shardID)
}

// ListAllKeyRanges mocks base method.
func (m *MockQDB) ListAllKeyRanges(arg0 context.Context) ([]*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllKeyRanges", arg0)
	ret0, _ := ret[0].([]*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllKeyRanges indicates an expected call of ListAllKeyRanges.
func (mr *MockQDBMockRecorder) ListAllKeyRanges(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllKeyRanges", reflect.TypeOf((*MockQDB)(nil).ListAllKeyRanges), arg0)
}

// ListDistributions mocks base method.
func (m *MockQDB) ListDistributions(ctx context.Context) ([]*qdb.Distribution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributions", ctx)
	ret0, _ := ret[0].([]*qdb.Distribution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributions indicates an expected call of ListDistributions.
func (mr *MockQDBMockRecorder) ListDistributions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributions", reflect.TypeOf((*MockQDB)(nil).ListDistributions), ctx)
}

// ListKeyRanges mocks base method.
func (m *MockQDB) ListKeyRanges(arg0 context.Context, distribution string) ([]*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyRanges", arg0, distribution)
	ret0, _ := ret[0].([]*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyRanges indicates an expected call of ListKeyRanges.
func (mr *MockQDBMockRecorder) ListKeyRanges(arg0, distribution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyRanges", reflect.TypeOf((*MockQDB)(nil).ListKeyRanges), arg0, distribution)
}

// ListReferenceRelations mocks base method.
func (m *MockQDB) ListReferenceRelations(ctx context.Context) ([]*qdb.ReferenceRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReferenceRelations", ctx)
	ret0, _ := ret[0].([]*qdb.ReferenceRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReferenceRelations indicates an expected call of ListReferenceRelations.
func (mr *MockQDBMockRecorder) ListReferenceRelations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReferenceRelations", reflect.TypeOf((*MockQDB)(nil).ListReferenceRelations), ctx)
}

// ListRouters mocks base method.
func (m *MockQDB) ListRouters(ctx context.Context) ([]*qdb.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouters", ctx)
	ret0, _ := ret[0].([]*qdb.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouters indicates an expected call of ListRouters.
func (mr *MockQDBMockRecorder) ListRouters(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouters", reflect.TypeOf((*MockQDB)(nil).ListRouters), ctx)
}

// ListSequences mocks base method.
func (m *MockQDB) ListSequences(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSequences", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSequences indicates an expected call of ListSequences.
func (mr *MockQDBMockRecorder) ListSequences(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSequences", reflect.TypeOf((*MockQDB)(nil).ListSequences), ctx)
}

// ListShards mocks base method.
func (m *MockQDB) ListShards(ctx context.Context) ([]*qdb.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShards", ctx)
	ret0, _ := ret[0].([]*qdb.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShards indicates an expected call of ListShards.
func (mr *MockQDBMockRecorder) ListShards(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShards", reflect.TypeOf((*MockQDB)(nil).ListShards), ctx)
}

// LockKeyRange mocks base method.
func (m *MockQDB) LockKeyRange(ctx context.Context, id string) (*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockKeyRange", ctx, id)
	ret0, _ := ret[0].(*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockKeyRange indicates an expected call of LockKeyRange.
func (mr *MockQDBMockRecorder) LockKeyRange(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockKeyRange", reflect.TypeOf((*MockQDB)(nil).LockKeyRange), ctx, id)
}

// NextVal mocks base method.
func (m *MockQDB) NextVal(ctx context.Context, seqName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextVal", ctx, seqName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextVal indicates an expected call of NextVal.
func (mr *MockQDBMockRecorder) NextVal(ctx, seqName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextVal", reflect.TypeOf((*MockQDB)(nil).NextVal), ctx, seqName)
}

// RemoveBalancerTask mocks base method.
func (m *MockQDB) RemoveBalancerTask(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBalancerTask", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBalancerTask indicates an expected call of RemoveBalancerTask.
func (mr *MockQDBMockRecorder) RemoveBalancerTask(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBalancerTask", reflect.TypeOf((*MockQDB)(nil).RemoveBalancerTask), ctx)
}

// RemoveMoveTask mocks base method.
func (m *MockQDB) RemoveMoveTask(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMoveTask", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMoveTask indicates an expected call of RemoveMoveTask.
func (mr *MockQDBMockRecorder) RemoveMoveTask(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMoveTask", reflect.TypeOf((*MockQDB)(nil).RemoveMoveTask), ctx, id)
}

// RemoveMoveTaskGroup mocks base method.
func (m *MockQDB) RemoveMoveTaskGroup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMoveTaskGroup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMoveTaskGroup indicates an expected call of RemoveMoveTaskGroup.
func (mr *MockQDBMockRecorder) RemoveMoveTaskGroup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMoveTaskGroup", reflect.TypeOf((*MockQDB)(nil).RemoveMoveTaskGroup), ctx)
}

// RemoveRedistributeTask mocks base method.
func (m *MockQDB) RemoveRedistributeTask(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRedistributeTask", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRedistributeTask indicates an expected call of RemoveRedistributeTask.
func (mr *MockQDBMockRecorder) RemoveRedistributeTask(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRedistributeTask", reflect.TypeOf((*MockQDB)(nil).RemoveRedistributeTask), ctx)
}

// RenameKeyRange mocks base method.
func (m *MockQDB) RenameKeyRange(ctx context.Context, krId, ktIdNew string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameKeyRange", ctx, krId, ktIdNew)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameKeyRange indicates an expected call of RenameKeyRange.
func (mr *MockQDBMockRecorder) RenameKeyRange(ctx, krId, ktIdNew any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameKeyRange", reflect.TypeOf((*MockQDB)(nil).RenameKeyRange), ctx, krId, ktIdNew)
}

// ShareKeyRange mocks base method.
func (m *MockQDB) ShareKeyRange(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareKeyRange", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShareKeyRange indicates an expected call of ShareKeyRange.
func (mr *MockQDBMockRecorder) ShareKeyRange(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareKeyRange", reflect.TypeOf((*MockQDB)(nil).ShareKeyRange), id)
}

// UnlockKeyRange mocks base method.
func (m *MockQDB) UnlockKeyRange(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockKeyRange", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockKeyRange indicates an expected call of UnlockKeyRange.
func (mr *MockQDBMockRecorder) UnlockKeyRange(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockKeyRange", reflect.TypeOf((*MockQDB)(nil).UnlockKeyRange), ctx, id)
}

// UpdateCoordinator mocks base method.
func (m *MockQDB) UpdateCoordinator(ctx context.Context, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoordinator", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCoordinator indicates an expected call of UpdateCoordinator.
func (mr *MockQDBMockRecorder) UpdateCoordinator(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoordinator", reflect.TypeOf((*MockQDB)(nil).UpdateCoordinator), ctx, address)
}

// UpdateKeyRange mocks base method.
func (m *MockQDB) UpdateKeyRange(ctx context.Context, keyRange *qdb.KeyRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeyRange", ctx, keyRange)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKeyRange indicates an expected call of UpdateKeyRange.
func (mr *MockQDBMockRecorder) UpdateKeyRange(ctx, keyRange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeyRange", reflect.TypeOf((*MockQDB)(nil).UpdateKeyRange), ctx, keyRange)
}

// UpdateMoveTask mocks base method.
func (m *MockQDB) UpdateMoveTask(ctx context.Context, task *qdb.MoveTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMoveTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMoveTask indicates an expected call of UpdateMoveTask.
func (mr *MockQDBMockRecorder) UpdateMoveTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMoveTask", reflect.TypeOf((*MockQDB)(nil).UpdateMoveTask), ctx, task)
}

// UpdateMoveTaskGroupSetCurrentTask mocks base method.
func (m *MockQDB) UpdateMoveTaskGroupSetCurrentTask(ctx context.Context, taskIndex int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMoveTaskGroupSetCurrentTask", ctx, taskIndex)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMoveTaskGroupSetCurrentTask indicates an expected call of UpdateMoveTaskGroupSetCurrentTask.
func (mr *MockQDBMockRecorder) UpdateMoveTaskGroupSetCurrentTask(ctx, taskIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMoveTaskGroupSetCurrentTask", reflect.TypeOf((*MockQDB)(nil).UpdateMoveTaskGroupSetCurrentTask), ctx, taskIndex)
}

// WriteBalancerTask mocks base method.
func (m *MockQDB) WriteBalancerTask(ctx context.Context, task *qdb.BalancerTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBalancerTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBalancerTask indicates an expected call of WriteBalancerTask.
func (mr *MockQDBMockRecorder) WriteBalancerTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBalancerTask", reflect.TypeOf((*MockQDB)(nil).WriteBalancerTask), ctx, task)
}

// WriteMoveTaskGroup mocks base method.
func (m *MockQDB) WriteMoveTaskGroup(ctx context.Context, group *qdb.MoveTaskGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMoveTaskGroup", ctx, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMoveTaskGroup indicates an expected call of WriteMoveTaskGroup.
func (mr *MockQDBMockRecorder) WriteMoveTaskGroup(ctx, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMoveTaskGroup", reflect.TypeOf((*MockQDB)(nil).WriteMoveTaskGroup), ctx, group)
}

// WriteRedistributeTask mocks base method.
func (m *MockQDB) WriteRedistributeTask(ctx context.Context, task *qdb.RedistributeTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteRedistributeTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteRedistributeTask indicates an expected call of WriteRedistributeTask.
func (mr *MockQDBMockRecorder) WriteRedistributeTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRedistributeTask", reflect.TypeOf((*MockQDB)(nil).WriteRedistributeTask), ctx, task)
}

// MockXQDB is a mock of XQDB interface.
type MockXQDB struct {
	ctrl     *gomock.Controller
	recorder *MockXQDBMockRecorder
	isgomock struct{}
}

// MockXQDBMockRecorder is the mock recorder for MockXQDB.
type MockXQDBMockRecorder struct {
	mock *MockXQDB
}

// NewMockXQDB creates a new mock instance.
func NewMockXQDB(ctrl *gomock.Controller) *MockXQDB {
	mock := &MockXQDB{ctrl: ctrl}
	mock.recorder = &MockXQDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXQDB) EXPECT() *MockXQDBMockRecorder {
	return m.recorder
}

// AddRouter mocks base method.
func (m *MockXQDB) AddRouter(ctx context.Context, r *qdb.Router) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRouter", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRouter indicates an expected call of AddRouter.
func (mr *MockXQDBMockRecorder) AddRouter(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRouter", reflect.TypeOf((*MockXQDB)(nil).AddRouter), ctx, r)
}

// AddShard mocks base method.
func (m *MockXQDB) AddShard(ctx context.Context, shard *qdb.Shard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddShard", ctx, shard)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddShard indicates an expected call of AddShard.
func (mr *MockXQDBMockRecorder) AddShard(ctx, shard any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShard", reflect.TypeOf((*MockXQDB)(nil).AddShard), ctx, shard)
}

// AlterDistributedRelation mocks base method.
func (m *MockXQDB) AlterDistributedRelation(ctx context.Context, id string, rel *qdb.DistributedRelation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterDistributedRelation", ctx, id, rel)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterDistributedRelation indicates an expected call of AlterDistributedRelation.
func (mr *MockXQDBMockRecorder) AlterDistributedRelation(ctx, id, rel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterDistributedRelation", reflect.TypeOf((*MockXQDB)(nil).AlterDistributedRelation), ctx, id, rel)
}

// AlterDistributionAttach mocks base method.
func (m *MockXQDB) AlterDistributionAttach(ctx context.Context, id string, rels []*qdb.DistributedRelation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterDistributionAttach", ctx, id, rels)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterDistributionAttach indicates an expected call of AlterDistributionAttach.
func (mr *MockXQDBMockRecorder) AlterDistributionAttach(ctx, id, rels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterDistributionAttach", reflect.TypeOf((*MockXQDB)(nil).AlterDistributionAttach), ctx, id, rels)
}

// AlterDistributionDetach mocks base method.
func (m *MockXQDB) AlterDistributionDetach(ctx context.Context, id string, relName *rfqn.RelationFQN) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterDistributionDetach", ctx, id, relName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterDistributionDetach indicates an expected call of AlterDistributionDetach.
func (mr *MockXQDBMockRecorder) AlterDistributionDetach(ctx, id, relName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterDistributionDetach", reflect.TypeOf((*MockXQDB)(nil).AlterDistributionDetach), ctx, id, relName)
}

// AlterSequenceAttach mocks base method.
func (m *MockXQDB) AlterSequenceAttach(ctx context.Context, seqName string, relName *rfqn.RelationFQN, colName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterSequenceAttach", ctx, seqName, relName, colName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterSequenceAttach indicates an expected call of AlterSequenceAttach.
func (mr *MockXQDBMockRecorder) AlterSequenceAttach(ctx, seqName, relName, colName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterSequenceAttach", reflect.TypeOf((*MockXQDB)(nil).AlterSequenceAttach), ctx, seqName, relName, colName)
}

// CheckLockedKeyRange mocks base method.
func (m *MockXQDB) CheckLockedKeyRange(ctx context.Context, id string) (*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLockedKeyRange", ctx, id)
	ret0, _ := ret[0].(*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLockedKeyRange indicates an expected call of CheckLockedKeyRange.
func (mr *MockXQDBMockRecorder) CheckLockedKeyRange(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLockedKeyRange", reflect.TypeOf((*MockXQDB)(nil).CheckLockedKeyRange), ctx, id)
}

// CloseRouter mocks base method.
func (m *MockXQDB) CloseRouter(ctx context.Context, rID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseRouter", ctx, rID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseRouter indicates an expected call of CloseRouter.
func (mr *MockXQDBMockRecorder) CloseRouter(ctx, rID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseRouter", reflect.TypeOf((*MockXQDB)(nil).CloseRouter), ctx, rID)
}

// CreateDistribution mocks base method.
func (m *MockXQDB) CreateDistribution(ctx context.Context, distr *qdb.Distribution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDistribution", ctx, distr)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDistribution indicates an expected call of CreateDistribution.
func (mr *MockXQDBMockRecorder) CreateDistribution(ctx, distr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistribution", reflect.TypeOf((*MockXQDB)(nil).CreateDistribution), ctx, distr)
}

// CreateKeyRange mocks base method.
func (m *MockXQDB) CreateKeyRange(ctx context.Context, keyRange *qdb.KeyRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyRange", ctx, keyRange)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKeyRange indicates an expected call of CreateKeyRange.
func (mr *MockXQDBMockRecorder) CreateKeyRange(ctx, keyRange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyRange", reflect.TypeOf((*MockXQDB)(nil).CreateKeyRange), ctx, keyRange)
}

// CreateMoveTask mocks base method.
func (m *MockXQDB) CreateMoveTask(ctx context.Context, task *qdb.MoveTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMoveTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMoveTask indicates an expected call of CreateMoveTask.
func (mr *MockXQDBMockRecorder) CreateMoveTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMoveTask", reflect.TypeOf((*MockXQDB)(nil).CreateMoveTask), ctx, task)
}

// CreateReferenceRelation mocks base method.
func (m *MockXQDB) CreateReferenceRelation(ctx context.Context, r *qdb.ReferenceRelation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReferenceRelation", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReferenceRelation indicates an expected call of CreateReferenceRelation.
func (mr *MockXQDBMockRecorder) CreateReferenceRelation(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReferenceRelation", reflect.TypeOf((*MockXQDB)(nil).CreateReferenceRelation), ctx, r)
}

// CreateSequence mocks base method.
func (m *MockXQDB) CreateSequence(ctx context.Context, seqName string, initialValue int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSequence", ctx, seqName, initialValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSequence indicates an expected call of CreateSequence.
func (mr *MockXQDBMockRecorder) CreateSequence(ctx, seqName, initialValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSequence", reflect.TypeOf((*MockXQDB)(nil).CreateSequence), ctx, seqName, initialValue)
}

// CurrVal mocks base method.
func (m *MockXQDB) CurrVal(ctx context.Context, seqName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrVal", ctx, seqName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrVal indicates an expected call of CurrVal.
func (mr *MockXQDBMockRecorder) CurrVal(ctx, seqName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrVal", reflect.TypeOf((*MockXQDB)(nil).CurrVal), ctx, seqName)
}

// DeleteKeyRangeMove mocks base method.
func (m *MockXQDB) DeleteKeyRangeMove(ctx context.Context, moveId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyRangeMove", ctx, moveId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeyRangeMove indicates an expected call of DeleteKeyRangeMove.
func (mr *MockXQDBMockRecorder) DeleteKeyRangeMove(ctx, moveId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyRangeMove", reflect.TypeOf((*MockXQDB)(nil).DeleteKeyRangeMove), ctx, moveId)
}

// DeleteRouter mocks base method.
func (m *MockXQDB) DeleteRouter(ctx context.Context, rID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouter", ctx, rID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouter indicates an expected call of DeleteRouter.
func (mr *MockXQDBMockRecorder) DeleteRouter(ctx, rID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouter", reflect.TypeOf((*MockXQDB)(nil).DeleteRouter), ctx, rID)
}

// DropDistribution mocks base method.
func (m *MockXQDB) DropDistribution(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDistribution", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropDistribution indicates an expected call of DropDistribution.
func (mr *MockXQDBMockRecorder) DropDistribution(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDistribution", reflect.TypeOf((*MockXQDB)(nil).DropDistribution), ctx, id)
}

// DropKeyRange mocks base method.
func (m *MockXQDB) DropKeyRange(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropKeyRange", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropKeyRange indicates an expected call of DropKeyRange.
func (mr *MockXQDBMockRecorder) DropKeyRange(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropKeyRange", reflect.TypeOf((*MockXQDB)(nil).DropKeyRange), ctx, id)
}

// DropKeyRangeAll mocks base method.
func (m *MockXQDB) DropKeyRangeAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropKeyRangeAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropKeyRangeAll indicates an expected call of DropKeyRangeAll.
func (mr *MockXQDBMockRecorder) DropKeyRangeAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropKeyRangeAll", reflect.TypeOf((*MockXQDB)(nil).DropKeyRangeAll), ctx)
}

// DropReferenceRelation mocks base method.
func (m *MockXQDB) DropReferenceRelation(ctx context.Context, tableName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropReferenceRelation", ctx, tableName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropReferenceRelation indicates an expected call of DropReferenceRelation.
func (mr *MockXQDBMockRecorder) DropReferenceRelation(ctx, tableName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropReferenceRelation", reflect.TypeOf((*MockXQDB)(nil).DropReferenceRelation), ctx, tableName)
}

// DropSequence mocks base method.
func (m *MockXQDB) DropSequence(ctx context.Context, seqName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropSequence", ctx, seqName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropSequence indicates an expected call of DropSequence.
func (mr *MockXQDBMockRecorder) DropSequence(ctx, seqName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropSequence", reflect.TypeOf((*MockXQDB)(nil).DropSequence), ctx, seqName)
}

// DropShard mocks base method.
func (m *MockXQDB) DropShard(ctx context.Context, shardID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropShard", ctx, shardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropShard indicates an expected call of DropShard.
func (mr *MockXQDBMockRecorder) DropShard(ctx, shardID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropShard", reflect.TypeOf((*MockXQDB)(nil).DropShard), ctx, shardID)
}

// GetBalancerTask mocks base method.
func (m *MockXQDB) GetBalancerTask(ctx context.Context) (*qdb.BalancerTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalancerTask", ctx)
	ret0, _ := ret[0].(*qdb.BalancerTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalancerTask indicates an expected call of GetBalancerTask.
func (mr *MockXQDBMockRecorder) GetBalancerTask(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalancerTask", reflect.TypeOf((*MockXQDB)(nil).GetBalancerTask), ctx)
}

// GetCoordinator mocks base method.
func (m *MockXQDB) GetCoordinator(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoordinator", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoordinator indicates an expected call of GetCoordinator.
func (mr *MockXQDBMockRecorder) GetCoordinator(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoordinator", reflect.TypeOf((*MockXQDB)(nil).GetCoordinator), ctx)
}

// GetCurrentMoveTaskIndex mocks base method.
func (m *MockXQDB) GetCurrentMoveTaskIndex(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentMoveTaskIndex", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentMoveTaskIndex indicates an expected call of GetCurrentMoveTaskIndex.
func (mr *MockXQDBMockRecorder) GetCurrentMoveTaskIndex(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMoveTaskIndex", reflect.TypeOf((*MockXQDB)(nil).GetCurrentMoveTaskIndex), ctx)
}

// GetDistribution mocks base method.
func (m *MockXQDB) GetDistribution(ctx context.Context, id string) (*qdb.Distribution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistribution", ctx, id)
	ret0, _ := ret[0].(*qdb.Distribution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistribution indicates an expected call of GetDistribution.
func (mr *MockXQDBMockRecorder) GetDistribution(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistribution", reflect.TypeOf((*MockXQDB)(nil).GetDistribution), ctx, id)
}

// GetKeyRange mocks base method.
func (m *MockXQDB) GetKeyRange(ctx context.Context, id string) (*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyRange", ctx, id)
	ret0, _ := ret[0].(*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyRange indicates an expected call of GetKeyRange.
func (mr *MockXQDBMockRecorder) GetKeyRange(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyRange", reflect.TypeOf((*MockXQDB)(nil).GetKeyRange), ctx, id)
}

// GetMoveTask mocks base method.
func (m *MockXQDB) GetMoveTask(ctx context.Context, id string) (*qdb.MoveTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoveTask", ctx, id)
	ret0, _ := ret[0].(*qdb.MoveTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoveTask indicates an expected call of GetMoveTask.
func (mr *MockXQDBMockRecorder) GetMoveTask(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoveTask", reflect.TypeOf((*MockXQDB)(nil).GetMoveTask), ctx, id)
}

// GetMoveTaskGroup mocks base method.
func (m *MockXQDB) GetMoveTaskGroup(ctx context.Context) (*qdb.MoveTaskGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoveTaskGroup", ctx)
	ret0, _ := ret[0].(*qdb.MoveTaskGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoveTaskGroup indicates an expected call of GetMoveTaskGroup.
func (mr *MockXQDBMockRecorder) GetMoveTaskGroup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoveTaskGroup", reflect.TypeOf((*MockXQDB)(nil).GetMoveTaskGroup), ctx)
}

// GetRedistributeTask mocks base method.
func (m *MockXQDB) GetRedistributeTask(ctx context.Context) (*qdb.RedistributeTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedistributeTask", ctx)
	ret0, _ := ret[0].(*qdb.RedistributeTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRedistributeTask indicates an expected call of GetRedistributeTask.
func (mr *MockXQDBMockRecorder) GetRedistributeTask(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedistributeTask", reflect.TypeOf((*MockXQDB)(nil).GetRedistributeTask), ctx)
}

// GetReferenceRelation mocks base method.
func (m *MockXQDB) GetReferenceRelation(ctx context.Context, tableName string) (*qdb.ReferenceRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceRelation", ctx, tableName)
	ret0, _ := ret[0].(*qdb.ReferenceRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceRelation indicates an expected call of GetReferenceRelation.
func (mr *MockXQDBMockRecorder) GetReferenceRelation(ctx, tableName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceRelation", reflect.TypeOf((*MockXQDB)(nil).GetReferenceRelation), ctx, tableName)
}

// GetRelationDistribution mocks base method.
func (m *MockXQDB) GetRelationDistribution(ctx context.Context, relation *rfqn.RelationFQN) (*qdb.Distribution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationDistribution", ctx, relation)
	ret0, _ := ret[0].(*qdb.Distribution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationDistribution indicates an expected call of GetRelationDistribution.
func (mr *MockXQDBMockRecorder) GetRelationDistribution(ctx, relation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationDistribution", reflect.TypeOf((*MockXQDB)(nil).GetRelationDistribution), ctx, relation)
}

// GetRelationSequence mocks base method.
func (m *MockXQDB) GetRelationSequence(ctx context.Context, relName *rfqn.RelationFQN) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationSequence", ctx, relName)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationSequence indicates an expected call of GetRelationSequence.
func (mr *MockXQDBMockRecorder) GetRelationSequence(ctx, relName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationSequence", reflect.TypeOf((*MockXQDB)(nil).GetRelationSequence), ctx, relName)
}

// GetShard mocks base method.
func (m *MockXQDB) GetShard(ctx context.Context, shardID string) (*qdb.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShard", ctx, shardID)
	ret0, _ := ret[0].(*qdb.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShard indicates an expected call of GetShard.
func (mr *MockXQDBMockRecorder) GetShard(ctx, shardID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShard", reflect.TypeOf((*MockXQDB)(nil).GetShard), ctx, shardID)
}

// GetTransferTx mocks base method.
func (m *MockXQDB) GetTransferTx(ctx context.Context, key string) (*qdb.DataTransferTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferTx", ctx, key)
	ret0, _ := ret[0].(*qdb.DataTransferTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferTx indicates an expected call of GetTransferTx.
func (mr *MockXQDBMockRecorder) GetTransferTx(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferTx", reflect.TypeOf((*MockXQDB)(nil).GetTransferTx), ctx, key)
}

// ListAllKeyRanges mocks base method.
func (m *MockXQDB) ListAllKeyRanges(arg0 context.Context) ([]*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllKeyRanges", arg0)
	ret0, _ := ret[0].([]*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllKeyRanges indicates an expected call of ListAllKeyRanges.
func (mr *MockXQDBMockRecorder) ListAllKeyRanges(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllKeyRanges", reflect.TypeOf((*MockXQDB)(nil).ListAllKeyRanges), arg0)
}

// ListDistributions mocks base method.
func (m *MockXQDB) ListDistributions(ctx context.Context) ([]*qdb.Distribution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributions", ctx)
	ret0, _ := ret[0].([]*qdb.Distribution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributions indicates an expected call of ListDistributions.
func (mr *MockXQDBMockRecorder) ListDistributions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributions", reflect.TypeOf((*MockXQDB)(nil).ListDistributions), ctx)
}

// ListKeyRangeMoves mocks base method.
func (m *MockXQDB) ListKeyRangeMoves(ctx context.Context) ([]*qdb.MoveKeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyRangeMoves", ctx)
	ret0, _ := ret[0].([]*qdb.MoveKeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyRangeMoves indicates an expected call of ListKeyRangeMoves.
func (mr *MockXQDBMockRecorder) ListKeyRangeMoves(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyRangeMoves", reflect.TypeOf((*MockXQDB)(nil).ListKeyRangeMoves), ctx)
}

// ListKeyRanges mocks base method.
func (m *MockXQDB) ListKeyRanges(arg0 context.Context, distribution string) ([]*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyRanges", arg0, distribution)
	ret0, _ := ret[0].([]*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyRanges indicates an expected call of ListKeyRanges.
func (mr *MockXQDBMockRecorder) ListKeyRanges(arg0, distribution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyRanges", reflect.TypeOf((*MockXQDB)(nil).ListKeyRanges), arg0, distribution)
}

// ListReferenceRelations mocks base method.
func (m *MockXQDB) ListReferenceRelations(ctx context.Context) ([]*qdb.ReferenceRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReferenceRelations", ctx)
	ret0, _ := ret[0].([]*qdb.ReferenceRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReferenceRelations indicates an expected call of ListReferenceRelations.
func (mr *MockXQDBMockRecorder) ListReferenceRelations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReferenceRelations", reflect.TypeOf((*MockXQDB)(nil).ListReferenceRelations), ctx)
}

// ListRouters mocks base method.
func (m *MockXQDB) ListRouters(ctx context.Context) ([]*qdb.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouters", ctx)
	ret0, _ := ret[0].([]*qdb.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouters indicates an expected call of ListRouters.
func (mr *MockXQDBMockRecorder) ListRouters(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouters", reflect.TypeOf((*MockXQDB)(nil).ListRouters), ctx)
}

// ListSequences mocks base method.
func (m *MockXQDB) ListSequences(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSequences", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSequences indicates an expected call of ListSequences.
func (mr *MockXQDBMockRecorder) ListSequences(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSequences", reflect.TypeOf((*MockXQDB)(nil).ListSequences), ctx)
}

// ListShards mocks base method.
func (m *MockXQDB) ListShards(ctx context.Context) ([]*qdb.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShards", ctx)
	ret0, _ := ret[0].([]*qdb.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShards indicates an expected call of ListShards.
func (mr *MockXQDBMockRecorder) ListShards(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShards", reflect.TypeOf((*MockXQDB)(nil).ListShards), ctx)
}

// LockKeyRange mocks base method.
func (m *MockXQDB) LockKeyRange(ctx context.Context, id string) (*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockKeyRange", ctx, id)
	ret0, _ := ret[0].(*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockKeyRange indicates an expected call of LockKeyRange.
func (mr *MockXQDBMockRecorder) LockKeyRange(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockKeyRange", reflect.TypeOf((*MockXQDB)(nil).LockKeyRange), ctx, id)
}

// NextVal mocks base method.
func (m *MockXQDB) NextVal(ctx context.Context, seqName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextVal", ctx, seqName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextVal indicates an expected call of NextVal.
func (mr *MockXQDBMockRecorder) NextVal(ctx, seqName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextVal", reflect.TypeOf((*MockXQDB)(nil).NextVal), ctx, seqName)
}

// OpenRouter mocks base method.
func (m *MockXQDB) OpenRouter(ctx context.Context, rID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenRouter", ctx, rID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenRouter indicates an expected call of OpenRouter.
func (mr *MockXQDBMockRecorder) OpenRouter(ctx, rID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenRouter", reflect.TypeOf((*MockXQDB)(nil).OpenRouter), ctx, rID)
}

// RecordKeyRangeMove mocks base method.
func (m_2 *MockXQDB) RecordKeyRangeMove(ctx context.Context, m *qdb.MoveKeyRange) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecordKeyRangeMove", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordKeyRangeMove indicates an expected call of RecordKeyRangeMove.
func (mr *MockXQDBMockRecorder) RecordKeyRangeMove(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordKeyRangeMove", reflect.TypeOf((*MockXQDB)(nil).RecordKeyRangeMove), ctx, m)
}

// RecordTransferTx mocks base method.
func (m *MockXQDB) RecordTransferTx(ctx context.Context, key string, info *qdb.DataTransferTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordTransferTx", ctx, key, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordTransferTx indicates an expected call of RecordTransferTx.
func (mr *MockXQDBMockRecorder) RecordTransferTx(ctx, key, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTransferTx", reflect.TypeOf((*MockXQDB)(nil).RecordTransferTx), ctx, key, info)
}

// RemoveBalancerTask mocks base method.
func (m *MockXQDB) RemoveBalancerTask(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBalancerTask", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBalancerTask indicates an expected call of RemoveBalancerTask.
func (mr *MockXQDBMockRecorder) RemoveBalancerTask(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBalancerTask", reflect.TypeOf((*MockXQDB)(nil).RemoveBalancerTask), ctx)
}

// RemoveMoveTask mocks base method.
func (m *MockXQDB) RemoveMoveTask(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMoveTask", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMoveTask indicates an expected call of RemoveMoveTask.
func (mr *MockXQDBMockRecorder) RemoveMoveTask(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMoveTask", reflect.TypeOf((*MockXQDB)(nil).RemoveMoveTask), ctx, id)
}

// RemoveMoveTaskGroup mocks base method.
func (m *MockXQDB) RemoveMoveTaskGroup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMoveTaskGroup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMoveTaskGroup indicates an expected call of RemoveMoveTaskGroup.
func (mr *MockXQDBMockRecorder) RemoveMoveTaskGroup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMoveTaskGroup", reflect.TypeOf((*MockXQDB)(nil).RemoveMoveTaskGroup), ctx)
}

// RemoveRedistributeTask mocks base method.
func (m *MockXQDB) RemoveRedistributeTask(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRedistributeTask", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRedistributeTask indicates an expected call of RemoveRedistributeTask.
func (mr *MockXQDBMockRecorder) RemoveRedistributeTask(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRedistributeTask", reflect.TypeOf((*MockXQDB)(nil).RemoveRedistributeTask), ctx)
}

// RemoveTransferTx mocks base method.
func (m *MockXQDB) RemoveTransferTx(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTransferTx", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTransferTx indicates an expected call of RemoveTransferTx.
func (mr *MockXQDBMockRecorder) RemoveTransferTx(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTransferTx", reflect.TypeOf((*MockXQDB)(nil).RemoveTransferTx), ctx, key)
}

// RenameKeyRange mocks base method.
func (m *MockXQDB) RenameKeyRange(ctx context.Context, krId, ktIdNew string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameKeyRange", ctx, krId, ktIdNew)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameKeyRange indicates an expected call of RenameKeyRange.
func (mr *MockXQDBMockRecorder) RenameKeyRange(ctx, krId, ktIdNew any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameKeyRange", reflect.TypeOf((*MockXQDB)(nil).RenameKeyRange), ctx, krId, ktIdNew)
}

// ShareKeyRange mocks base method.
func (m *MockXQDB) ShareKeyRange(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareKeyRange", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShareKeyRange indicates an expected call of ShareKeyRange.
func (mr *MockXQDBMockRecorder) ShareKeyRange(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareKeyRange", reflect.TypeOf((*MockXQDB)(nil).ShareKeyRange), id)
}

// TryCoordinatorLock mocks base method.
func (m *MockXQDB) TryCoordinatorLock(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryCoordinatorLock", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// TryCoordinatorLock indicates an expected call of TryCoordinatorLock.
func (mr *MockXQDBMockRecorder) TryCoordinatorLock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryCoordinatorLock", reflect.TypeOf((*MockXQDB)(nil).TryCoordinatorLock), ctx)
}

// UnlockKeyRange mocks base method.
func (m *MockXQDB) UnlockKeyRange(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockKeyRange", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockKeyRange indicates an expected call of UnlockKeyRange.
func (mr *MockXQDBMockRecorder) UnlockKeyRange(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockKeyRange", reflect.TypeOf((*MockXQDB)(nil).UnlockKeyRange), ctx, id)
}

// UpdateCoordinator mocks base method.
func (m *MockXQDB) UpdateCoordinator(ctx context.Context, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoordinator", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCoordinator indicates an expected call of UpdateCoordinator.
func (mr *MockXQDBMockRecorder) UpdateCoordinator(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoordinator", reflect.TypeOf((*MockXQDB)(nil).UpdateCoordinator), ctx, address)
}

// UpdateKeyRange mocks base method.
func (m *MockXQDB) UpdateKeyRange(ctx context.Context, keyRange *qdb.KeyRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeyRange", ctx, keyRange)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKeyRange indicates an expected call of UpdateKeyRange.
func (mr *MockXQDBMockRecorder) UpdateKeyRange(ctx, keyRange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeyRange", reflect.TypeOf((*MockXQDB)(nil).UpdateKeyRange), ctx, keyRange)
}

// UpdateKeyRangeMoveStatus mocks base method.
func (m *MockXQDB) UpdateKeyRangeMoveStatus(ctx context.Context, moveId string, s qdb.MoveKeyRangeStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeyRangeMoveStatus", ctx, moveId, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKeyRangeMoveStatus indicates an expected call of UpdateKeyRangeMoveStatus.
func (mr *MockXQDBMockRecorder) UpdateKeyRangeMoveStatus(ctx, moveId, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeyRangeMoveStatus", reflect.TypeOf((*MockXQDB)(nil).UpdateKeyRangeMoveStatus), ctx, moveId, s)
}

// UpdateMoveTask mocks base method.
func (m *MockXQDB) UpdateMoveTask(ctx context.Context, task *qdb.MoveTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMoveTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMoveTask indicates an expected call of UpdateMoveTask.
func (mr *MockXQDBMockRecorder) UpdateMoveTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMoveTask", reflect.TypeOf((*MockXQDB)(nil).UpdateMoveTask), ctx, task)
}

// UpdateMoveTaskGroupSetCurrentTask mocks base method.
func (m *MockXQDB) UpdateMoveTaskGroupSetCurrentTask(ctx context.Context, taskIndex int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMoveTaskGroupSetCurrentTask", ctx, taskIndex)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMoveTaskGroupSetCurrentTask indicates an expected call of UpdateMoveTaskGroupSetCurrentTask.
func (mr *MockXQDBMockRecorder) UpdateMoveTaskGroupSetCurrentTask(ctx, taskIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMoveTaskGroupSetCurrentTask", reflect.TypeOf((*MockXQDB)(nil).UpdateMoveTaskGroupSetCurrentTask), ctx, taskIndex)
}

// WriteBalancerTask mocks base method.
func (m *MockXQDB) WriteBalancerTask(ctx context.Context, task *qdb.BalancerTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBalancerTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteBalancerTask indicates an expected call of WriteBalancerTask.
func (mr *MockXQDBMockRecorder) WriteBalancerTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBalancerTask", reflect.TypeOf((*MockXQDB)(nil).WriteBalancerTask), ctx, task)
}

// WriteMoveTaskGroup mocks base method.
func (m *MockXQDB) WriteMoveTaskGroup(ctx context.Context, group *qdb.MoveTaskGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMoveTaskGroup", ctx, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMoveTaskGroup indicates an expected call of WriteMoveTaskGroup.
func (mr *MockXQDBMockRecorder) WriteMoveTaskGroup(ctx, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMoveTaskGroup", reflect.TypeOf((*MockXQDB)(nil).WriteMoveTaskGroup), ctx, group)
}

// WriteRedistributeTask mocks base method.
func (m *MockXQDB) WriteRedistributeTask(ctx context.Context, task *qdb.RedistributeTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteRedistributeTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteRedistributeTask indicates an expected call of WriteRedistributeTask.
func (mr *MockXQDBMockRecorder) WriteRedistributeTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRedistributeTask", reflect.TypeOf((*MockXQDB)(nil).WriteRedistributeTask), ctx, task)
}
