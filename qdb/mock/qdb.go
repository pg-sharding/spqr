// Code generated by MockGen. DO NOT EDIT.
// Source: qdb/qdb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	qdb "github.com/pg-sharding/spqr/qdb"
)

// MockShardingSchemaKeeper is a mock of ShardingSchemaKeeper interface.
type MockShardingSchemaKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockShardingSchemaKeeperMockRecorder
}

// MockShardingSchemaKeeperMockRecorder is the mock recorder for MockShardingSchemaKeeper.
type MockShardingSchemaKeeperMockRecorder struct {
	mock *MockShardingSchemaKeeper
}

// NewMockShardingSchemaKeeper creates a new mock instance.
func NewMockShardingSchemaKeeper(ctrl *gomock.Controller) *MockShardingSchemaKeeper {
	mock := &MockShardingSchemaKeeper{ctrl: ctrl}
	mock.recorder = &MockShardingSchemaKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardingSchemaKeeper) EXPECT() *MockShardingSchemaKeeperMockRecorder {
	return m.recorder
}

// DeleteKeyRangeMove mocks base method.
func (m *MockShardingSchemaKeeper) DeleteKeyRangeMove(ctx context.Context, moveId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyRangeMove", ctx, moveId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeyRangeMove indicates an expected call of DeleteKeyRangeMove.
func (mr *MockShardingSchemaKeeperMockRecorder) DeleteKeyRangeMove(ctx, moveId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyRangeMove", reflect.TypeOf((*MockShardingSchemaKeeper)(nil).DeleteKeyRangeMove), ctx, moveId)
}

// ListKeyRangeMoves mocks base method.
func (m *MockShardingSchemaKeeper) ListKeyRangeMoves(ctx context.Context) ([]*qdb.MoveKeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyRangeMoves", ctx)
	ret0, _ := ret[0].([]*qdb.MoveKeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyRangeMoves indicates an expected call of ListKeyRangeMoves.
func (mr *MockShardingSchemaKeeperMockRecorder) ListKeyRangeMoves(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyRangeMoves", reflect.TypeOf((*MockShardingSchemaKeeper)(nil).ListKeyRangeMoves), ctx)
}

// RecordKeyRangeMove mocks base method.
func (m_2 *MockShardingSchemaKeeper) RecordKeyRangeMove(ctx context.Context, m *qdb.MoveKeyRange) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecordKeyRangeMove", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordKeyRangeMove indicates an expected call of RecordKeyRangeMove.
func (mr *MockShardingSchemaKeeperMockRecorder) RecordKeyRangeMove(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordKeyRangeMove", reflect.TypeOf((*MockShardingSchemaKeeper)(nil).RecordKeyRangeMove), ctx, m)
}

// UpdateKeyRangeMoveStatus mocks base method.
func (m *MockShardingSchemaKeeper) UpdateKeyRangeMoveStatus(ctx context.Context, moveId string, s qdb.MoveKeyRangeStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeyRangeMoveStatus", ctx, moveId, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKeyRangeMoveStatus indicates an expected call of UpdateKeyRangeMoveStatus.
func (mr *MockShardingSchemaKeeperMockRecorder) UpdateKeyRangeMoveStatus(ctx, moveId, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeyRangeMoveStatus", reflect.TypeOf((*MockShardingSchemaKeeper)(nil).UpdateKeyRangeMoveStatus), ctx, moveId, s)
}

// MockTopolodyKeeper is a mock of TopolodyKeeper interface.
type MockTopolodyKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockTopolodyKeeperMockRecorder
}

// MockTopolodyKeeperMockRecorder is the mock recorder for MockTopolodyKeeper.
type MockTopolodyKeeperMockRecorder struct {
	mock *MockTopolodyKeeper
}

// NewMockTopolodyKeeper creates a new mock instance.
func NewMockTopolodyKeeper(ctrl *gomock.Controller) *MockTopolodyKeeper {
	mock := &MockTopolodyKeeper{ctrl: ctrl}
	mock.recorder = &MockTopolodyKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopolodyKeeper) EXPECT() *MockTopolodyKeeperMockRecorder {
	return m.recorder
}

// AddRouter mocks base method.
func (m *MockTopolodyKeeper) AddRouter(ctx context.Context, r *qdb.Router) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRouter", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRouter indicates an expected call of AddRouter.
func (mr *MockTopolodyKeeperMockRecorder) AddRouter(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRouter", reflect.TypeOf((*MockTopolodyKeeper)(nil).AddRouter), ctx, r)
}

// CloseRouter mocks base method.
func (m *MockTopolodyKeeper) CloseRouter(ctx context.Context, rID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseRouter", ctx, rID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseRouter indicates an expected call of CloseRouter.
func (mr *MockTopolodyKeeperMockRecorder) CloseRouter(ctx, rID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseRouter", reflect.TypeOf((*MockTopolodyKeeper)(nil).CloseRouter), ctx, rID)
}

// DeleteRouter mocks base method.
func (m *MockTopolodyKeeper) DeleteRouter(ctx context.Context, rID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouter", ctx, rID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouter indicates an expected call of DeleteRouter.
func (mr *MockTopolodyKeeperMockRecorder) DeleteRouter(ctx, rID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouter", reflect.TypeOf((*MockTopolodyKeeper)(nil).DeleteRouter), ctx, rID)
}

// ListRouters mocks base method.
func (m *MockTopolodyKeeper) ListRouters(ctx context.Context) ([]*qdb.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouters", ctx)
	ret0, _ := ret[0].([]*qdb.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouters indicates an expected call of ListRouters.
func (mr *MockTopolodyKeeperMockRecorder) ListRouters(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouters", reflect.TypeOf((*MockTopolodyKeeper)(nil).ListRouters), ctx)
}

// OpenRouter mocks base method.
func (m *MockTopolodyKeeper) OpenRouter(ctx context.Context, rID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenRouter", ctx, rID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenRouter indicates an expected call of OpenRouter.
func (mr *MockTopolodyKeeperMockRecorder) OpenRouter(ctx, rID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenRouter", reflect.TypeOf((*MockTopolodyKeeper)(nil).OpenRouter), ctx, rID)
}

// MockDistributedXactKepper is a mock of DistributedXactKepper interface.
type MockDistributedXactKepper struct {
	ctrl     *gomock.Controller
	recorder *MockDistributedXactKepperMockRecorder
}

// MockDistributedXactKepperMockRecorder is the mock recorder for MockDistributedXactKepper.
type MockDistributedXactKepperMockRecorder struct {
	mock *MockDistributedXactKepper
}

// NewMockDistributedXactKepper creates a new mock instance.
func NewMockDistributedXactKepper(ctrl *gomock.Controller) *MockDistributedXactKepper {
	mock := &MockDistributedXactKepper{ctrl: ctrl}
	mock.recorder = &MockDistributedXactKepperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistributedXactKepper) EXPECT() *MockDistributedXactKepperMockRecorder {
	return m.recorder
}

// GetTransferTx mocks base method.
func (m *MockDistributedXactKepper) GetTransferTx(ctx context.Context, key string) (*qdb.DataTransferTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferTx", ctx, key)
	ret0, _ := ret[0].(*qdb.DataTransferTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferTx indicates an expected call of GetTransferTx.
func (mr *MockDistributedXactKepperMockRecorder) GetTransferTx(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferTx", reflect.TypeOf((*MockDistributedXactKepper)(nil).GetTransferTx), ctx, key)
}

// RecordTransferTx mocks base method.
func (m *MockDistributedXactKepper) RecordTransferTx(ctx context.Context, key string, info *qdb.DataTransferTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordTransferTx", ctx, key, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordTransferTx indicates an expected call of RecordTransferTx.
func (mr *MockDistributedXactKepperMockRecorder) RecordTransferTx(ctx, key, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTransferTx", reflect.TypeOf((*MockDistributedXactKepper)(nil).RecordTransferTx), ctx, key, info)
}

// RemoveTransferTx mocks base method.
func (m *MockDistributedXactKepper) RemoveTransferTx(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTransferTx", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTransferTx indicates an expected call of RemoveTransferTx.
func (mr *MockDistributedXactKepperMockRecorder) RemoveTransferTx(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTransferTx", reflect.TypeOf((*MockDistributedXactKepper)(nil).RemoveTransferTx), ctx, key)
}

// MockQDB is a mock of QDB interface.
type MockQDB struct {
	ctrl     *gomock.Controller
	recorder *MockQDBMockRecorder
}

// MockQDBMockRecorder is the mock recorder for MockQDB.
type MockQDBMockRecorder struct {
	mock *MockQDB
}

// NewMockQDB creates a new mock instance.
func NewMockQDB(ctrl *gomock.Controller) *MockQDB {
	mock := &MockQDB{ctrl: ctrl}
	mock.recorder = &MockQDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQDB) EXPECT() *MockQDBMockRecorder {
	return m.recorder
}

// AddShard mocks base method.
func (m *MockQDB) AddShard(ctx context.Context, shard *qdb.Shard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddShard", ctx, shard)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddShard indicates an expected call of AddShard.
func (mr *MockQDBMockRecorder) AddShard(ctx, shard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShard", reflect.TypeOf((*MockQDB)(nil).AddShard), ctx, shard)
}

// AlterDistributionAttach mocks base method.
func (m *MockQDB) AlterDistributionAttach(ctx context.Context, id string, rels []*qdb.DistributedRelation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterDistributionAttach", ctx, id, rels)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterDistributionAttach indicates an expected call of AlterDistributionAttach.
func (mr *MockQDBMockRecorder) AlterDistributionAttach(ctx, id, rels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterDistributionAttach", reflect.TypeOf((*MockQDB)(nil).AlterDistributionAttach), ctx, id, rels)
}

// AlterDistributionDetach mocks base method.
func (m *MockQDB) AlterDistributionDetach(ctx context.Context, id, relName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterDistributionDetach", ctx, id, relName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterDistributionDetach indicates an expected call of AlterDistributionDetach.
func (mr *MockQDBMockRecorder) AlterDistributionDetach(ctx, id, relName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterDistributionDetach", reflect.TypeOf((*MockQDB)(nil).AlterDistributionDetach), ctx, id, relName)
}

// CheckLockedKeyRange mocks base method.
func (m *MockQDB) CheckLockedKeyRange(ctx context.Context, id string) (*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLockedKeyRange", ctx, id)
	ret0, _ := ret[0].(*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLockedKeyRange indicates an expected call of CheckLockedKeyRange.
func (mr *MockQDBMockRecorder) CheckLockedKeyRange(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLockedKeyRange", reflect.TypeOf((*MockQDB)(nil).CheckLockedKeyRange), ctx, id)
}

// CreateDistribution mocks base method.
func (m *MockQDB) CreateDistribution(ctx context.Context, distr *qdb.Distribution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDistribution", ctx, distr)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDistribution indicates an expected call of CreateDistribution.
func (mr *MockQDBMockRecorder) CreateDistribution(ctx, distr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistribution", reflect.TypeOf((*MockQDB)(nil).CreateDistribution), ctx, distr)
}

// CreateKeyRange mocks base method.
func (m *MockQDB) CreateKeyRange(ctx context.Context, keyRange *qdb.KeyRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyRange", ctx, keyRange)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKeyRange indicates an expected call of CreateKeyRange.
func (mr *MockQDBMockRecorder) CreateKeyRange(ctx, keyRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyRange", reflect.TypeOf((*MockQDB)(nil).CreateKeyRange), ctx, keyRange)
}

// DropDistribution mocks base method.
func (m *MockQDB) DropDistribution(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDistribution", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropDistribution indicates an expected call of DropDistribution.
func (mr *MockQDBMockRecorder) DropDistribution(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDistribution", reflect.TypeOf((*MockQDB)(nil).DropDistribution), ctx, id)
}

// DropKeyRange mocks base method.
func (m *MockQDB) DropKeyRange(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropKeyRange", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropKeyRange indicates an expected call of DropKeyRange.
func (mr *MockQDBMockRecorder) DropKeyRange(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropKeyRange", reflect.TypeOf((*MockQDB)(nil).DropKeyRange), ctx, id)
}

// DropKeyRangeAll mocks base method.
func (m *MockQDB) DropKeyRangeAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropKeyRangeAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropKeyRangeAll indicates an expected call of DropKeyRangeAll.
func (mr *MockQDBMockRecorder) DropKeyRangeAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropKeyRangeAll", reflect.TypeOf((*MockQDB)(nil).DropKeyRangeAll), ctx)
}

// DropShard mocks base method.
func (m *MockQDB) DropShard(ctx context.Context, shardID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropShard", ctx, shardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropShard indicates an expected call of DropShard.
func (mr *MockQDBMockRecorder) DropShard(ctx, shardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropShard", reflect.TypeOf((*MockQDB)(nil).DropShard), ctx, shardID)
}

// GetCoordinator mocks base method.
func (m *MockQDB) GetCoordinator(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoordinator", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoordinator indicates an expected call of GetCoordinator.
func (mr *MockQDBMockRecorder) GetCoordinator(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoordinator", reflect.TypeOf((*MockQDB)(nil).GetCoordinator), ctx)
}

// GetDistribution mocks base method.
func (m *MockQDB) GetDistribution(ctx context.Context, id string) (*qdb.Distribution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistribution", ctx, id)
	ret0, _ := ret[0].(*qdb.Distribution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistribution indicates an expected call of GetDistribution.
func (mr *MockQDBMockRecorder) GetDistribution(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistribution", reflect.TypeOf((*MockQDB)(nil).GetDistribution), ctx, id)
}

// GetKeyRange mocks base method.
func (m *MockQDB) GetKeyRange(ctx context.Context, id string) (*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyRange", ctx, id)
	ret0, _ := ret[0].(*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyRange indicates an expected call of GetKeyRange.
func (mr *MockQDBMockRecorder) GetKeyRange(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyRange", reflect.TypeOf((*MockQDB)(nil).GetKeyRange), ctx, id)
}

// GetRelationDistribution mocks base method.
func (m *MockQDB) GetRelationDistribution(ctx context.Context, relation string) (*qdb.Distribution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationDistribution", ctx, relation)
	ret0, _ := ret[0].(*qdb.Distribution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationDistribution indicates an expected call of GetRelationDistribution.
func (mr *MockQDBMockRecorder) GetRelationDistribution(ctx, relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationDistribution", reflect.TypeOf((*MockQDB)(nil).GetRelationDistribution), ctx, relation)
}

// GetShard mocks base method.
func (m *MockQDB) GetShard(ctx context.Context, shardID string) (*qdb.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShard", ctx, shardID)
	ret0, _ := ret[0].(*qdb.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShard indicates an expected call of GetShard.
func (mr *MockQDBMockRecorder) GetShard(ctx, shardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShard", reflect.TypeOf((*MockQDB)(nil).GetShard), ctx, shardID)
}

// GetTaskGroup mocks base method.
func (m *MockQDB) GetTaskGroup(ctx context.Context) (*qdb.TaskGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskGroup", ctx)
	ret0, _ := ret[0].(*qdb.TaskGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskGroup indicates an expected call of GetTaskGroup.
func (mr *MockQDBMockRecorder) GetTaskGroup(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskGroup", reflect.TypeOf((*MockQDB)(nil).GetTaskGroup), ctx)
}

// ListAllKeyRanges mocks base method.
func (m *MockQDB) ListAllKeyRanges(arg0 context.Context) ([]*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllKeyRanges", arg0)
	ret0, _ := ret[0].([]*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllKeyRanges indicates an expected call of ListAllKeyRanges.
func (mr *MockQDBMockRecorder) ListAllKeyRanges(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllKeyRanges", reflect.TypeOf((*MockQDB)(nil).ListAllKeyRanges), arg0)
}

// ListDistributions mocks base method.
func (m *MockQDB) ListDistributions(ctx context.Context) ([]*qdb.Distribution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributions", ctx)
	ret0, _ := ret[0].([]*qdb.Distribution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributions indicates an expected call of ListDistributions.
func (mr *MockQDBMockRecorder) ListDistributions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributions", reflect.TypeOf((*MockQDB)(nil).ListDistributions), ctx)
}

// ListKeyRanges mocks base method.
func (m *MockQDB) ListKeyRanges(arg0 context.Context, distribution string) ([]*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyRanges", arg0, distribution)
	ret0, _ := ret[0].([]*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyRanges indicates an expected call of ListKeyRanges.
func (mr *MockQDBMockRecorder) ListKeyRanges(arg0, distribution interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyRanges", reflect.TypeOf((*MockQDB)(nil).ListKeyRanges), arg0, distribution)
}

// ListShards mocks base method.
func (m *MockQDB) ListShards(ctx context.Context) ([]*qdb.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShards", ctx)
	ret0, _ := ret[0].([]*qdb.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShards indicates an expected call of ListShards.
func (mr *MockQDBMockRecorder) ListShards(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShards", reflect.TypeOf((*MockQDB)(nil).ListShards), ctx)
}

// LockKeyRange mocks base method.
func (m *MockQDB) LockKeyRange(ctx context.Context, id string) (*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockKeyRange", ctx, id)
	ret0, _ := ret[0].(*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockKeyRange indicates an expected call of LockKeyRange.
func (mr *MockQDBMockRecorder) LockKeyRange(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockKeyRange", reflect.TypeOf((*MockQDB)(nil).LockKeyRange), ctx, id)
}

// RemoveTaskGroup mocks base method.
func (m *MockQDB) RemoveTaskGroup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTaskGroup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTaskGroup indicates an expected call of RemoveTaskGroup.
func (mr *MockQDBMockRecorder) RemoveTaskGroup(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTaskGroup", reflect.TypeOf((*MockQDB)(nil).RemoveTaskGroup), ctx)
}

// ShareKeyRange mocks base method.
func (m *MockQDB) ShareKeyRange(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareKeyRange", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShareKeyRange indicates an expected call of ShareKeyRange.
func (mr *MockQDBMockRecorder) ShareKeyRange(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareKeyRange", reflect.TypeOf((*MockQDB)(nil).ShareKeyRange), id)
}

// UnlockKeyRange mocks base method.
func (m *MockQDB) UnlockKeyRange(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockKeyRange", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockKeyRange indicates an expected call of UnlockKeyRange.
func (mr *MockQDBMockRecorder) UnlockKeyRange(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockKeyRange", reflect.TypeOf((*MockQDB)(nil).UnlockKeyRange), ctx, id)
}

// UpdateCoordinator mocks base method.
func (m *MockQDB) UpdateCoordinator(ctx context.Context, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoordinator", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCoordinator indicates an expected call of UpdateCoordinator.
func (mr *MockQDBMockRecorder) UpdateCoordinator(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoordinator", reflect.TypeOf((*MockQDB)(nil).UpdateCoordinator), ctx, address)
}

// UpdateKeyRange mocks base method.
func (m *MockQDB) UpdateKeyRange(ctx context.Context, keyRange *qdb.KeyRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeyRange", ctx, keyRange)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKeyRange indicates an expected call of UpdateKeyRange.
func (mr *MockQDBMockRecorder) UpdateKeyRange(ctx, keyRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeyRange", reflect.TypeOf((*MockQDB)(nil).UpdateKeyRange), ctx, keyRange)
}

// WriteTaskGroup mocks base method.
func (m *MockQDB) WriteTaskGroup(ctx context.Context, group *qdb.TaskGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTaskGroup", ctx, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTaskGroup indicates an expected call of WriteTaskGroup.
func (mr *MockQDBMockRecorder) WriteTaskGroup(ctx, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTaskGroup", reflect.TypeOf((*MockQDB)(nil).WriteTaskGroup), ctx, group)
}

// MockXQDB is a mock of XQDB interface.
type MockXQDB struct {
	ctrl     *gomock.Controller
	recorder *MockXQDBMockRecorder
}

// MockXQDBMockRecorder is the mock recorder for MockXQDB.
type MockXQDBMockRecorder struct {
	mock *MockXQDB
}

// NewMockXQDB creates a new mock instance.
func NewMockXQDB(ctrl *gomock.Controller) *MockXQDB {
	mock := &MockXQDB{ctrl: ctrl}
	mock.recorder = &MockXQDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXQDB) EXPECT() *MockXQDBMockRecorder {
	return m.recorder
}

// AddRouter mocks base method.
func (m *MockXQDB) AddRouter(ctx context.Context, r *qdb.Router) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRouter", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRouter indicates an expected call of AddRouter.
func (mr *MockXQDBMockRecorder) AddRouter(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRouter", reflect.TypeOf((*MockXQDB)(nil).AddRouter), ctx, r)
}

// AddShard mocks base method.
func (m *MockXQDB) AddShard(ctx context.Context, shard *qdb.Shard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddShard", ctx, shard)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddShard indicates an expected call of AddShard.
func (mr *MockXQDBMockRecorder) AddShard(ctx, shard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShard", reflect.TypeOf((*MockXQDB)(nil).AddShard), ctx, shard)
}

// AlterDistributionAttach mocks base method.
func (m *MockXQDB) AlterDistributionAttach(ctx context.Context, id string, rels []*qdb.DistributedRelation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterDistributionAttach", ctx, id, rels)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterDistributionAttach indicates an expected call of AlterDistributionAttach.
func (mr *MockXQDBMockRecorder) AlterDistributionAttach(ctx, id, rels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterDistributionAttach", reflect.TypeOf((*MockXQDB)(nil).AlterDistributionAttach), ctx, id, rels)
}

// AlterDistributionDetach mocks base method.
func (m *MockXQDB) AlterDistributionDetach(ctx context.Context, id, relName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterDistributionDetach", ctx, id, relName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterDistributionDetach indicates an expected call of AlterDistributionDetach.
func (mr *MockXQDBMockRecorder) AlterDistributionDetach(ctx, id, relName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterDistributionDetach", reflect.TypeOf((*MockXQDB)(nil).AlterDistributionDetach), ctx, id, relName)
}

// CheckLockedKeyRange mocks base method.
func (m *MockXQDB) CheckLockedKeyRange(ctx context.Context, id string) (*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLockedKeyRange", ctx, id)
	ret0, _ := ret[0].(*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLockedKeyRange indicates an expected call of CheckLockedKeyRange.
func (mr *MockXQDBMockRecorder) CheckLockedKeyRange(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLockedKeyRange", reflect.TypeOf((*MockXQDB)(nil).CheckLockedKeyRange), ctx, id)
}

// CloseRouter mocks base method.
func (m *MockXQDB) CloseRouter(ctx context.Context, rID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseRouter", ctx, rID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseRouter indicates an expected call of CloseRouter.
func (mr *MockXQDBMockRecorder) CloseRouter(ctx, rID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseRouter", reflect.TypeOf((*MockXQDB)(nil).CloseRouter), ctx, rID)
}

// CreateDistribution mocks base method.
func (m *MockXQDB) CreateDistribution(ctx context.Context, distr *qdb.Distribution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDistribution", ctx, distr)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDistribution indicates an expected call of CreateDistribution.
func (mr *MockXQDBMockRecorder) CreateDistribution(ctx, distr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDistribution", reflect.TypeOf((*MockXQDB)(nil).CreateDistribution), ctx, distr)
}

// CreateKeyRange mocks base method.
func (m *MockXQDB) CreateKeyRange(ctx context.Context, keyRange *qdb.KeyRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyRange", ctx, keyRange)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateKeyRange indicates an expected call of CreateKeyRange.
func (mr *MockXQDBMockRecorder) CreateKeyRange(ctx, keyRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyRange", reflect.TypeOf((*MockXQDB)(nil).CreateKeyRange), ctx, keyRange)
}

// DeleteKeyRangeMove mocks base method.
func (m *MockXQDB) DeleteKeyRangeMove(ctx context.Context, moveId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyRangeMove", ctx, moveId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeyRangeMove indicates an expected call of DeleteKeyRangeMove.
func (mr *MockXQDBMockRecorder) DeleteKeyRangeMove(ctx, moveId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyRangeMove", reflect.TypeOf((*MockXQDB)(nil).DeleteKeyRangeMove), ctx, moveId)
}

// DeleteRouter mocks base method.
func (m *MockXQDB) DeleteRouter(ctx context.Context, rID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouter", ctx, rID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouter indicates an expected call of DeleteRouter.
func (mr *MockXQDBMockRecorder) DeleteRouter(ctx, rID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouter", reflect.TypeOf((*MockXQDB)(nil).DeleteRouter), ctx, rID)
}

// DropDistribution mocks base method.
func (m *MockXQDB) DropDistribution(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropDistribution", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropDistribution indicates an expected call of DropDistribution.
func (mr *MockXQDBMockRecorder) DropDistribution(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropDistribution", reflect.TypeOf((*MockXQDB)(nil).DropDistribution), ctx, id)
}

// DropKeyRange mocks base method.
func (m *MockXQDB) DropKeyRange(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropKeyRange", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropKeyRange indicates an expected call of DropKeyRange.
func (mr *MockXQDBMockRecorder) DropKeyRange(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropKeyRange", reflect.TypeOf((*MockXQDB)(nil).DropKeyRange), ctx, id)
}

// DropKeyRangeAll mocks base method.
func (m *MockXQDB) DropKeyRangeAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropKeyRangeAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropKeyRangeAll indicates an expected call of DropKeyRangeAll.
func (mr *MockXQDBMockRecorder) DropKeyRangeAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropKeyRangeAll", reflect.TypeOf((*MockXQDB)(nil).DropKeyRangeAll), ctx)
}

// DropShard mocks base method.
func (m *MockXQDB) DropShard(ctx context.Context, shardID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropShard", ctx, shardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropShard indicates an expected call of DropShard.
func (mr *MockXQDBMockRecorder) DropShard(ctx, shardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropShard", reflect.TypeOf((*MockXQDB)(nil).DropShard), ctx, shardID)
}

// GetCoordinator mocks base method.
func (m *MockXQDB) GetCoordinator(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoordinator", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoordinator indicates an expected call of GetCoordinator.
func (mr *MockXQDBMockRecorder) GetCoordinator(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoordinator", reflect.TypeOf((*MockXQDB)(nil).GetCoordinator), ctx)
}

// GetDistribution mocks base method.
func (m *MockXQDB) GetDistribution(ctx context.Context, id string) (*qdb.Distribution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistribution", ctx, id)
	ret0, _ := ret[0].(*qdb.Distribution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistribution indicates an expected call of GetDistribution.
func (mr *MockXQDBMockRecorder) GetDistribution(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistribution", reflect.TypeOf((*MockXQDB)(nil).GetDistribution), ctx, id)
}

// GetKeyRange mocks base method.
func (m *MockXQDB) GetKeyRange(ctx context.Context, id string) (*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyRange", ctx, id)
	ret0, _ := ret[0].(*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyRange indicates an expected call of GetKeyRange.
func (mr *MockXQDBMockRecorder) GetKeyRange(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyRange", reflect.TypeOf((*MockXQDB)(nil).GetKeyRange), ctx, id)
}

// GetRelationDistribution mocks base method.
func (m *MockXQDB) GetRelationDistribution(ctx context.Context, relation string) (*qdb.Distribution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationDistribution", ctx, relation)
	ret0, _ := ret[0].(*qdb.Distribution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationDistribution indicates an expected call of GetRelationDistribution.
func (mr *MockXQDBMockRecorder) GetRelationDistribution(ctx, relation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationDistribution", reflect.TypeOf((*MockXQDB)(nil).GetRelationDistribution), ctx, relation)
}

// GetShard mocks base method.
func (m *MockXQDB) GetShard(ctx context.Context, shardID string) (*qdb.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShard", ctx, shardID)
	ret0, _ := ret[0].(*qdb.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShard indicates an expected call of GetShard.
func (mr *MockXQDBMockRecorder) GetShard(ctx, shardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShard", reflect.TypeOf((*MockXQDB)(nil).GetShard), ctx, shardID)
}

// GetTaskGroup mocks base method.
func (m *MockXQDB) GetTaskGroup(ctx context.Context) (*qdb.TaskGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskGroup", ctx)
	ret0, _ := ret[0].(*qdb.TaskGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskGroup indicates an expected call of GetTaskGroup.
func (mr *MockXQDBMockRecorder) GetTaskGroup(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskGroup", reflect.TypeOf((*MockXQDB)(nil).GetTaskGroup), ctx)
}

// GetTransferTx mocks base method.
func (m *MockXQDB) GetTransferTx(ctx context.Context, key string) (*qdb.DataTransferTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransferTx", ctx, key)
	ret0, _ := ret[0].(*qdb.DataTransferTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransferTx indicates an expected call of GetTransferTx.
func (mr *MockXQDBMockRecorder) GetTransferTx(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransferTx", reflect.TypeOf((*MockXQDB)(nil).GetTransferTx), ctx, key)
}

// ListAllKeyRanges mocks base method.
func (m *MockXQDB) ListAllKeyRanges(arg0 context.Context) ([]*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllKeyRanges", arg0)
	ret0, _ := ret[0].([]*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllKeyRanges indicates an expected call of ListAllKeyRanges.
func (mr *MockXQDBMockRecorder) ListAllKeyRanges(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllKeyRanges", reflect.TypeOf((*MockXQDB)(nil).ListAllKeyRanges), arg0)
}

// ListDistributions mocks base method.
func (m *MockXQDB) ListDistributions(ctx context.Context) ([]*qdb.Distribution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDistributions", ctx)
	ret0, _ := ret[0].([]*qdb.Distribution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDistributions indicates an expected call of ListDistributions.
func (mr *MockXQDBMockRecorder) ListDistributions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDistributions", reflect.TypeOf((*MockXQDB)(nil).ListDistributions), ctx)
}

// ListKeyRangeMoves mocks base method.
func (m *MockXQDB) ListKeyRangeMoves(ctx context.Context) ([]*qdb.MoveKeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyRangeMoves", ctx)
	ret0, _ := ret[0].([]*qdb.MoveKeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyRangeMoves indicates an expected call of ListKeyRangeMoves.
func (mr *MockXQDBMockRecorder) ListKeyRangeMoves(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyRangeMoves", reflect.TypeOf((*MockXQDB)(nil).ListKeyRangeMoves), ctx)
}

// ListKeyRanges mocks base method.
func (m *MockXQDB) ListKeyRanges(arg0 context.Context, distribution string) ([]*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyRanges", arg0, distribution)
	ret0, _ := ret[0].([]*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyRanges indicates an expected call of ListKeyRanges.
func (mr *MockXQDBMockRecorder) ListKeyRanges(arg0, distribution interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyRanges", reflect.TypeOf((*MockXQDB)(nil).ListKeyRanges), arg0, distribution)
}

// ListRouters mocks base method.
func (m *MockXQDB) ListRouters(ctx context.Context) ([]*qdb.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouters", ctx)
	ret0, _ := ret[0].([]*qdb.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouters indicates an expected call of ListRouters.
func (mr *MockXQDBMockRecorder) ListRouters(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouters", reflect.TypeOf((*MockXQDB)(nil).ListRouters), ctx)
}

// ListShards mocks base method.
func (m *MockXQDB) ListShards(ctx context.Context) ([]*qdb.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShards", ctx)
	ret0, _ := ret[0].([]*qdb.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShards indicates an expected call of ListShards.
func (mr *MockXQDBMockRecorder) ListShards(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShards", reflect.TypeOf((*MockXQDB)(nil).ListShards), ctx)
}

// LockKeyRange mocks base method.
func (m *MockXQDB) LockKeyRange(ctx context.Context, id string) (*qdb.KeyRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockKeyRange", ctx, id)
	ret0, _ := ret[0].(*qdb.KeyRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockKeyRange indicates an expected call of LockKeyRange.
func (mr *MockXQDBMockRecorder) LockKeyRange(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockKeyRange", reflect.TypeOf((*MockXQDB)(nil).LockKeyRange), ctx, id)
}

// OpenRouter mocks base method.
func (m *MockXQDB) OpenRouter(ctx context.Context, rID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenRouter", ctx, rID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenRouter indicates an expected call of OpenRouter.
func (mr *MockXQDBMockRecorder) OpenRouter(ctx, rID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenRouter", reflect.TypeOf((*MockXQDB)(nil).OpenRouter), ctx, rID)
}

// RecordKeyRangeMove mocks base method.
func (m_2 *MockXQDB) RecordKeyRangeMove(ctx context.Context, m *qdb.MoveKeyRange) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecordKeyRangeMove", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordKeyRangeMove indicates an expected call of RecordKeyRangeMove.
func (mr *MockXQDBMockRecorder) RecordKeyRangeMove(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordKeyRangeMove", reflect.TypeOf((*MockXQDB)(nil).RecordKeyRangeMove), ctx, m)
}

// RecordTransferTx mocks base method.
func (m *MockXQDB) RecordTransferTx(ctx context.Context, key string, info *qdb.DataTransferTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordTransferTx", ctx, key, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordTransferTx indicates an expected call of RecordTransferTx.
func (mr *MockXQDBMockRecorder) RecordTransferTx(ctx, key, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTransferTx", reflect.TypeOf((*MockXQDB)(nil).RecordTransferTx), ctx, key, info)
}

// RemoveTaskGroup mocks base method.
func (m *MockXQDB) RemoveTaskGroup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTaskGroup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTaskGroup indicates an expected call of RemoveTaskGroup.
func (mr *MockXQDBMockRecorder) RemoveTaskGroup(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTaskGroup", reflect.TypeOf((*MockXQDB)(nil).RemoveTaskGroup), ctx)
}

// RemoveTransferTx mocks base method.
func (m *MockXQDB) RemoveTransferTx(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTransferTx", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTransferTx indicates an expected call of RemoveTransferTx.
func (mr *MockXQDBMockRecorder) RemoveTransferTx(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTransferTx", reflect.TypeOf((*MockXQDB)(nil).RemoveTransferTx), ctx, key)
}

// ShareKeyRange mocks base method.
func (m *MockXQDB) ShareKeyRange(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareKeyRange", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShareKeyRange indicates an expected call of ShareKeyRange.
func (mr *MockXQDBMockRecorder) ShareKeyRange(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareKeyRange", reflect.TypeOf((*MockXQDB)(nil).ShareKeyRange), id)
}

// TryCoordinatorLock mocks base method.
func (m *MockXQDB) TryCoordinatorLock(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryCoordinatorLock", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// TryCoordinatorLock indicates an expected call of TryCoordinatorLock.
func (mr *MockXQDBMockRecorder) TryCoordinatorLock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryCoordinatorLock", reflect.TypeOf((*MockXQDB)(nil).TryCoordinatorLock), ctx)
}

// UnlockKeyRange mocks base method.
func (m *MockXQDB) UnlockKeyRange(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockKeyRange", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockKeyRange indicates an expected call of UnlockKeyRange.
func (mr *MockXQDBMockRecorder) UnlockKeyRange(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockKeyRange", reflect.TypeOf((*MockXQDB)(nil).UnlockKeyRange), ctx, id)
}

// UpdateCoordinator mocks base method.
func (m *MockXQDB) UpdateCoordinator(ctx context.Context, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoordinator", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCoordinator indicates an expected call of UpdateCoordinator.
func (mr *MockXQDBMockRecorder) UpdateCoordinator(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoordinator", reflect.TypeOf((*MockXQDB)(nil).UpdateCoordinator), ctx, address)
}

// UpdateKeyRange mocks base method.
func (m *MockXQDB) UpdateKeyRange(ctx context.Context, keyRange *qdb.KeyRange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeyRange", ctx, keyRange)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKeyRange indicates an expected call of UpdateKeyRange.
func (mr *MockXQDBMockRecorder) UpdateKeyRange(ctx, keyRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeyRange", reflect.TypeOf((*MockXQDB)(nil).UpdateKeyRange), ctx, keyRange)
}

// UpdateKeyRangeMoveStatus mocks base method.
func (m *MockXQDB) UpdateKeyRangeMoveStatus(ctx context.Context, moveId string, s qdb.MoveKeyRangeStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeyRangeMoveStatus", ctx, moveId, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKeyRangeMoveStatus indicates an expected call of UpdateKeyRangeMoveStatus.
func (mr *MockXQDBMockRecorder) UpdateKeyRangeMoveStatus(ctx, moveId, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeyRangeMoveStatus", reflect.TypeOf((*MockXQDB)(nil).UpdateKeyRangeMoveStatus), ctx, moveId, s)
}

// WriteTaskGroup mocks base method.
func (m *MockXQDB) WriteTaskGroup(ctx context.Context, group *qdb.TaskGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTaskGroup", ctx, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTaskGroup indicates an expected call of WriteTaskGroup.
func (mr *MockXQDBMockRecorder) WriteTaskGroup(ctx, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTaskGroup", reflect.TypeOf((*MockXQDB)(nil).WriteTaskGroup), ctx, group)
}
