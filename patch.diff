diff --git a/.gitignore b/.gitignore
index db4c577..a5533b2 100644
--- a/.gitignore
+++ b/.gitignore
@@ -15,3 +15,5 @@ y.output
 memqdb.json
 test/feature/generatedFeatures
 test/feature/logs
+yacc/console/gram.y.save
+.DS_Store
\ No newline at end of file
diff --git a/balancer/pkg/client.go b/balancer/pkg/client.go
index af57ee0..d76c22a 100644
--- a/balancer/pkg/client.go
+++ b/balancer/pkg/client.go
@@ -30,6 +30,12 @@ func (c BalancerClient) DB() string {
 	return "DefaultDB"
 }
 
+func (c BalancerClient) DS() string {
+	return "DefaultDS"
+}
+
+func (c BalancerClient) SetDS(_ string) {}
+
 func (c BalancerClient) ID() string {
 	return "balancerID"
 }
diff --git a/coordinator/provider/coordinator.go b/coordinator/provider/coordinator.go
index 664cd67..20cc09b 100644
--- a/coordinator/provider/coordinator.go
+++ b/coordinator/provider/coordinator.go
@@ -310,7 +310,7 @@ func (cc *qdbCoordinator) RunCoordinator(ctx context.Context, initialRouter bool
 		return
 	}
 
-	ranges, err := cc.db.ListKeyRanges(context.TODO())
+	ranges, err := cc.db.ListKeyRanges(context.TODO(), "")
 	if err != nil {
 		spqrlog.Zero.Error().
 			Err(err).
@@ -406,8 +406,8 @@ func (qc *qdbCoordinator) AddRouter(ctx context.Context, router *topology.Router
 	return qc.db.AddRouter(ctx, topology.RouterToDB(router))
 }
 
-func (qc *qdbCoordinator) ListShardingRules(ctx context.Context) ([]*shrule.ShardingRule, error) {
-	rulesList, err := qc.db.ListShardingRules(ctx)
+func (qc *qdbCoordinator) getAllListShardingRules(ctx context.Context) ([]*shrule.ShardingRule, error) {
+	rulesList, err := qc.db.ListShardingRules(ctx, "")
 	if err != nil {
 		return nil, err
 	}
@@ -420,6 +420,22 @@ func (qc *qdbCoordinator) ListShardingRules(ctx context.Context) ([]*shrule.Shar
 	return shRules, nil
 }
 
+func (qc *qdbCoordinator) ListShardingRules(ctx context.Context, dataspace string) ([]*shrule.ShardingRule, error) {
+	rulesList, err := qc.db.ListShardingRules(ctx, dataspace)
+	if err != nil {
+		return nil, err
+	}
+
+	shRules := make([]*shrule.ShardingRule, 0, len(rulesList))
+	for _, rule := range rulesList {
+		if rule.DataspaceId == dataspace {
+			shRules = append(shRules, shrule.ShardingRuleFromDB(rule))
+		}
+	}
+
+	return shRules, nil
+}
+
 func (qc *qdbCoordinator) AddShardingRule(ctx context.Context, rule *shrule.ShardingRule) error {
 	// Store sharding rule to metadb.
 	if err := ops.AddShardingRuleWithChecks(ctx, qc.db, rule); err != nil {
@@ -540,15 +556,17 @@ func (qc *qdbCoordinator) AddKeyRange(ctx context.Context, keyRange *kr.KeyRange
 	return nil
 }
 
-func (qc *qdbCoordinator) ListKeyRanges(ctx context.Context) ([]*kr.KeyRange, error) {
-	keyRanges, err := qc.db.ListKeyRanges(ctx)
+func (qc *qdbCoordinator) ListKeyRanges(ctx context.Context, dataspace string) ([]*kr.KeyRange, error) {
+	keyRanges, err := qc.db.ListKeyRanges(ctx, dataspace)
 	if err != nil {
 		return nil, err
 	}
 
 	keyr := make([]*kr.KeyRange, 0, len(keyRanges))
 	for _, keyRange := range keyRanges {
-		keyr = append(keyr, kr.KeyRangeFromDB(keyRange))
+		if keyRange.DataspaceId == dataspace {
+			keyr = append(keyr, kr.KeyRangeFromDB(keyRange))
+		}
 	}
 
 	return keyr, nil
@@ -634,10 +652,11 @@ func (qc *qdbCoordinator) Split(ctx context.Context, req *kr.SplitKeyRange) erro
 
 	krNew := kr.KeyRangeFromDB(
 		&qdb.KeyRange{
-			LowerBound: req.Bound,
-			UpperBound: krOld.UpperBound,
-			KeyRangeID: req.Krid,
-			ShardID:    krOld.ShardID,
+			LowerBound:  req.Bound,
+			UpperBound:  krOld.UpperBound,
+			KeyRangeID:  req.Krid,
+			ShardID:     krOld.ShardID,
+			DataspaceId: krOld.DataspaceId,
 		},
 	)
 
@@ -834,7 +853,7 @@ func (qc *qdbCoordinator) Move(ctx context.Context, req *kr.MoveKeyRange) error
 	if err != nil {
 		return err
 	}
-	shardingRules, err := qc.ListShardingRules(ctx)
+	shardingRules, err := qc.getAllListShardingRules(ctx)
 	if err != nil {
 		return err
 	}
@@ -915,7 +934,7 @@ func (qc *qdbCoordinator) SyncRouterMetadata(ctx context.Context, qRouter *topol
 	defer cc.Close()
 
 	// Configure sharding rules.
-	shardingRules, err := qc.db.ListShardingRules(ctx)
+	shardingRules, err := qc.db.ListShardingRules(ctx, "")
 	if err != nil {
 		return err
 	}
@@ -941,7 +960,7 @@ func (qc *qdbCoordinator) SyncRouterMetadata(ctx context.Context, qRouter *topol
 		Msg("add sharding rules response")
 
 	// Configure key ranges.
-	keyRanges, err := qc.db.ListKeyRanges(ctx)
+	keyRanges, err := qc.db.ListKeyRanges(ctx, "")
 	if err != nil {
 		return err
 	}
diff --git a/coordinator/provider/keyranges.go b/coordinator/provider/keyranges.go
index e05c812..7ff6a14 100644
--- a/coordinator/provider/keyranges.go
+++ b/coordinator/provider/keyranges.go
@@ -51,8 +51,8 @@ func (c *CoordinatorService) UnlockKeyRange(ctx context.Context, request *protos
 	return &protos.ModifyReply{}, nil
 }
 
-func (c *CoordinatorService) KeyRangeIDByBounds(ctx context.Context, keyRange *protos.KeyRange) (string, error) {
-	krsqb, err := c.impl.ListKeyRanges(ctx)
+func (c *CoordinatorService) KeyRangeIDByBounds(ctx context.Context, keyRange *protos.KeyRange, dataspace string) (string, error) {
+	krsqb, err := c.impl.ListKeyRanges(ctx, dataspace)
 	if err != nil {
 		return "", err
 	}
@@ -82,12 +82,12 @@ func (c *CoordinatorService) SplitKeyRange(ctx context.Context, request *protos.
 	return &protos.ModifyReply{}, nil
 }
 
-func (c *CoordinatorService) ListKeyRange(ctx context.Context, _ *protos.ListKeyRangeRequest) (*protos.KeyRangeReply, error) {
+func (c *CoordinatorService) ListKeyRange(ctx context.Context, request *protos.ListKeyRangeRequest) (*protos.KeyRangeReply, error) {
 	if c.impl == nil {
 		return &protos.KeyRangeReply{}, nil
 	}
 
-	krsqb, err := c.impl.ListKeyRanges(ctx)
+	krsqb, err := c.impl.ListKeyRanges(ctx, request.Dataspace)
 	if err != nil {
 		return nil, err
 	}
@@ -115,7 +115,7 @@ func (c *CoordinatorService) MoveKeyRange(ctx context.Context, request *protos.M
 }
 
 func (c *CoordinatorService) MergeKeyRange(ctx context.Context, request *protos.MergeKeyRangeRequest) (*protos.ModifyReply, error) {
-	krsqb, err := c.impl.ListKeyRanges(ctx)
+	krsqb, err := c.impl.ListKeyRanges(ctx, request.Dataspace)
 	if err != nil {
 		return nil, err
 	}
diff --git a/coordinator/provider/sharding_rules.go b/coordinator/provider/sharding_rules.go
index 75311e0..fc32d3c 100644
--- a/coordinator/provider/sharding_rules.go
+++ b/coordinator/provider/sharding_rules.go
@@ -25,7 +25,7 @@ func (s *ShardingRulesService) AddShardingRules(ctx context.Context, request *pr
 }
 
 func (s *ShardingRulesService) ListShardingRules(ctx context.Context, request *protos.ListShardingRuleRequest) (*protos.ListShardingRuleReply, error) {
-	rules, err := s.impl.ListShardingRules(ctx)
+	rules, err := s.impl.ListShardingRules(ctx, request.Dataspace)
 	if err != nil {
 		return nil, err
 	}
diff --git a/go.mod b/go.mod
index 15d3326..b007d30 100644
--- a/go.mod
+++ b/go.mod
@@ -87,6 +87,7 @@ require (
 	google.golang.org/genproto v0.0.0-20230822172742-b8732ec3820d // indirect
 	google.golang.org/genproto/googleapis/api v0.0.0-20230822172742-b8732ec3820d // indirect
 	google.golang.org/genproto/googleapis/rpc v0.0.0-20230822172742-b8732ec3820d // indirect
+	google.golang.org/grpc/cmd/protoc-gen-go-grpc v1.3.0 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
 	gotest.tools/v3 v3.5.1 // indirect
 )
diff --git a/go.sum b/go.sum
index aef798d..50102d8 100644
--- a/go.sum
+++ b/go.sum
@@ -287,6 +287,8 @@ google.golang.org/genproto/googleapis/rpc v0.0.0-20230822172742-b8732ec3820d h1:
 google.golang.org/genproto/googleapis/rpc v0.0.0-20230822172742-b8732ec3820d/go.mod h1:+Bk1OCOj40wS2hwAMA+aCW9ypzm63QTBBHp6lQ3p+9M=
 google.golang.org/grpc v1.59.0 h1:Z5Iec2pjwb+LEOqzpB2MR12/eKFhDPhuqW91O+4bwUk=
 google.golang.org/grpc v1.59.0/go.mod h1:aUPDwccQo6OTjy7Hct4AfBPD1GptF4fyUjIkQ9YtF98=
+google.golang.org/grpc/cmd/protoc-gen-go-grpc v1.3.0 h1:rNBFJjBCOgVr9pWD7rs/knKL4FRTKgpZmsRfV214zcA=
+google.golang.org/grpc/cmd/protoc-gen-go-grpc v1.3.0/go.mod h1:Dk1tviKTvMCz5tvh7t+fh94dhmQVHuCt2OzJB3CTW9Y=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
 google.golang.org/protobuf v1.31.0 h1:g0LDEJHgrBl9N9r17Ru3sqWhkIx2NB67okBHPwC7hs8=
diff --git a/pkg/client/client.go b/pkg/client/client.go
index 992b344..ffd771a 100644
--- a/pkg/client/client.go
+++ b/pkg/client/client.go
@@ -48,6 +48,7 @@ type Client interface {
 
 	Usr() string
 	DB() string
+	DS() string
 
 	Send(msg pgproto3.BackendMessage) error
 	SendCtx(ctx context.Context, msg pgproto3.BackendMessage) error
diff --git a/pkg/clientinteractor/interactor.go b/pkg/clientinteractor/interactor.go
index 0d2af51..787af81 100644
--- a/pkg/clientinteractor/interactor.go
+++ b/pkg/clientinteractor/interactor.go
@@ -56,6 +56,14 @@ func (pi *PSQLInteractor) CompleteMsg(rowCnt int) error {
 	return nil
 }
 
+func (pi *PSQLInteractor) GetDataspace() string {
+	return pi.cl.DS()
+}
+
+func (pi *PSQLInteractor) SetDataspace(dataspace string) {
+	pi.cl.SetParam("dataspace", dataspace)
+}
+
 // TEXTOID https://github.com/postgres/postgres/blob/master/src/include/catalog/pg_type.dat#L81
 const TEXTOID = 25
 
@@ -185,6 +193,7 @@ func (pi *PSQLInteractor) KeyRanges(krs []*kr.KeyRange) error {
 		&pgproto3.RowDescription{Fields: []pgproto3.FieldDescription{
 			TextOidFD("Key range ID"),
 			TextOidFD("Shard ID"),
+			TextOidFD("Dataspace ID"),
 			TextOidFD("Lower bound"),
 			TextOidFD("Upper bound"),
 		},
@@ -201,6 +210,7 @@ func (pi *PSQLInteractor) KeyRanges(krs []*kr.KeyRange) error {
 			Values: [][]byte{
 				[]byte(keyRange.ID),
 				[]byte(keyRange.ShardID),
+				[]byte(keyRange.Dataspace),
 				keyRange.LowerBound,
 				keyRange.UpperBound,
 			},
@@ -473,6 +483,7 @@ func (pi *PSQLInteractor) ShardingRules(ctx context.Context, rules []*shrule.Sha
 	for _, msg := range []pgproto3.BackendMessage{
 		&pgproto3.RowDescription{Fields: []pgproto3.FieldDescription{
 			TextOidFD("Sharding Rule ID"),
+			TextOidFD("Dataspace ID"),
 			TextOidFD("Table Name"),
 			TextOidFD("Columns"),
 			TextOidFD("Hash Function"),
@@ -504,6 +515,7 @@ func (pi *PSQLInteractor) ShardingRules(ctx context.Context, rules []*shrule.Sha
 		if err := pi.cl.Send(&pgproto3.DataRow{
 			Values: [][]byte{
 				[]byte(rule.Id),
+				[]byte(rule.Dataspace),
 				[]byte(tableName),
 				[]byte(entries.String()),
 				[]byte(hashFunctions.String()),
@@ -517,6 +529,30 @@ func (pi *PSQLInteractor) ShardingRules(ctx context.Context, rules []*shrule.Sha
 	return pi.CompleteMsg(0)
 }
 
+func (pi *PSQLInteractor) Dataspaces(ctx context.Context, dataspaces []*dataspaces.Dataspace) error {
+	for _, msg := range []pgproto3.BackendMessage{
+		&pgproto3.RowDescription{Fields: []pgproto3.FieldDescription{
+			TextOidFD("Dataspace ID"),
+		}},
+	} {
+		if err := pi.cl.Send(msg); err != nil {
+			spqrlog.Zero.Error().Err(err).Msg("")
+			return err
+		}
+	}
+	for _, dataspace := range dataspaces {
+		if err := pi.cl.Send(&pgproto3.DataRow{
+			Values: [][]byte{
+				[]byte(dataspace.Id),
+			},
+		}); err != nil {
+			spqrlog.Zero.Error().Err(err).Msg("")
+			return err
+		}
+	}
+	return pi.CompleteMsg(0)
+}
+
 func (pi *PSQLInteractor) ReportError(err error) error {
 	if err == nil {
 		return nil
@@ -717,6 +753,22 @@ func (pi *PSQLInteractor) AddDataspace(ctx context.Context, ks *dataspaces.Datas
 	return pi.CompleteMsg(0)
 }
 
+func (pi *PSQLInteractor) DropDataspace(ctx context.Context, ids []string) error {
+	if err := pi.WriteHeader("drop dataspace"); err != nil {
+		spqrlog.Zero.Error().Err(err).Msg("")
+		return err
+	}
+
+	for _, id := range ids {
+		if err := pi.WriteDataRow(fmt.Sprintf("drop dataspace %s", id)); err != nil {
+			spqrlog.Zero.Error().Err(err).Msg("")
+			return err
+		}
+	}
+
+	return pi.CompleteMsg(0)
+}
+
 func (pi *PSQLInteractor) ReportStmtRoutedToAllShards(ctx context.Context) error {
 	if err := pi.WriteHeader("explain query"); err != nil {
 		spqrlog.Zero.Error().Err(err).Msg("")
diff --git a/pkg/coord/adapter.go b/pkg/coord/adapter.go
index 265fa82..d23c70b 100644
--- a/pkg/coord/adapter.go
+++ b/pkg/coord/adapter.go
@@ -32,7 +32,7 @@ func (a *adapter) ShareKeyRange(id string) error {
 	return fmt.Errorf("shareKeyRange not implemented")
 }
 
-func (a *adapter) ListKeyRanges(ctx context.Context) ([]*kr.KeyRange, error) {
+func (a *adapter) ListKeyRanges(ctx context.Context, _ string) ([]*kr.KeyRange, error) {
 	c := proto.NewKeyRangeServiceClient(a.conn)
 	reply, err := c.ListKeyRange(ctx, &proto.ListKeyRangeRequest{})
 	if err != nil {
@@ -64,7 +64,7 @@ func (a *adapter) LockKeyRange(ctx context.Context, krid string) (*kr.KeyRange,
 		return nil, err
 	}
 
-	krs, err := a.ListKeyRanges(ctx)
+	krs, err := a.ListKeyRanges(ctx, "")
 	if err != nil {
 		return nil, err
 	}
@@ -91,7 +91,7 @@ func (a *adapter) UnlockKeyRange(ctx context.Context, krid string) error {
 }
 
 func (a *adapter) Split(ctx context.Context, split *kr.SplitKeyRange) error {
-	krs, err := a.ListKeyRanges(ctx)
+	krs, err := a.ListKeyRanges(ctx, "")
 	if err != nil {
 		return err
 	}
@@ -119,7 +119,7 @@ func (a *adapter) Split(ctx context.Context, split *kr.SplitKeyRange) error {
 }
 
 func (a *adapter) Unite(ctx context.Context, unite *kr.UniteKeyRange) error {
-	krs, err := a.ListKeyRanges(ctx)
+	krs, err := a.ListKeyRanges(ctx, "")
 	if err != nil {
 		return err
 	}
@@ -156,7 +156,7 @@ func (a *adapter) Unite(ctx context.Context, unite *kr.UniteKeyRange) error {
 }
 
 func (a *adapter) Move(ctx context.Context, move *kr.MoveKeyRange) error {
-	krs, err := a.ListKeyRanges(ctx)
+	krs, err := a.ListKeyRanges(ctx, "")
 	if err != nil {
 		return err
 	}
@@ -206,7 +206,7 @@ func (a *adapter) DropShardingRule(ctx context.Context, id string) error {
 }
 
 func (a *adapter) DropShardingRuleAll(ctx context.Context) ([]*shrule.ShardingRule, error) {
-	rules, err := a.ListShardingRules(ctx)
+	rules, err := a.ListShardingRules(ctx, "")
 	if err != nil {
 		return nil, err
 	}
@@ -220,7 +220,7 @@ func (a *adapter) DropShardingRuleAll(ctx context.Context) ([]*shrule.ShardingRu
 	return rules, err
 }
 
-func (a *adapter) ListShardingRules(ctx context.Context) ([]*shrule.ShardingRule, error) {
+func (a *adapter) ListShardingRules(ctx context.Context, _ string) ([]*shrule.ShardingRule, error) {
 	c := proto.NewShardingRulesServiceClient(a.conn)
 	reply, err := c.ListShardingRules(ctx, &proto.ListShardingRuleRequest{})
 	if err != nil {
@@ -292,10 +292,14 @@ func (a *adapter) ListDataspace(ctx context.Context) ([]*dataspaces.Dataspace, e
 	return nil, fmt.Errorf("ListDataspace not implemented")
 }
 
-func (a *adapter) AddDataspace(ctx context.Context, ks *dataspaces.Dataspace) error {
+func (a *adapter) AddDataspace(ctx context.Context, ds *dataspaces.Dataspace) error {
 	return fmt.Errorf("addDataspace not implemented")
 }
 
+func (a *adapter) DropDataspace(ctx context.Context, ds *dataspaces.Dataspace) error {
+	return fmt.Errorf("dropDataspace not implemented")
+}
+
 func (a *adapter) UpdateCoordinator(ctx context.Context, address string) error {
 	return fmt.Errorf("UpdateCoordinator not implemeneted")
 }
diff --git a/pkg/coord/local/clocal.go b/pkg/coord/local/clocal.go
index 63d8fb5..eff6add 100644
--- a/pkg/coord/local/clocal.go
+++ b/pkg/coord/local/clocal.go
@@ -72,6 +72,12 @@ func (lc *LocalCoordinator) ListDataShards(ctx context.Context) []*datashards.Da
 	return ret
 }
 
+func (lc *LocalCoordinator) DropDataspace(ctx context.Context, ds *dataspaces.Dataspace) error {
+	lc.mu.Lock()
+	defer lc.mu.Unlock()
+	return lc.qdb.DropDataspace(ctx, ds.Id)
+}
+
 func (lc *LocalCoordinator) ListShards(ctx context.Context) ([]*datashards.DataShard, error) {
 	resp, err := lc.qdb.ListShards(ctx)
 	if err != nil {
@@ -243,10 +249,11 @@ func (qr *LocalCoordinator) Split(ctx context.Context, req *kr.SplitKeyRange) er
 
 	krNew := kr.KeyRangeFromDB(
 		&qdb.KeyRange{
-			LowerBound: req.Bound,
-			UpperBound: krOld.UpperBound,
-			KeyRangeID: req.Krid,
-			ShardID:    krOld.ShardID,
+			LowerBound:  req.Bound,
+			UpperBound:  krOld.UpperBound,
+			KeyRangeID:  req.Krid,
+			ShardID:     krOld.ShardID,
+			DataspaceId: krOld.DataspaceId,
 		},
 	)
 
@@ -307,13 +314,14 @@ func (qr *LocalCoordinator) Shards() []string {
 	return ret
 }
 
-func (qr *LocalCoordinator) ListKeyRanges(ctx context.Context) ([]*kr.KeyRange, error) {
+func (qr *LocalCoordinator) ListKeyRanges(ctx context.Context, dataspace string) ([]*kr.KeyRange, error) {
 	var ret []*kr.KeyRange
-	if krs, err := qr.qdb.ListKeyRanges(ctx); err != nil {
+	if krs, err := qr.qdb.ListKeyRanges(ctx, dataspace); err != nil {
 		return nil, err
 	} else {
 		for _, keyRange := range krs {
 			ret = append(ret, kr.KeyRangeFromDB(keyRange))
+
 		}
 	}
 
@@ -330,14 +338,15 @@ func (qr *LocalCoordinator) AddShardingRule(ctx context.Context, rule *shrule.Sh
 	return ops.AddShardingRuleWithChecks(ctx, qr.qdb, rule)
 }
 
-func (qr *LocalCoordinator) ListShardingRules(ctx context.Context) ([]*shrule.ShardingRule, error) {
-	rules, err := qr.qdb.ListShardingRules(ctx)
+func (qr *LocalCoordinator) ListShardingRules(ctx context.Context, dataspace string) ([]*shrule.ShardingRule, error) {
+	rules, err := qr.qdb.ListShardingRules(ctx, dataspace)
 	if err != nil {
 		return nil, err
 	}
 	var resp []*shrule.ShardingRule
 	for _, v := range rules {
 		resp = append(resp, shrule.ShardingRuleFromDB(v))
+
 	}
 
 	return resp, nil
diff --git a/pkg/datatransfers/data_transfers_test.go b/pkg/datatransfers/data_transfers_test.go
index 3d1206c..3eedccd 100644
--- a/pkg/datatransfers/data_transfers_test.go
+++ b/pkg/datatransfers/data_transfers_test.go
@@ -6,12 +6,12 @@ import (
 	"sync"
 	"testing"
 
+	"github.com/golang/mock/gomock"
 	"github.com/jackc/pgx/v5"
 	"github.com/jackc/pgx/v5/pgconn"
 	mock "github.com/pg-sharding/spqr/pkg/mock/pgx"
 	"github.com/pg-sharding/spqr/qdb"
 	"github.com/stretchr/testify/assert"
-	"go.uber.org/mock/gomock"
 )
 
 // commitTransactions tests
diff --git a/pkg/meta/meta.go b/pkg/meta/meta.go
index 783d94c..e3c3a97 100644
--- a/pkg/meta/meta.go
+++ b/pkg/meta/meta.go
@@ -36,7 +36,7 @@ type EntityMgr interface {
 
 var unknownCoordinatorCommand = fmt.Errorf("unknown coordinator cmd")
 
-func processDrop(ctx context.Context, dstmt spqrparser.Statement, mngr EntityMgr, cli *clientinteractor.PSQLInteractor) error {
+func processDrop(ctx context.Context, dstmt spqrparser.Statement, isHard bool, mngr EntityMgr, cli *clientinteractor.PSQLInteractor) error {
 	switch stmt := dstmt.(type) {
 	case *spqrparser.KeyRangeSelector:
 		if stmt.KeyRangeID == "*" {
@@ -76,6 +76,54 @@ func processDrop(ctx context.Context, dstmt spqrparser.Statement, mngr EntityMgr
 			}
 			return cli.DropShardingRule(ctx, stmt.ID)
 		}
+	case *spqrparser.DataspaceSelector:
+		id := stmt.ID
+		if stmt.ID == "*" {
+			id = ""
+		}
+		srs, err := mngr.ListShardingRules(ctx, id)
+		if err != nil {
+			return err
+		}
+
+		krs, err := mngr.ListKeyRanges(ctx, id)
+		if err != nil {
+			return err
+		}
+
+		if len(srs)+len(krs) != 0 && !isHard {
+			return fmt.Errorf("Dataspace have Key Ranges or/and Shrding Rules. Use HARD drop to delete this")
+		}
+
+		for _, kr := range krs {
+			err = mngr.DropKeyRange(ctx, kr.ID)
+			if err != nil {
+				return err
+			}
+		}
+		for _, sr := range srs {
+			err = mngr.DropShardingRule(ctx, sr.Id)
+			if err != nil {
+				return err
+			}
+		}
+
+		dss, err := mngr.ListDataspace(ctx)
+		ret := make([]string, 0)
+		if err != nil {
+			return err
+		}
+		for _, ds := range dss {
+			if ds.Id == id || id == "" {
+				ret = append(ret, ds.ID())
+				err = mngr.DropDataspace(ctx, ds)
+				if err != nil {
+					return err
+				}
+			}
+		}
+
+		return cli.DropDataspace(ctx, ret)
 	default:
 		return fmt.Errorf("unknown drop statement")
 	}
@@ -85,7 +133,19 @@ func processCreate(ctx context.Context, astmt spqrparser.Statement, mngr EntityM
 	switch stmt := astmt.(type) {
 	case *spqrparser.DataspaceDefinition:
 		dataspace := dataspaces.NewDataspace(stmt.ID)
-		err := mngr.AddDataspace(ctx, dataspace)
+
+		dataspaces, err := mngr.ListDataspace(ctx)
+		if err != nil {
+			return err
+		}
+		for _, ds := range dataspaces {
+			if ds.Id == dataspace.Id {
+				spqrlog.Zero.Debug().Msg("Attempt to create existing dataspace")
+				return cli.AddDataspace(ctx, dataspace)
+			}
+		}
+
+		err = mngr.AddDataspace(ctx, dataspace)
 		if err != nil {
 			return err
 		}
@@ -95,7 +155,7 @@ func processCreate(ctx context.Context, astmt spqrparser.Statement, mngr EntityM
 		for _, el := range stmt.Entries {
 			entries = append(entries, *shrule.NewShardingRuleEntry(el.Column, el.HashFunction))
 		}
-		shardingRule := shrule.NewShardingRule(stmt.ID, stmt.TableName, entries)
+		shardingRule := shrule.NewShardingRule(stmt.ID, stmt.TableName, entries, stmt.Dataspace)
 		if err := mngr.AddShardingRule(ctx, shardingRule); err != nil {
 			return err
 		}
@@ -130,7 +190,7 @@ func Proc(ctx context.Context, tstmt spqrparser.Statement, mgr EntityMgr, ci con
 		}
 		return cli.StopTraceMessages(ctx)
 	case *spqrparser.Drop:
-		return processDrop(ctx, stmt.Element, mgr, cli)
+		return processDrop(ctx, stmt.Element, stmt.HardDelete, mgr, cli)
 	case *spqrparser.Create:
 		return processCreate(ctx, stmt.Element, mgr, cli)
 	case *spqrparser.MoveKeyRange:
@@ -246,7 +306,7 @@ func ProcessShow(ctx context.Context, stmt *spqrparser.Show, mngr EntityMgr, ci
 		}
 		return cli.Shards(ctx, resp)
 	case spqrparser.KeyRangesStr:
-		ranges, err := mngr.ListKeyRanges(ctx)
+		ranges, err := mngr.ListKeyRanges(ctx, "")
 		if err != nil {
 			return err
 		}
@@ -259,7 +319,7 @@ func ProcessShow(ctx context.Context, stmt *spqrparser.Show, mngr EntityMgr, ci
 
 		return cli.Routers(resp)
 	case spqrparser.ShardingRules:
-		resp, err := mngr.ListShardingRules(ctx)
+		resp, err := mngr.ListShardingRules(ctx, "")
 		if err != nil {
 			return err
 		}
@@ -287,6 +347,12 @@ func ProcessShow(ctx context.Context, stmt *spqrparser.Show, mngr EntityMgr, ci
 		return cli.Pools(ctx, respPools)
 	case spqrparser.VersionStr:
 		return cli.Version(ctx)
+	case spqrparser.DataspacesStr:
+		dataspaces, err := mngr.ListDataspace(ctx)
+		if err != nil {
+			return err
+		}
+		return cli.Dataspaces(ctx, dataspaces)
 	default:
 		return unknownCoordinatorCommand
 	}
diff --git a/pkg/mock/conn/mock_instance.go b/pkg/mock/conn/mock_instance.go
index c685022..8b96ea1 100644
--- a/pkg/mock/conn/mock_instance.go
+++ b/pkg/mock/conn/mock_instance.go
@@ -1,10 +1,6 @@
 // Code generated by MockGen. DO NOT EDIT.
 // Source: ./pkg/conn/instance.go
-//
-// Generated by this command:
-//
-//	mockgen -source=./pkg/conn/instance.go -destination=pkg/mock/conn/mock_instance.go -package=mock
-//
+
 // Package mock is a generated GoMock package.
 package mock
 
@@ -12,9 +8,9 @@ import (
 	tls "crypto/tls"
 	reflect "reflect"
 
+	gomock "github.com/golang/mock/gomock"
 	pgproto3 "github.com/jackc/pgx/v5/pgproto3"
 	conn "github.com/pg-sharding/spqr/pkg/conn"
-	gomock "go.uber.org/mock/gomock"
 )
 
 // MockDBInstance is a mock of DBInstance interface.
@@ -49,7 +45,7 @@ func (m *MockDBInstance) Cancel(csm *pgproto3.CancelRequest) error {
 }
 
 // Cancel indicates an expected call of Cancel.
-func (mr *MockDBInstanceMockRecorder) Cancel(csm any) *gomock.Call {
+func (mr *MockDBInstanceMockRecorder) Cancel(csm interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockDBInstance)(nil).Cancel), csm)
 }
@@ -106,7 +102,7 @@ func (m *MockDBInstance) ReqBackendSsl(arg0 *tls.Config) error {
 }
 
 // ReqBackendSsl indicates an expected call of ReqBackendSsl.
-func (mr *MockDBInstanceMockRecorder) ReqBackendSsl(arg0 any) *gomock.Call {
+func (mr *MockDBInstanceMockRecorder) ReqBackendSsl(arg0 interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReqBackendSsl", reflect.TypeOf((*MockDBInstance)(nil).ReqBackendSsl), arg0)
 }
@@ -120,7 +116,7 @@ func (m *MockDBInstance) Send(query pgproto3.FrontendMessage) error {
 }
 
 // Send indicates an expected call of Send.
-func (mr *MockDBInstanceMockRecorder) Send(query any) *gomock.Call {
+func (mr *MockDBInstanceMockRecorder) Send(query interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDBInstance)(nil).Send), query)
 }
@@ -132,7 +128,7 @@ func (m *MockDBInstance) SetStatus(status conn.InstanceStatus) {
 }
 
 // SetStatus indicates an expected call of SetStatus.
-func (mr *MockDBInstanceMockRecorder) SetStatus(status any) *gomock.Call {
+func (mr *MockDBInstanceMockRecorder) SetStatus(status interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockDBInstance)(nil).SetStatus), status)
 }
diff --git a/pkg/mock/conn/raw_mock.go b/pkg/mock/conn/raw_mock.go
index df3caad..90f1b91 100644
--- a/pkg/mock/conn/raw_mock.go
+++ b/pkg/mock/conn/raw_mock.go
@@ -1,10 +1,6 @@
 // Code generated by MockGen. DO NOT EDIT.
 // Source: ./pkg/conn/raw.go
-//
-// Generated by this command:
-//
-//	mockgen -source=./pkg/conn/raw.go -destination=./pkg/mock/conn/raw_mock.go -package=mock
-//
+
 // Package mock is a generated GoMock package.
 package mock
 
@@ -13,7 +9,7 @@ import (
 	reflect "reflect"
 	time "time"
 
-	gomock "go.uber.org/mock/gomock"
+	gomock "github.com/golang/mock/gomock"
 )
 
 // MockRawConn is a mock of RawConn interface.
@@ -77,7 +73,7 @@ func (m *MockRawConn) Read(b []byte) (int, error) {
 }
 
 // Read indicates an expected call of Read.
-func (mr *MockRawConnMockRecorder) Read(b any) *gomock.Call {
+func (mr *MockRawConnMockRecorder) Read(b interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRawConn)(nil).Read), b)
 }
@@ -105,7 +101,7 @@ func (m *MockRawConn) SetDeadline(t time.Time) error {
 }
 
 // SetDeadline indicates an expected call of SetDeadline.
-func (mr *MockRawConnMockRecorder) SetDeadline(t any) *gomock.Call {
+func (mr *MockRawConnMockRecorder) SetDeadline(t interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockRawConn)(nil).SetDeadline), t)
 }
@@ -119,7 +115,7 @@ func (m *MockRawConn) SetReadDeadline(t time.Time) error {
 }
 
 // SetReadDeadline indicates an expected call of SetReadDeadline.
-func (mr *MockRawConnMockRecorder) SetReadDeadline(t any) *gomock.Call {
+func (mr *MockRawConnMockRecorder) SetReadDeadline(t interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockRawConn)(nil).SetReadDeadline), t)
 }
@@ -133,7 +129,7 @@ func (m *MockRawConn) SetWriteDeadline(t time.Time) error {
 }
 
 // SetWriteDeadline indicates an expected call of SetWriteDeadline.
-func (mr *MockRawConnMockRecorder) SetWriteDeadline(t any) *gomock.Call {
+func (mr *MockRawConnMockRecorder) SetWriteDeadline(t interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockRawConn)(nil).SetWriteDeadline), t)
 }
@@ -148,7 +144,7 @@ func (m *MockRawConn) Write(b []byte) (int, error) {
 }
 
 // Write indicates an expected call of Write.
-func (mr *MockRawConnMockRecorder) Write(b any) *gomock.Call {
+func (mr *MockRawConnMockRecorder) Write(b interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockRawConn)(nil).Write), b)
 }
diff --git a/pkg/mock/pgx/mock_pgx_tx.go b/pkg/mock/pgx/mock_pgx_tx.go
index 4f8410b..7d5f373 100644
--- a/pkg/mock/pgx/mock_pgx_tx.go
+++ b/pkg/mock/pgx/mock_pgx_tx.go
@@ -1,10 +1,6 @@
 // Code generated by MockGen. DO NOT EDIT.
 // Source: pkg/datatransfers/pgx_tx_iface.go
-//
-// Generated by this command:
-//
-//	mockgen -source=pkg/datatransfers/pgx_tx_iface.go -destination=pkg/mock/pgx/mock_pgx_tx.go -package=mock
-//
+
 // Package mock is a generated GoMock package.
 package mock
 
@@ -12,9 +8,9 @@ import (
 	context "context"
 	reflect "reflect"
 
+	gomock "github.com/golang/mock/gomock"
 	pgx "github.com/jackc/pgx/v5"
 	pgconn "github.com/jackc/pgx/v5/pgconn"
-	gomock "go.uber.org/mock/gomock"
 )
 
 // MockTx is a mock of Tx interface.
@@ -50,7 +46,7 @@ func (m *MockTx) Begin(ctx context.Context) (pgx.Tx, error) {
 }
 
 // Begin indicates an expected call of Begin.
-func (mr *MockTxMockRecorder) Begin(ctx any) *gomock.Call {
+func (mr *MockTxMockRecorder) Begin(ctx interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockTx)(nil).Begin), ctx)
 }
@@ -64,7 +60,7 @@ func (m *MockTx) Commit(ctx context.Context) error {
 }
 
 // Commit indicates an expected call of Commit.
-func (mr *MockTxMockRecorder) Commit(ctx any) *gomock.Call {
+func (mr *MockTxMockRecorder) Commit(ctx interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTx)(nil).Commit), ctx)
 }
@@ -93,7 +89,7 @@ func (m *MockTx) CopyFrom(ctx context.Context, tableName pgx.Identifier, columnN
 }
 
 // CopyFrom indicates an expected call of CopyFrom.
-func (mr *MockTxMockRecorder) CopyFrom(ctx, tableName, columnNames, rowSrc any) *gomock.Call {
+func (mr *MockTxMockRecorder) CopyFrom(ctx, tableName, columnNames, rowSrc interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFrom", reflect.TypeOf((*MockTx)(nil).CopyFrom), ctx, tableName, columnNames, rowSrc)
 }
@@ -101,7 +97,7 @@ func (mr *MockTxMockRecorder) CopyFrom(ctx, tableName, columnNames, rowSrc any)
 // Exec mocks base method.
 func (m *MockTx) Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error) {
 	m.ctrl.T.Helper()
-	varargs := []any{ctx, sql}
+	varargs := []interface{}{ctx, sql}
 	for _, a := range arguments {
 		varargs = append(varargs, a)
 	}
@@ -112,9 +108,9 @@ func (m *MockTx) Exec(ctx context.Context, sql string, arguments ...any) (pgconn
 }
 
 // Exec indicates an expected call of Exec.
-func (mr *MockTxMockRecorder) Exec(ctx, sql any, arguments ...any) *gomock.Call {
+func (mr *MockTxMockRecorder) Exec(ctx, sql interface{}, arguments ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	varargs := append([]any{ctx, sql}, arguments...)
+	varargs := append([]interface{}{ctx, sql}, arguments...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockTx)(nil).Exec), varargs...)
 }
 
@@ -142,7 +138,7 @@ func (m *MockTx) Prepare(ctx context.Context, name, sql string) (*pgconn.Stateme
 }
 
 // Prepare indicates an expected call of Prepare.
-func (mr *MockTxMockRecorder) Prepare(ctx, name, sql any) *gomock.Call {
+func (mr *MockTxMockRecorder) Prepare(ctx, name, sql interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockTx)(nil).Prepare), ctx, name, sql)
 }
@@ -150,7 +146,7 @@ func (mr *MockTxMockRecorder) Prepare(ctx, name, sql any) *gomock.Call {
 // Query mocks base method.
 func (m *MockTx) Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error) {
 	m.ctrl.T.Helper()
-	varargs := []any{ctx, sql}
+	varargs := []interface{}{ctx, sql}
 	for _, a := range args {
 		varargs = append(varargs, a)
 	}
@@ -161,16 +157,16 @@ func (m *MockTx) Query(ctx context.Context, sql string, args ...any) (pgx.Rows,
 }
 
 // Query indicates an expected call of Query.
-func (mr *MockTxMockRecorder) Query(ctx, sql any, args ...any) *gomock.Call {
+func (mr *MockTxMockRecorder) Query(ctx, sql interface{}, args ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	varargs := append([]any{ctx, sql}, args...)
+	varargs := append([]interface{}{ctx, sql}, args...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockTx)(nil).Query), varargs...)
 }
 
 // QueryRow mocks base method.
 func (m *MockTx) QueryRow(ctx context.Context, sql string, args ...any) pgx.Row {
 	m.ctrl.T.Helper()
-	varargs := []any{ctx, sql}
+	varargs := []interface{}{ctx, sql}
 	for _, a := range args {
 		varargs = append(varargs, a)
 	}
@@ -180,9 +176,9 @@ func (m *MockTx) QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
 }
 
 // QueryRow indicates an expected call of QueryRow.
-func (mr *MockTxMockRecorder) QueryRow(ctx, sql any, args ...any) *gomock.Call {
+func (mr *MockTxMockRecorder) QueryRow(ctx, sql interface{}, args ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	varargs := append([]any{ctx, sql}, args...)
+	varargs := append([]interface{}{ctx, sql}, args...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockTx)(nil).QueryRow), varargs...)
 }
 
@@ -195,7 +191,7 @@ func (m *MockTx) Rollback(ctx context.Context) error {
 }
 
 // Rollback indicates an expected call of Rollback.
-func (mr *MockTxMockRecorder) Rollback(ctx any) *gomock.Call {
+func (mr *MockTxMockRecorder) Rollback(ctx interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTx)(nil).Rollback), ctx)
 }
@@ -209,7 +205,7 @@ func (m *MockTx) SendBatch(ctx context.Context, b *pgx.Batch) pgx.BatchResults {
 }
 
 // SendBatch indicates an expected call of SendBatch.
-func (mr *MockTxMockRecorder) SendBatch(ctx, b any) *gomock.Call {
+func (mr *MockTxMockRecorder) SendBatch(ctx, b interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatch", reflect.TypeOf((*MockTx)(nil).SendBatch), ctx, b)
 }
diff --git a/pkg/mock/pgx/mock_pgxconn_iface.go b/pkg/mock/pgx/mock_pgxconn_iface.go
index ae82835..8ef14a8 100644
--- a/pkg/mock/pgx/mock_pgxconn_iface.go
+++ b/pkg/mock/pgx/mock_pgxconn_iface.go
@@ -1,10 +1,6 @@
 // Code generated by MockGen. DO NOT EDIT.
 // Source: pkg/datatransfers/data_transfers.go
-//
-// Generated by this command:
-//
-//	mockgen -source=pkg/datatransfers/data_transfers.go -destination=pkg/mock/pgx/mock_pgxconn_iface.go -package=mock
-//
+
 // Package mock is a generated GoMock package.
 package mock
 
@@ -12,8 +8,8 @@ import (
 	context "context"
 	reflect "reflect"
 
+	gomock "github.com/golang/mock/gomock"
 	pgx "github.com/jackc/pgx/v5"
-	gomock "go.uber.org/mock/gomock"
 )
 
 // MockpgxConnIface is a mock of pgxConnIface interface.
@@ -49,7 +45,7 @@ func (m *MockpgxConnIface) Begin(arg0 context.Context) (pgx.Tx, error) {
 }
 
 // Begin indicates an expected call of Begin.
-func (mr *MockpgxConnIfaceMockRecorder) Begin(arg0 any) *gomock.Call {
+func (mr *MockpgxConnIfaceMockRecorder) Begin(arg0 interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockpgxConnIface)(nil).Begin), arg0)
 }
@@ -64,7 +60,7 @@ func (m *MockpgxConnIface) BeginTx(arg0 context.Context, arg1 pgx.TxOptions) (pg
 }
 
 // BeginTx indicates an expected call of BeginTx.
-func (mr *MockpgxConnIfaceMockRecorder) BeginTx(arg0, arg1 any) *gomock.Call {
+func (mr *MockpgxConnIfaceMockRecorder) BeginTx(arg0, arg1 interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockpgxConnIface)(nil).BeginTx), arg0, arg1)
 }
@@ -78,7 +74,7 @@ func (m *MockpgxConnIface) Close(arg0 context.Context) error {
 }
 
 // Close indicates an expected call of Close.
-func (mr *MockpgxConnIfaceMockRecorder) Close(arg0 any) *gomock.Call {
+func (mr *MockpgxConnIfaceMockRecorder) Close(arg0 interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockpgxConnIface)(nil).Close), arg0)
 }
diff --git a/pkg/mock/shard/mock_shard.go b/pkg/mock/shard/mock_shard.go
index 8ccddc2..2dd1b26 100644
--- a/pkg/mock/shard/mock_shard.go
+++ b/pkg/mock/shard/mock_shard.go
@@ -1,10 +1,6 @@
 // Code generated by MockGen. DO NOT EDIT.
 // Source: ./pkg/shard/shard.go
-//
-// Generated by this command:
-//
-//	mockgen -source=./pkg/shard/shard.go -destination=pkg/mock/shard/mock_shard.go -package=mock
-//
+
 // Package mock is a generated GoMock package.
 package mock
 
@@ -12,13 +8,13 @@ import (
 	tls "crypto/tls"
 	reflect "reflect"
 
+	gomock "github.com/golang/mock/gomock"
 	pgproto3 "github.com/jackc/pgx/v5/pgproto3"
 	config "github.com/pg-sharding/spqr/pkg/config"
 	conn "github.com/pg-sharding/spqr/pkg/conn"
 	kr "github.com/pg-sharding/spqr/pkg/models/kr"
 	shard "github.com/pg-sharding/spqr/pkg/shard"
 	txstatus "github.com/pg-sharding/spqr/pkg/txstatus"
-	gomock "go.uber.org/mock/gomock"
 )
 
 // MockShardinfo is a mock of Shardinfo interface.
@@ -337,7 +333,7 @@ func (m *MockShard) AddTLSConf(cfg *tls.Config) error {
 }
 
 // AddTLSConf indicates an expected call of AddTLSConf.
-func (mr *MockShardMockRecorder) AddTLSConf(cfg any) *gomock.Call {
+func (mr *MockShardMockRecorder) AddTLSConf(cfg interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTLSConf", reflect.TypeOf((*MockShard)(nil).AddTLSConf), cfg)
 }
@@ -379,7 +375,7 @@ func (m *MockShard) Cleanup(rule *config.FrontendRule) error {
 }
 
 // Cleanup indicates an expected call of Cleanup.
-func (mr *MockShardMockRecorder) Cleanup(rule any) *gomock.Call {
+func (mr *MockShardMockRecorder) Cleanup(rule interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockShard)(nil).Cleanup), rule)
 }
@@ -534,7 +530,7 @@ func (m *MockShard) Send(query pgproto3.FrontendMessage) error {
 }
 
 // Send indicates an expected call of Send.
-func (mr *MockShardMockRecorder) Send(query any) *gomock.Call {
+func (mr *MockShardMockRecorder) Send(query interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockShard)(nil).Send), query)
 }
@@ -546,7 +542,7 @@ func (m *MockShard) SetTxStatus(status txstatus.TXStatus) {
 }
 
 // SetTxStatus indicates an expected call of SetTxStatus.
-func (mr *MockShardMockRecorder) SetTxStatus(status any) *gomock.Call {
+func (mr *MockShardMockRecorder) SetTxStatus(status interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTxStatus", reflect.TypeOf((*MockShard)(nil).SetTxStatus), status)
 }
@@ -653,7 +649,7 @@ func (m *MockShardIterator) ForEach(cb func(shard.Shardinfo) error) error {
 }
 
 // ForEach indicates an expected call of ForEach.
-func (mr *MockShardIteratorMockRecorder) ForEach(cb any) *gomock.Call {
+func (mr *MockShardIteratorMockRecorder) ForEach(cb interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEach", reflect.TypeOf((*MockShardIterator)(nil).ForEach), cb)
 }
diff --git a/pkg/models/dataspaces/keyspacemgr.go b/pkg/models/dataspaces/keyspacemgr.go
index b26e982..e189c34 100644
--- a/pkg/models/dataspaces/keyspacemgr.go
+++ b/pkg/models/dataspaces/keyspacemgr.go
@@ -6,5 +6,6 @@ import (
 
 type DataspaceMgr interface {
 	ListDataspace(ctx context.Context) ([]*Dataspace, error)
-	AddDataspace(ctx context.Context, ks *Dataspace) error
+	AddDataspace(ctx context.Context, ds *Dataspace) error
+	DropDataspace(ctx context.Context, ds *Dataspace) error
 }
diff --git a/pkg/models/kr/keyrange.go b/pkg/models/kr/keyrange.go
index 6540c87..6758c32 100644
--- a/pkg/models/kr/keyrange.go
+++ b/pkg/models/kr/keyrange.go
@@ -18,6 +18,7 @@ type KeyRange struct {
 	UpperBound []byte
 	ShardID    string
 	ID         string
+	Dataspace  string
 }
 
 func CmpRangesLess(kr []byte, other []byte) bool {
@@ -50,6 +51,7 @@ func KeyRangeFromDB(kr *qdb.KeyRange) *KeyRange {
 		UpperBound: kr.UpperBound,
 		ShardID:    kr.ShardID,
 		ID:         kr.KeyRangeID,
+		Dataspace:  kr.DataspaceId,
 	}
 }
 
@@ -62,6 +64,7 @@ func KeyRangeFromSQL(kr *spqrparser.KeyRangeDefinition) *KeyRange {
 		UpperBound: kr.UpperBound,
 		ShardID:    kr.ShardID,
 		ID:         kr.KeyRangeID,
+		Dataspace:  kr.Dataspace,
 	}
 }
 
@@ -80,10 +83,11 @@ func KeyRangeFromProto(kr *proto.KeyRangeInfo) *KeyRange {
 
 func (kr *KeyRange) ToDB() *qdb.KeyRange {
 	return &qdb.KeyRange{
-		LowerBound: kr.LowerBound,
-		UpperBound: kr.UpperBound,
-		ShardID:    kr.ShardID,
-		KeyRangeID: kr.ID,
+		LowerBound:  kr.LowerBound,
+		UpperBound:  kr.UpperBound,
+		ShardID:     kr.ShardID,
+		KeyRangeID:  kr.ID,
+		DataspaceId: kr.Dataspace,
 	}
 }
 
diff --git a/pkg/models/kr/keyrangemgr.go b/pkg/models/kr/keyrangemgr.go
index 77b6bab..3d70fd2 100644
--- a/pkg/models/kr/keyrangemgr.go
+++ b/pkg/models/kr/keyrangemgr.go
@@ -19,7 +19,7 @@ type UniteKeyRange struct {
 }
 
 type KeyRangeMgr interface {
-	ListKeyRanges(ctx context.Context) ([]*KeyRange, error)
+	ListKeyRanges(ctx context.Context, dataspace string) ([]*KeyRange, error)
 	AddKeyRange(ctx context.Context, kr *KeyRange) error
 	LockKeyRange(ctx context.Context, krid string) (*KeyRange, error)
 	UnlockKeyRange(ctx context.Context, krid string) error
diff --git a/pkg/models/shrule/shardingrule.go b/pkg/models/shrule/shardingrule.go
index 87b678c..2d624bc 100644
--- a/pkg/models/shrule/shardingrule.go
+++ b/pkg/models/shrule/shardingrule.go
@@ -23,13 +23,15 @@ type ShardingRule struct {
 	Id        string
 	TableName string
 	entries   []ShardingRuleEntry
+	Dataspace string
 }
 
-func NewShardingRule(id string, tableName string, entries []ShardingRuleEntry) *ShardingRule {
+func NewShardingRule(id string, tableName string, entries []ShardingRuleEntry, dataspaceId string) *ShardingRule {
 	return &ShardingRule{
 		Id:        id,
 		TableName: tableName,
 		entries:   entries,
+		Dataspace: dataspaceId,
 	}
 }
 
@@ -55,13 +57,14 @@ func (s *ShardingRule) String() string {
 		return ret
 	}()
 
-	return fmt.Sprintf("sharding rule %v for table (%v) with columns %+v", s.Id, tableName, entries)
+	return fmt.Sprintf("sharding rule %v for table (%v) with columns %+v for dataspace %v", s.Id, tableName, entries, s.Dataspace)
 }
 
 func ShardingRuleFromDB(rule *qdb.ShardingRule) *ShardingRule {
 	ret := &ShardingRule{
 		Id:        rule.ID,
 		TableName: rule.TableName,
+		Dataspace: rule.DataspaceId,
 	}
 	for _, el := range rule.Entries {
 		ret.entries = append(ret.entries, ShardingRuleEntry{
@@ -75,8 +78,9 @@ func ShardingRuleFromDB(rule *qdb.ShardingRule) *ShardingRule {
 
 func ShardingRuleToDB(rule *ShardingRule) *qdb.ShardingRule {
 	ret := &qdb.ShardingRule{
-		ID:        rule.Id,
-		TableName: rule.TableName,
+		ID:          rule.Id,
+		TableName:   rule.TableName,
+		DataspaceId: rule.Dataspace,
 	}
 	for _, el := range rule.entries {
 		ret.Entries = append(ret.Entries, qdb.ShardingRuleEntry{
diff --git a/pkg/models/shrule/shardingrulemgr.go b/pkg/models/shrule/shardingrulemgr.go
index e4ee039..bbf9fdd 100644
--- a/pkg/models/shrule/shardingrulemgr.go
+++ b/pkg/models/shrule/shardingrulemgr.go
@@ -6,5 +6,5 @@ type ShardingRulesMgr interface {
 	AddShardingRule(ctx context.Context, rule *ShardingRule) error
 	DropShardingRule(ctx context.Context, id string) error
 	DropShardingRuleAll(ctx context.Context) ([]*ShardingRule, error)
-	ListShardingRules(ctx context.Context) ([]*ShardingRule, error)
+	ListShardingRules(ctx context.Context, dataspace string) ([]*ShardingRule, error)
 }
diff --git a/pkg/protos/backend_connections.pb.go b/pkg/protos/backend_connections.pb.go
index 8f4ba63..edc9d9e 100644
--- a/pkg/protos/backend_connections.pb.go
+++ b/pkg/protos/backend_connections.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go. DO NOT EDIT.
 // versions:
-// 	protoc-gen-go v1.27.1
-// 	protoc        v4.23.4
+// 	protoc-gen-go v1.28.1
+// 	protoc        v3.6.1
 // source: protos/backend_connections.proto
 
 package proto
diff --git a/pkg/protos/backend_connections_grpc.pb.go b/pkg/protos/backend_connections_grpc.pb.go
index 7f39e4b..3ddae04 100644
--- a/pkg/protos/backend_connections_grpc.pb.go
+++ b/pkg/protos/backend_connections_grpc.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go-grpc. DO NOT EDIT.
 // versions:
-// - protoc-gen-go-grpc v1.3.0
-// - protoc             v4.23.4
+// - protoc-gen-go-grpc v1.2.0
+// - protoc             v3.6.1
 // source: protos/backend_connections.proto
 
 package proto
@@ -18,10 +18,6 @@ import (
 // Requires gRPC-Go v1.32.0 or later.
 const _ = grpc.SupportPackageIsVersion7
 
-const (
-	BackendConnectionsService_ListBackendConnections_FullMethodName = "/spqr.BackendConnectionsService/ListBackendConnections"
-)
-
 // BackendConnectionsServiceClient is the client API for BackendConnectionsService service.
 //
 // For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
@@ -39,7 +35,7 @@ func NewBackendConnectionsServiceClient(cc grpc.ClientConnInterface) BackendConn
 
 func (c *backendConnectionsServiceClient) ListBackendConnections(ctx context.Context, in *ListBackendConnectionsRequest, opts ...grpc.CallOption) (*ListBackendConntionsReply, error) {
 	out := new(ListBackendConntionsReply)
-	err := c.cc.Invoke(ctx, BackendConnectionsService_ListBackendConnections_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.BackendConnectionsService/ListBackendConnections", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -85,7 +81,7 @@ func _BackendConnectionsService_ListBackendConnections_Handler(srv interface{},
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: BackendConnectionsService_ListBackendConnections_FullMethodName,
+		FullMethod: "/spqr.BackendConnectionsService/ListBackendConnections",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(BackendConnectionsServiceServer).ListBackendConnections(ctx, req.(*ListBackendConnectionsRequest))
diff --git a/pkg/protos/balancer.pb.go b/pkg/protos/balancer.pb.go
index 30a575b..207807c 100644
--- a/pkg/protos/balancer.pb.go
+++ b/pkg/protos/balancer.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go. DO NOT EDIT.
 // versions:
-// 	protoc-gen-go v1.27.1
-// 	protoc        v4.23.4
+// 	protoc-gen-go v1.28.1
+// 	protoc        v3.6.1
 // source: protos/balancer.proto
 
 package proto
diff --git a/pkg/protos/balancer_grpc.pb.go b/pkg/protos/balancer_grpc.pb.go
index 201e5fd..ccc4864 100644
--- a/pkg/protos/balancer_grpc.pb.go
+++ b/pkg/protos/balancer_grpc.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go-grpc. DO NOT EDIT.
 // versions:
-// - protoc-gen-go-grpc v1.3.0
-// - protoc             v4.23.4
+// - protoc-gen-go-grpc v1.2.0
+// - protoc             v3.6.1
 // source: protos/balancer.proto
 
 package proto
@@ -18,10 +18,6 @@ import (
 // Requires gRPC-Go v1.32.0 or later.
 const _ = grpc.SupportPackageIsVersion7
 
-const (
-	BalancerService_ReloadRequired_FullMethodName = "/spqr.BalancerService/ReloadRequired"
-)
-
 // BalancerServiceClient is the client API for BalancerService service.
 //
 // For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
@@ -40,7 +36,7 @@ func NewBalancerServiceClient(cc grpc.ClientConnInterface) BalancerServiceClient
 
 func (c *balancerServiceClient) ReloadRequired(ctx context.Context, in *ReloadRequest, opts ...grpc.CallOption) (*ReloadReply, error) {
 	out := new(ReloadReply)
-	err := c.cc.Invoke(ctx, BalancerService_ReloadRequired_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.BalancerService/ReloadRequired", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -86,7 +82,7 @@ func _BalancerService_ReloadRequired_Handler(srv interface{}, ctx context.Contex
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: BalancerService_ReloadRequired_FullMethodName,
+		FullMethod: "/spqr.BalancerService/ReloadRequired",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(BalancerServiceServer).ReloadRequired(ctx, req.(*ReloadRequest))
diff --git a/pkg/protos/clients.pb.go b/pkg/protos/clients.pb.go
index 99a1f87..e1f07ff 100644
--- a/pkg/protos/clients.pb.go
+++ b/pkg/protos/clients.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go. DO NOT EDIT.
 // versions:
-// 	protoc-gen-go v1.27.1
-// 	protoc        v4.23.4
+// 	protoc-gen-go v1.28.1
+// 	protoc        v3.6.1
 // source: protos/clients.proto
 
 package proto
@@ -113,7 +113,8 @@ type ClientInfo struct {
 	ClientId string           `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
 	User     string           `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
 	Dbname   string           `protobuf:"bytes,3,opt,name=dbname,proto3" json:"dbname,omitempty"`
-	Shards   []*UsedShardInfo `protobuf:"bytes,4,rep,name=shards,proto3" json:"shards,omitempty"`
+	Dsname   string           `protobuf:"bytes,4,opt,name=dsname,proto3" json:"dsname,omitempty"`
+	Shards   []*UsedShardInfo `protobuf:"bytes,5,rep,name=shards,proto3" json:"shards,omitempty"`
 }
 
 func (x *ClientInfo) Reset() {
@@ -169,6 +170,13 @@ func (x *ClientInfo) GetDbname() string {
 	return ""
 }
 
+func (x *ClientInfo) GetDsname() string {
+	if x != nil {
+		return x.Dsname
+	}
+	return ""
+}
+
 func (x *ClientInfo) GetShards() []*UsedShardInfo {
 	if x != nil {
 		return x.Shards
@@ -280,29 +288,30 @@ var file_protos_clients_proto_rawDesc = []byte{
 	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
 	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x43,
 	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e,
-	0x74, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
+	0x74, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
 	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
 	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
 	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73,
 	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
-	0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x68,
-	0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x70, 0x71,
-	0x72, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
-	0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x22, 0x40, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x64, 0x53,
-	0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
-	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x70, 0x71,
-	0x72, 0x2e, 0x44, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
-	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x2b, 0x0a, 0x0d, 0x44, 0x42, 0x49,
-	0x6e, 0x73, 0x74, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
-	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
-	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x56, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
-	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x4c,
-	0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x73, 0x70, 0x71,
-	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
-	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
-	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x0c,
-	0x5a, 0x0a, 0x73, 0x70, 0x71, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
-	0x6f, 0x74, 0x6f, 0x33,
+	0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x73,
+	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x73, 0x6e, 0x61,
+	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
+	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x53, 0x68,
+	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x22,
+	0x40, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
+	0x12, 0x2f, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
+	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x44, 0x42, 0x49, 0x6e, 0x73, 0x74,
+	0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
+	0x65, 0x22, 0x2b, 0x0a, 0x0d, 0x44, 0x42, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x63, 0x65, 0x49, 0x6e,
+	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
+	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x56,
+	0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76,
+	0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
+	0x74, 0x73, 0x12, 0x18, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
+	0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73,
+	0x70, 0x71, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52,
+	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x73, 0x70, 0x71, 0x72, 0x2f, 0x70,
+	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
 }
 
 var (
diff --git a/pkg/protos/clients_grpc.pb.go b/pkg/protos/clients_grpc.pb.go
index 04658d5..4c072e3 100644
--- a/pkg/protos/clients_grpc.pb.go
+++ b/pkg/protos/clients_grpc.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go-grpc. DO NOT EDIT.
 // versions:
-// - protoc-gen-go-grpc v1.3.0
-// - protoc             v4.23.4
+// - protoc-gen-go-grpc v1.2.0
+// - protoc             v3.6.1
 // source: protos/clients.proto
 
 package proto
@@ -18,10 +18,6 @@ import (
 // Requires gRPC-Go v1.32.0 or later.
 const _ = grpc.SupportPackageIsVersion7
 
-const (
-	ClientInfoService_ListClients_FullMethodName = "/spqr.ClientInfoService/ListClients"
-)
-
 // ClientInfoServiceClient is the client API for ClientInfoService service.
 //
 // For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
@@ -39,7 +35,7 @@ func NewClientInfoServiceClient(cc grpc.ClientConnInterface) ClientInfoServiceCl
 
 func (c *clientInfoServiceClient) ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsReply, error) {
 	out := new(ListClientsReply)
-	err := c.cc.Invoke(ctx, ClientInfoService_ListClients_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.ClientInfoService/ListClients", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -84,7 +80,7 @@ func _ClientInfoService_ListClients_Handler(srv interface{}, ctx context.Context
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: ClientInfoService_ListClients_FullMethodName,
+		FullMethod: "/spqr.ClientInfoService/ListClients",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(ClientInfoServiceServer).ListClients(ctx, req.(*ListClientsRequest))
diff --git a/pkg/protos/coordinator.pb.go b/pkg/protos/coordinator.pb.go
index 384225b..269e6e3 100644
--- a/pkg/protos/coordinator.pb.go
+++ b/pkg/protos/coordinator.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go. DO NOT EDIT.
 // versions:
-// 	protoc-gen-go v1.27.1
-// 	protoc        v4.23.4
+// 	protoc-gen-go v1.28.1
+// 	protoc        v3.6.1
 // source: protos/coordinator.proto
 
 package proto
diff --git a/pkg/protos/coordinator_grpc.pb.go b/pkg/protos/coordinator_grpc.pb.go
index 9d88068..beea090 100644
--- a/pkg/protos/coordinator_grpc.pb.go
+++ b/pkg/protos/coordinator_grpc.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go-grpc. DO NOT EDIT.
 // versions:
-// - protoc-gen-go-grpc v1.3.0
-// - protoc             v4.23.4
+// - protoc-gen-go-grpc v1.2.0
+// - protoc             v3.6.1
 // source: protos/coordinator.proto
 
 package proto
@@ -18,13 +18,6 @@ import (
 // Requires gRPC-Go v1.32.0 or later.
 const _ = grpc.SupportPackageIsVersion7
 
-const (
-	TopologyService_OpenRouter_FullMethodName        = "/spqr.TopologyService/OpenRouter"
-	TopologyService_GetRouterStatus_FullMethodName   = "/spqr.TopologyService/GetRouterStatus"
-	TopologyService_CloseRouter_FullMethodName       = "/spqr.TopologyService/CloseRouter"
-	TopologyService_UpdateCoordinator_FullMethodName = "/spqr.TopologyService/UpdateCoordinator"
-)
-
 // TopologyServiceClient is the client API for TopologyService service.
 //
 // For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
@@ -45,7 +38,7 @@ func NewTopologyServiceClient(cc grpc.ClientConnInterface) TopologyServiceClient
 
 func (c *topologyServiceClient) OpenRouter(ctx context.Context, in *OpenRouterRequest, opts ...grpc.CallOption) (*OpenRouterReply, error) {
 	out := new(OpenRouterReply)
-	err := c.cc.Invoke(ctx, TopologyService_OpenRouter_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.TopologyService/OpenRouter", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -54,7 +47,7 @@ func (c *topologyServiceClient) OpenRouter(ctx context.Context, in *OpenRouterRe
 
 func (c *topologyServiceClient) GetRouterStatus(ctx context.Context, in *GetRouterStatusRequest, opts ...grpc.CallOption) (*GetRouterStatusReply, error) {
 	out := new(GetRouterStatusReply)
-	err := c.cc.Invoke(ctx, TopologyService_GetRouterStatus_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.TopologyService/GetRouterStatus", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -63,7 +56,7 @@ func (c *topologyServiceClient) GetRouterStatus(ctx context.Context, in *GetRout
 
 func (c *topologyServiceClient) CloseRouter(ctx context.Context, in *CloseRouterRequest, opts ...grpc.CallOption) (*CloseRouterReply, error) {
 	out := new(CloseRouterReply)
-	err := c.cc.Invoke(ctx, TopologyService_CloseRouter_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.TopologyService/CloseRouter", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -72,7 +65,7 @@ func (c *topologyServiceClient) CloseRouter(ctx context.Context, in *CloseRouter
 
 func (c *topologyServiceClient) UpdateCoordinator(ctx context.Context, in *UpdateCoordinatorRequest, opts ...grpc.CallOption) (*UpdateCoordinatorResponse, error) {
 	out := new(UpdateCoordinatorResponse)
-	err := c.cc.Invoke(ctx, TopologyService_UpdateCoordinator_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.TopologyService/UpdateCoordinator", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -129,7 +122,7 @@ func _TopologyService_OpenRouter_Handler(srv interface{}, ctx context.Context, d
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: TopologyService_OpenRouter_FullMethodName,
+		FullMethod: "/spqr.TopologyService/OpenRouter",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(TopologyServiceServer).OpenRouter(ctx, req.(*OpenRouterRequest))
@@ -147,7 +140,7 @@ func _TopologyService_GetRouterStatus_Handler(srv interface{}, ctx context.Conte
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: TopologyService_GetRouterStatus_FullMethodName,
+		FullMethod: "/spqr.TopologyService/GetRouterStatus",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(TopologyServiceServer).GetRouterStatus(ctx, req.(*GetRouterStatusRequest))
@@ -165,7 +158,7 @@ func _TopologyService_CloseRouter_Handler(srv interface{}, ctx context.Context,
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: TopologyService_CloseRouter_FullMethodName,
+		FullMethod: "/spqr.TopologyService/CloseRouter",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(TopologyServiceServer).CloseRouter(ctx, req.(*CloseRouterRequest))
@@ -183,7 +176,7 @@ func _TopologyService_UpdateCoordinator_Handler(srv interface{}, ctx context.Con
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: TopologyService_UpdateCoordinator_FullMethodName,
+		FullMethod: "/spqr.TopologyService/UpdateCoordinator",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(TopologyServiceServer).UpdateCoordinator(ctx, req.(*UpdateCoordinatorRequest))
diff --git a/pkg/protos/key_range.pb.go b/pkg/protos/key_range.pb.go
index 17de208..5f879c1 100644
--- a/pkg/protos/key_range.pb.go
+++ b/pkg/protos/key_range.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go. DO NOT EDIT.
 // versions:
-// 	protoc-gen-go v1.27.1
-// 	protoc        v4.23.4
+// 	protoc-gen-go v1.28.1
+// 	protoc        v3.6.1
 // source: protos/key_range.proto
 
 package proto
@@ -189,6 +189,8 @@ type ListKeyRangeRequest struct {
 	state         protoimpl.MessageState
 	sizeCache     protoimpl.SizeCache
 	unknownFields protoimpl.UnknownFields
+
+	Dataspace string `protobuf:"bytes,1,opt,name=dataspace,proto3" json:"dataspace,omitempty"`
 }
 
 func (x *ListKeyRangeRequest) Reset() {
@@ -223,6 +225,13 @@ func (*ListKeyRangeRequest) Descriptor() ([]byte, []int) {
 	return file_protos_key_range_proto_rawDescGZIP(), []int{2}
 }
 
+func (x *ListKeyRangeRequest) GetDataspace() string {
+	if x != nil {
+		return x.Dataspace
+	}
+	return ""
+}
+
 type AddKeyRangeRequest struct {
 	state         protoimpl.MessageState
 	sizeCache     protoimpl.SizeCache
@@ -338,7 +347,8 @@ type MergeKeyRangeRequest struct {
 	sizeCache     protoimpl.SizeCache
 	unknownFields protoimpl.UnknownFields
 
-	Bound []byte `protobuf:"bytes,1,opt,name=bound,proto3" json:"bound,omitempty"`
+	Bound     []byte `protobuf:"bytes,1,opt,name=bound,proto3" json:"bound,omitempty"`
+	Dataspace string `protobuf:"bytes,2,opt,name=dataspace,proto3" json:"dataspace,omitempty"`
 }
 
 func (x *MergeKeyRangeRequest) Reset() {
@@ -380,6 +390,13 @@ func (x *MergeKeyRangeRequest) GetBound() []byte {
 	return nil
 }
 
+func (x *MergeKeyRangeRequest) GetDataspace() string {
+	if x != nil {
+		return x.Dataspace
+	}
+	return ""
+}
+
 type MoveKeyRangeRequest struct {
 	state         protoimpl.MessageState
 	sizeCache     protoimpl.SizeCache
@@ -865,108 +882,111 @@ var file_protos_key_range_proto_rawDesc = []byte{
 	0x08, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x72, 0x69,
 	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x72, 0x69, 0x64, 0x12, 0x18, 0x0a,
 	0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
-	0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4b,
-	0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4e,
-	0x0a, 0x12, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
-	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67,
-	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
-	0x70, 0x71, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
-	0x52, 0x0c, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x83,
-	0x01, 0x0a, 0x14, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
-	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x72,
-	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
-	0x12, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49,
-	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66,
-	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
-	0x52, 0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
-	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72,
-	0x63, 0x65, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x14, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79,
-	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
-	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6f, 0x75,
-	0x6e, 0x64, 0x22, 0x64, 0x0a, 0x13, 0x4d, 0x6f, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e,
-	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x6b, 0x65, 0x79,
-	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
-	0x70, 0x71, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
-	0x52, 0x08, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f,
-	0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
-	0x6f, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x72, 0x6f, 0x70,
-	0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
-	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
-	0x19, 0x0a, 0x17, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e,
-	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x18, 0x44, 0x72,
-	0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65,
-	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x61,
-	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x70, 0x71, 0x72,
-	0x2e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6b,
-	0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x6b, 0x4b,
-	0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
-	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x27,
-	0x0a, 0x15, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
-	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
-	0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4b, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x52, 0x61,
-	0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x5f,
-	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
-	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67,
-	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73,
-	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x30, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65,
-	0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
-	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
-	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
-	0x65, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
-	0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
-	0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x36, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
-	0x65, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e,
-	0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x18, 0x01, 0x20,
-	0x03, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x2a, 0x2b,
-	0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
-	0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
-	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x32, 0xbd, 0x05, 0x0a, 0x0f,
-	0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
-	0x40, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
-	0x19, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x61,
-	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x73, 0x70, 0x71,
-	0x72, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
-	0x00, 0x12, 0x3e, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67,
-	0x65, 0x12, 0x19, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x4b, 0x65, 0x79,
-	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73,
-	0x70, 0x71, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
-	0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
-	0x12, 0x18, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x61,
-	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x70, 0x71,
-	0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
-	0x3e, 0x0a, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
-	0x19, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x61,
-	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x70, 0x71,
-	0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
-	0x53, 0x0a, 0x10, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e,
-	0x67, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x41,
-	0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
-	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x6c,
+	0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4b,
+	0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
+	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
+	0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x4e, 0x0a, 0x12,
+	0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
+	0x73, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
+	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x70, 0x71,
+	0x72, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
+	0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x83, 0x01, 0x0a,
+	0x14, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
+	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x61, 0x6e,
+	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
+	0x73, 0x70, 0x71, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66,
+	0x6f, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
+	0x14, 0x0a, 0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
+	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
+	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
+	0x49, 0x64, 0x22, 0x4a, 0x0a, 0x14, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x61,
+	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f,
+	0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64,
+	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
+	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x64,
+	0x0a, 0x13, 0x4d, 0x6f, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
+	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x61, 0x6e,
+	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e,
+	0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6b, 0x65,
+	0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x53, 0x68, 0x61, 0x72,
+	0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x53, 0x68, 0x61,
+	0x72, 0x64, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x72, 0x6f, 0x70, 0x4b, 0x65, 0x79, 0x52,
+	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
+	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x44,
+	0x72, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52,
+	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x18, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x6c,
 	0x6c, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
-	0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4b, 0x65,
-	0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x55, 0x6e,
+	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
+	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4b, 0x65, 0x79,
+	0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x52, 0x61,
+	0x6e, 0x67, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x52, 0x61,
+	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
+	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x55, 0x6e,
 	0x6c, 0x6f, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
+	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
+	0x02, 0x69, 0x64, 0x22, 0x4b, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
+	0x65, 0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67,
+	0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
+	0x73, 0x70, 0x71, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66,
+	0x6f, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f,
+	0x22, 0x30, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
+	0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
+	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
+	0x49, 0x64, 0x22, 0x2e, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4b, 0x65, 0x79,
+	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
+	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x75,
+	0x6e, 0x64, 0x22, 0x36, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4b, 0x65, 0x79,
+	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x6b, 0x65,
+	0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
+	0x09, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x2a, 0x2b, 0x0a, 0x0e, 0x4b, 0x65,
+	0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06,
+	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49,
+	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x32, 0xbd, 0x05, 0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x52,
+	0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x4c,
+	0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x2e, 0x73, 0x70,
+	0x71, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
+	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4b, 0x65,
+	0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a,
+	0x0c, 0x4c, 0x6f, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x2e,
+	0x73, 0x70, 0x71, 0x72, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67,
+	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e,
+	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a,
+	0x0b, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x73,
+	0x70, 0x71, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
+	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4d, 0x6f,
+	0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c, 0x44,
+	0x72, 0x6f, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x2e, 0x73, 0x70,
+	0x71, 0x72, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
+	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4d, 0x6f,
+	0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x10, 0x44,
+	0x72, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
+	0x1d, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x4b, 0x65,
+	0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
+	0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x79,
+	0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
+	0x12, 0x42, 0x0a, 0x0e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e,
+	0x67, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
+	0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
+	0x11, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70,
+	0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4b, 0x65, 0x79,
+	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x53, 0x70, 0x6c,
+	0x69, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
+	0x74, 0x1a, 0x11, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52,
+	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4b,
+	0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4d,
+	0x65, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
+	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
+	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x65,
+	0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e,
+	0x4d, 0x6f, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
 	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
-	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x53, 0x70, 0x6c, 0x69,
-	0x74, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x2e, 0x73, 0x70, 0x71, 0x72,
-	0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
-	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4d, 0x6f, 0x64,
-	0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x4d, 0x65,
-	0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x2e, 0x73, 0x70,
-	0x71, 0x72, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
-	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4d,
-	0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c,
-	0x4d, 0x6f, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x2e, 0x73,
-	0x70, 0x71, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
-	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4d,
-	0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f,
-	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
-	0x1c, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4b, 0x65,
-	0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
-	0x73, 0x70, 0x71, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x52,
-	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x73,
-	0x70, 0x71, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
-	0x33,
+	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f,
+	0x6c, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x73, 0x70,
+	0x71, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e,
+	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x70, 0x71, 0x72,
+	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
+	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x73, 0x70, 0x71, 0x72, 0x2f,
+	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
 }
 
 var (
diff --git a/pkg/protos/key_range_grpc.pb.go b/pkg/protos/key_range_grpc.pb.go
index 51c18c4..b2f14c8 100644
--- a/pkg/protos/key_range_grpc.pb.go
+++ b/pkg/protos/key_range_grpc.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go-grpc. DO NOT EDIT.
 // versions:
-// - protoc-gen-go-grpc v1.3.0
-// - protoc             v4.23.4
+// - protoc-gen-go-grpc v1.2.0
+// - protoc             v3.6.1
 // source: protos/key_range.proto
 
 package proto
@@ -18,19 +18,6 @@ import (
 // Requires gRPC-Go v1.32.0 or later.
 const _ = grpc.SupportPackageIsVersion7
 
-const (
-	KeyRangeService_ListKeyRange_FullMethodName     = "/spqr.KeyRangeService/ListKeyRange"
-	KeyRangeService_LockKeyRange_FullMethodName     = "/spqr.KeyRangeService/LockKeyRange"
-	KeyRangeService_AddKeyRange_FullMethodName      = "/spqr.KeyRangeService/AddKeyRange"
-	KeyRangeService_DropKeyRange_FullMethodName     = "/spqr.KeyRangeService/DropKeyRange"
-	KeyRangeService_DropAllKeyRanges_FullMethodName = "/spqr.KeyRangeService/DropAllKeyRanges"
-	KeyRangeService_UnlockKeyRange_FullMethodName   = "/spqr.KeyRangeService/UnlockKeyRange"
-	KeyRangeService_SplitKeyRange_FullMethodName    = "/spqr.KeyRangeService/SplitKeyRange"
-	KeyRangeService_MergeKeyRange_FullMethodName    = "/spqr.KeyRangeService/MergeKeyRange"
-	KeyRangeService_MoveKeyRange_FullMethodName     = "/spqr.KeyRangeService/MoveKeyRange"
-	KeyRangeService_ResolveKeyRange_FullMethodName  = "/spqr.KeyRangeService/ResolveKeyRange"
-)
-
 // KeyRangeServiceClient is the client API for KeyRangeService service.
 //
 // For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
@@ -57,7 +44,7 @@ func NewKeyRangeServiceClient(cc grpc.ClientConnInterface) KeyRangeServiceClient
 
 func (c *keyRangeServiceClient) ListKeyRange(ctx context.Context, in *ListKeyRangeRequest, opts ...grpc.CallOption) (*KeyRangeReply, error) {
 	out := new(KeyRangeReply)
-	err := c.cc.Invoke(ctx, KeyRangeService_ListKeyRange_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.KeyRangeService/ListKeyRange", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -66,7 +53,7 @@ func (c *keyRangeServiceClient) ListKeyRange(ctx context.Context, in *ListKeyRan
 
 func (c *keyRangeServiceClient) LockKeyRange(ctx context.Context, in *LockKeyRangeRequest, opts ...grpc.CallOption) (*ModifyReply, error) {
 	out := new(ModifyReply)
-	err := c.cc.Invoke(ctx, KeyRangeService_LockKeyRange_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.KeyRangeService/LockKeyRange", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -75,7 +62,7 @@ func (c *keyRangeServiceClient) LockKeyRange(ctx context.Context, in *LockKeyRan
 
 func (c *keyRangeServiceClient) AddKeyRange(ctx context.Context, in *AddKeyRangeRequest, opts ...grpc.CallOption) (*ModifyReply, error) {
 	out := new(ModifyReply)
-	err := c.cc.Invoke(ctx, KeyRangeService_AddKeyRange_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.KeyRangeService/AddKeyRange", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -84,7 +71,7 @@ func (c *keyRangeServiceClient) AddKeyRange(ctx context.Context, in *AddKeyRange
 
 func (c *keyRangeServiceClient) DropKeyRange(ctx context.Context, in *DropKeyRangeRequest, opts ...grpc.CallOption) (*ModifyReply, error) {
 	out := new(ModifyReply)
-	err := c.cc.Invoke(ctx, KeyRangeService_DropKeyRange_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.KeyRangeService/DropKeyRange", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -93,7 +80,7 @@ func (c *keyRangeServiceClient) DropKeyRange(ctx context.Context, in *DropKeyRan
 
 func (c *keyRangeServiceClient) DropAllKeyRanges(ctx context.Context, in *DropAllKeyRangesRequest, opts ...grpc.CallOption) (*DropAllKeyRangesResponse, error) {
 	out := new(DropAllKeyRangesResponse)
-	err := c.cc.Invoke(ctx, KeyRangeService_DropAllKeyRanges_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.KeyRangeService/DropAllKeyRanges", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -102,7 +89,7 @@ func (c *keyRangeServiceClient) DropAllKeyRanges(ctx context.Context, in *DropAl
 
 func (c *keyRangeServiceClient) UnlockKeyRange(ctx context.Context, in *UnlockKeyRangeRequest, opts ...grpc.CallOption) (*ModifyReply, error) {
 	out := new(ModifyReply)
-	err := c.cc.Invoke(ctx, KeyRangeService_UnlockKeyRange_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.KeyRangeService/UnlockKeyRange", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -111,7 +98,7 @@ func (c *keyRangeServiceClient) UnlockKeyRange(ctx context.Context, in *UnlockKe
 
 func (c *keyRangeServiceClient) SplitKeyRange(ctx context.Context, in *SplitKeyRangeRequest, opts ...grpc.CallOption) (*ModifyReply, error) {
 	out := new(ModifyReply)
-	err := c.cc.Invoke(ctx, KeyRangeService_SplitKeyRange_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.KeyRangeService/SplitKeyRange", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -120,7 +107,7 @@ func (c *keyRangeServiceClient) SplitKeyRange(ctx context.Context, in *SplitKeyR
 
 func (c *keyRangeServiceClient) MergeKeyRange(ctx context.Context, in *MergeKeyRangeRequest, opts ...grpc.CallOption) (*ModifyReply, error) {
 	out := new(ModifyReply)
-	err := c.cc.Invoke(ctx, KeyRangeService_MergeKeyRange_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.KeyRangeService/MergeKeyRange", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -129,7 +116,7 @@ func (c *keyRangeServiceClient) MergeKeyRange(ctx context.Context, in *MergeKeyR
 
 func (c *keyRangeServiceClient) MoveKeyRange(ctx context.Context, in *MoveKeyRangeRequest, opts ...grpc.CallOption) (*ModifyReply, error) {
 	out := new(ModifyReply)
-	err := c.cc.Invoke(ctx, KeyRangeService_MoveKeyRange_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.KeyRangeService/MoveKeyRange", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -138,7 +125,7 @@ func (c *keyRangeServiceClient) MoveKeyRange(ctx context.Context, in *MoveKeyRan
 
 func (c *keyRangeServiceClient) ResolveKeyRange(ctx context.Context, in *ResolveKeyRangeRequest, opts ...grpc.CallOption) (*ResolveKeyRangeReply, error) {
 	out := new(ResolveKeyRangeReply)
-	err := c.cc.Invoke(ctx, KeyRangeService_ResolveKeyRange_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.KeyRangeService/ResolveKeyRange", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -219,7 +206,7 @@ func _KeyRangeService_ListKeyRange_Handler(srv interface{}, ctx context.Context,
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: KeyRangeService_ListKeyRange_FullMethodName,
+		FullMethod: "/spqr.KeyRangeService/ListKeyRange",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(KeyRangeServiceServer).ListKeyRange(ctx, req.(*ListKeyRangeRequest))
@@ -237,7 +224,7 @@ func _KeyRangeService_LockKeyRange_Handler(srv interface{}, ctx context.Context,
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: KeyRangeService_LockKeyRange_FullMethodName,
+		FullMethod: "/spqr.KeyRangeService/LockKeyRange",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(KeyRangeServiceServer).LockKeyRange(ctx, req.(*LockKeyRangeRequest))
@@ -255,7 +242,7 @@ func _KeyRangeService_AddKeyRange_Handler(srv interface{}, ctx context.Context,
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: KeyRangeService_AddKeyRange_FullMethodName,
+		FullMethod: "/spqr.KeyRangeService/AddKeyRange",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(KeyRangeServiceServer).AddKeyRange(ctx, req.(*AddKeyRangeRequest))
@@ -273,7 +260,7 @@ func _KeyRangeService_DropKeyRange_Handler(srv interface{}, ctx context.Context,
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: KeyRangeService_DropKeyRange_FullMethodName,
+		FullMethod: "/spqr.KeyRangeService/DropKeyRange",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(KeyRangeServiceServer).DropKeyRange(ctx, req.(*DropKeyRangeRequest))
@@ -291,7 +278,7 @@ func _KeyRangeService_DropAllKeyRanges_Handler(srv interface{}, ctx context.Cont
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: KeyRangeService_DropAllKeyRanges_FullMethodName,
+		FullMethod: "/spqr.KeyRangeService/DropAllKeyRanges",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(KeyRangeServiceServer).DropAllKeyRanges(ctx, req.(*DropAllKeyRangesRequest))
@@ -309,7 +296,7 @@ func _KeyRangeService_UnlockKeyRange_Handler(srv interface{}, ctx context.Contex
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: KeyRangeService_UnlockKeyRange_FullMethodName,
+		FullMethod: "/spqr.KeyRangeService/UnlockKeyRange",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(KeyRangeServiceServer).UnlockKeyRange(ctx, req.(*UnlockKeyRangeRequest))
@@ -327,7 +314,7 @@ func _KeyRangeService_SplitKeyRange_Handler(srv interface{}, ctx context.Context
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: KeyRangeService_SplitKeyRange_FullMethodName,
+		FullMethod: "/spqr.KeyRangeService/SplitKeyRange",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(KeyRangeServiceServer).SplitKeyRange(ctx, req.(*SplitKeyRangeRequest))
@@ -345,7 +332,7 @@ func _KeyRangeService_MergeKeyRange_Handler(srv interface{}, ctx context.Context
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: KeyRangeService_MergeKeyRange_FullMethodName,
+		FullMethod: "/spqr.KeyRangeService/MergeKeyRange",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(KeyRangeServiceServer).MergeKeyRange(ctx, req.(*MergeKeyRangeRequest))
@@ -363,7 +350,7 @@ func _KeyRangeService_MoveKeyRange_Handler(srv interface{}, ctx context.Context,
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: KeyRangeService_MoveKeyRange_FullMethodName,
+		FullMethod: "/spqr.KeyRangeService/MoveKeyRange",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(KeyRangeServiceServer).MoveKeyRange(ctx, req.(*MoveKeyRangeRequest))
@@ -381,7 +368,7 @@ func _KeyRangeService_ResolveKeyRange_Handler(srv interface{}, ctx context.Conte
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: KeyRangeService_ResolveKeyRange_FullMethodName,
+		FullMethod: "/spqr.KeyRangeService/ResolveKeyRange",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(KeyRangeServiceServer).ResolveKeyRange(ctx, req.(*ResolveKeyRangeRequest))
diff --git a/pkg/protos/operation.pb.go b/pkg/protos/operation.pb.go
index 45391b4..ae3407a 100644
--- a/pkg/protos/operation.pb.go
+++ b/pkg/protos/operation.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go. DO NOT EDIT.
 // versions:
-// 	protoc-gen-go v1.27.1
-// 	protoc        v4.23.4
+// 	protoc-gen-go v1.28.1
+// 	protoc        v3.6.1
 // source: protos/operation.proto
 
 package proto
diff --git a/pkg/protos/operation_grpc.pb.go b/pkg/protos/operation_grpc.pb.go
index b8953c0..3d7ef52 100644
--- a/pkg/protos/operation_grpc.pb.go
+++ b/pkg/protos/operation_grpc.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go-grpc. DO NOT EDIT.
 // versions:
-// - protoc-gen-go-grpc v1.3.0
-// - protoc             v4.23.4
+// - protoc-gen-go-grpc v1.2.0
+// - protoc             v3.6.1
 // source: protos/operation.proto
 
 package proto
@@ -18,10 +18,6 @@ import (
 // Requires gRPC-Go v1.32.0 or later.
 const _ = grpc.SupportPackageIsVersion7
 
-const (
-	OperationService_GetOperation_FullMethodName = "/spqr.OperationService/GetOperation"
-)
-
 // OperationServiceClient is the client API for OperationService service.
 //
 // For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
@@ -39,7 +35,7 @@ func NewOperationServiceClient(cc grpc.ClientConnInterface) OperationServiceClie
 
 func (c *operationServiceClient) GetOperation(ctx context.Context, in *GetOperationRequest, opts ...grpc.CallOption) (*GetOperationReply, error) {
 	out := new(GetOperationReply)
-	err := c.cc.Invoke(ctx, OperationService_GetOperation_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.OperationService/GetOperation", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -84,7 +80,7 @@ func _OperationService_GetOperation_Handler(srv interface{}, ctx context.Context
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: OperationService_GetOperation_FullMethodName,
+		FullMethod: "/spqr.OperationService/GetOperation",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(OperationServiceServer).GetOperation(ctx, req.(*GetOperationRequest))
diff --git a/pkg/protos/pools.pb.go b/pkg/protos/pools.pb.go
index 33ec0a5..ece47f3 100644
--- a/pkg/protos/pools.pb.go
+++ b/pkg/protos/pools.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go. DO NOT EDIT.
 // versions:
-// 	protoc-gen-go v1.27.1
-// 	protoc        v4.23.4
+// 	protoc-gen-go v1.28.1
+// 	protoc        v3.6.1
 // source: protos/pools.proto
 
 package proto
diff --git a/pkg/protos/pools_grpc.pb.go b/pkg/protos/pools_grpc.pb.go
index 3121d03..ca1a58b 100644
--- a/pkg/protos/pools_grpc.pb.go
+++ b/pkg/protos/pools_grpc.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go-grpc. DO NOT EDIT.
 // versions:
-// - protoc-gen-go-grpc v1.3.0
-// - protoc             v4.23.4
+// - protoc-gen-go-grpc v1.2.0
+// - protoc             v3.6.1
 // source: protos/pools.proto
 
 package proto
@@ -18,10 +18,6 @@ import (
 // Requires gRPC-Go v1.32.0 or later.
 const _ = grpc.SupportPackageIsVersion7
 
-const (
-	PoolService_ListPools_FullMethodName = "/spqr.PoolService/ListPools"
-)
-
 // PoolServiceClient is the client API for PoolService service.
 //
 // For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
@@ -39,7 +35,7 @@ func NewPoolServiceClient(cc grpc.ClientConnInterface) PoolServiceClient {
 
 func (c *poolServiceClient) ListPools(ctx context.Context, in *ListPoolsRequest, opts ...grpc.CallOption) (*ListPoolsResponse, error) {
 	out := new(ListPoolsResponse)
-	err := c.cc.Invoke(ctx, PoolService_ListPools_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.PoolService/ListPools", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -84,7 +80,7 @@ func _PoolService_ListPools_Handler(srv interface{}, ctx context.Context, dec fu
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: PoolService_ListPools_FullMethodName,
+		FullMethod: "/spqr.PoolService/ListPools",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(PoolServiceServer).ListPools(ctx, req.(*ListPoolsRequest))
diff --git a/pkg/protos/router.pb.go b/pkg/protos/router.pb.go
index 875a4c0..8ed86d9 100644
--- a/pkg/protos/router.pb.go
+++ b/pkg/protos/router.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go. DO NOT EDIT.
 // versions:
-// 	protoc-gen-go v1.27.1
-// 	protoc        v4.23.4
+// 	protoc-gen-go v1.28.1
+// 	protoc        v3.6.1
 // source: protos/router.proto
 
 package proto
diff --git a/pkg/protos/router_grpc.pb.go b/pkg/protos/router_grpc.pb.go
index 75c4113..0ce6579 100644
--- a/pkg/protos/router_grpc.pb.go
+++ b/pkg/protos/router_grpc.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go-grpc. DO NOT EDIT.
 // versions:
-// - protoc-gen-go-grpc v1.3.0
-// - protoc             v4.23.4
+// - protoc-gen-go-grpc v1.2.0
+// - protoc             v3.6.1
 // source: protos/router.proto
 
 package proto
@@ -18,13 +18,6 @@ import (
 // Requires gRPC-Go v1.32.0 or later.
 const _ = grpc.SupportPackageIsVersion7
 
-const (
-	RouterService_ListRouters_FullMethodName  = "/spqr.RouterService/ListRouters"
-	RouterService_AddRouter_FullMethodName    = "/spqr.RouterService/AddRouter"
-	RouterService_RemoveRouter_FullMethodName = "/spqr.RouterService/RemoveRouter"
-	RouterService_SyncMetadata_FullMethodName = "/spqr.RouterService/SyncMetadata"
-)
-
 // RouterServiceClient is the client API for RouterService service.
 //
 // For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
@@ -45,7 +38,7 @@ func NewRouterServiceClient(cc grpc.ClientConnInterface) RouterServiceClient {
 
 func (c *routerServiceClient) ListRouters(ctx context.Context, in *ListRoutersRequest, opts ...grpc.CallOption) (*ListRoutersReply, error) {
 	out := new(ListRoutersReply)
-	err := c.cc.Invoke(ctx, RouterService_ListRouters_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.RouterService/ListRouters", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -54,7 +47,7 @@ func (c *routerServiceClient) ListRouters(ctx context.Context, in *ListRoutersRe
 
 func (c *routerServiceClient) AddRouter(ctx context.Context, in *AddRouterRequest, opts ...grpc.CallOption) (*AddRouterReply, error) {
 	out := new(AddRouterReply)
-	err := c.cc.Invoke(ctx, RouterService_AddRouter_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.RouterService/AddRouter", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -63,7 +56,7 @@ func (c *routerServiceClient) AddRouter(ctx context.Context, in *AddRouterReques
 
 func (c *routerServiceClient) RemoveRouter(ctx context.Context, in *RemoveRouterRequest, opts ...grpc.CallOption) (*RemoveRouterReply, error) {
 	out := new(RemoveRouterReply)
-	err := c.cc.Invoke(ctx, RouterService_RemoveRouter_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.RouterService/RemoveRouter", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -72,7 +65,7 @@ func (c *routerServiceClient) RemoveRouter(ctx context.Context, in *RemoveRouter
 
 func (c *routerServiceClient) SyncMetadata(ctx context.Context, in *SyncMetadataRequest, opts ...grpc.CallOption) (*SyncMetadataReply, error) {
 	out := new(SyncMetadataReply)
-	err := c.cc.Invoke(ctx, RouterService_SyncMetadata_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.RouterService/SyncMetadata", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -129,7 +122,7 @@ func _RouterService_ListRouters_Handler(srv interface{}, ctx context.Context, de
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: RouterService_ListRouters_FullMethodName,
+		FullMethod: "/spqr.RouterService/ListRouters",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(RouterServiceServer).ListRouters(ctx, req.(*ListRoutersRequest))
@@ -147,7 +140,7 @@ func _RouterService_AddRouter_Handler(srv interface{}, ctx context.Context, dec
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: RouterService_AddRouter_FullMethodName,
+		FullMethod: "/spqr.RouterService/AddRouter",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(RouterServiceServer).AddRouter(ctx, req.(*AddRouterRequest))
@@ -165,7 +158,7 @@ func _RouterService_RemoveRouter_Handler(srv interface{}, ctx context.Context, d
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: RouterService_RemoveRouter_FullMethodName,
+		FullMethod: "/spqr.RouterService/RemoveRouter",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(RouterServiceServer).RemoveRouter(ctx, req.(*RemoveRouterRequest))
@@ -183,7 +176,7 @@ func _RouterService_SyncMetadata_Handler(srv interface{}, ctx context.Context, d
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: RouterService_SyncMetadata_FullMethodName,
+		FullMethod: "/spqr.RouterService/SyncMetadata",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(RouterServiceServer).SyncMetadata(ctx, req.(*SyncMetadataRequest))
diff --git a/pkg/protos/shard.pb.go b/pkg/protos/shard.pb.go
index 24b42b8..f95f206 100644
--- a/pkg/protos/shard.pb.go
+++ b/pkg/protos/shard.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go. DO NOT EDIT.
 // versions:
-// 	protoc-gen-go v1.27.1
-// 	protoc        v4.23.4
+// 	protoc-gen-go v1.28.1
+// 	protoc        v3.6.1
 // source: protos/shard.proto
 
 package proto
diff --git a/pkg/protos/shard_grpc.pb.go b/pkg/protos/shard_grpc.pb.go
index 2255258..5f1d028 100644
--- a/pkg/protos/shard_grpc.pb.go
+++ b/pkg/protos/shard_grpc.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go-grpc. DO NOT EDIT.
 // versions:
-// - protoc-gen-go-grpc v1.3.0
-// - protoc             v4.23.4
+// - protoc-gen-go-grpc v1.2.0
+// - protoc             v3.6.1
 // source: protos/shard.proto
 
 package proto
@@ -18,13 +18,6 @@ import (
 // Requires gRPC-Go v1.32.0 or later.
 const _ = grpc.SupportPackageIsVersion7
 
-const (
-	ShardService_ListShards_FullMethodName    = "/spqr.ShardService/ListShards"
-	ShardService_AddDataShard_FullMethodName  = "/spqr.ShardService/AddDataShard"
-	ShardService_AddWorldShard_FullMethodName = "/spqr.ShardService/AddWorldShard"
-	ShardService_GetShardInfo_FullMethodName  = "/spqr.ShardService/GetShardInfo"
-)
-
 // ShardServiceClient is the client API for ShardService service.
 //
 // For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
@@ -45,7 +38,7 @@ func NewShardServiceClient(cc grpc.ClientConnInterface) ShardServiceClient {
 
 func (c *shardServiceClient) ListShards(ctx context.Context, in *ListShardsRequest, opts ...grpc.CallOption) (*ListShardsReply, error) {
 	out := new(ListShardsReply)
-	err := c.cc.Invoke(ctx, ShardService_ListShards_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.ShardService/ListShards", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -54,7 +47,7 @@ func (c *shardServiceClient) ListShards(ctx context.Context, in *ListShardsReque
 
 func (c *shardServiceClient) AddDataShard(ctx context.Context, in *AddShardRequest, opts ...grpc.CallOption) (*AddShardReply, error) {
 	out := new(AddShardReply)
-	err := c.cc.Invoke(ctx, ShardService_AddDataShard_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.ShardService/AddDataShard", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -63,7 +56,7 @@ func (c *shardServiceClient) AddDataShard(ctx context.Context, in *AddShardReque
 
 func (c *shardServiceClient) AddWorldShard(ctx context.Context, in *AddWorldShardRequest, opts ...grpc.CallOption) (*AddShardReply, error) {
 	out := new(AddShardReply)
-	err := c.cc.Invoke(ctx, ShardService_AddWorldShard_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.ShardService/AddWorldShard", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -72,7 +65,7 @@ func (c *shardServiceClient) AddWorldShard(ctx context.Context, in *AddWorldShar
 
 func (c *shardServiceClient) GetShardInfo(ctx context.Context, in *ShardRequest, opts ...grpc.CallOption) (*ShardInfoReply, error) {
 	out := new(ShardInfoReply)
-	err := c.cc.Invoke(ctx, ShardService_GetShardInfo_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.ShardService/GetShardInfo", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -129,7 +122,7 @@ func _ShardService_ListShards_Handler(srv interface{}, ctx context.Context, dec
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: ShardService_ListShards_FullMethodName,
+		FullMethod: "/spqr.ShardService/ListShards",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(ShardServiceServer).ListShards(ctx, req.(*ListShardsRequest))
@@ -147,7 +140,7 @@ func _ShardService_AddDataShard_Handler(srv interface{}, ctx context.Context, de
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: ShardService_AddDataShard_FullMethodName,
+		FullMethod: "/spqr.ShardService/AddDataShard",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(ShardServiceServer).AddDataShard(ctx, req.(*AddShardRequest))
@@ -165,7 +158,7 @@ func _ShardService_AddWorldShard_Handler(srv interface{}, ctx context.Context, d
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: ShardService_AddWorldShard_FullMethodName,
+		FullMethod: "/spqr.ShardService/AddWorldShard",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(ShardServiceServer).AddWorldShard(ctx, req.(*AddWorldShardRequest))
@@ -183,7 +176,7 @@ func _ShardService_GetShardInfo_Handler(srv interface{}, ctx context.Context, de
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: ShardService_GetShardInfo_FullMethodName,
+		FullMethod: "/spqr.ShardService/GetShardInfo",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(ShardServiceServer).GetShardInfo(ctx, req.(*ShardRequest))
diff --git a/pkg/protos/sharding_rules.pb.go b/pkg/protos/sharding_rules.pb.go
index 80bd0bf..49f56c9 100644
--- a/pkg/protos/sharding_rules.pb.go
+++ b/pkg/protos/sharding_rules.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go. DO NOT EDIT.
 // versions:
-// 	protoc-gen-go v1.27.1
-// 	protoc        v4.23.4
+// 	protoc-gen-go v1.28.1
+// 	protoc        v3.6.1
 // source: protos/sharding_rules.proto
 
 package proto
@@ -227,6 +227,8 @@ type ListShardingRuleRequest struct {
 	state         protoimpl.MessageState
 	sizeCache     protoimpl.SizeCache
 	unknownFields protoimpl.UnknownFields
+
+	Dataspace string `protobuf:"bytes,1,opt,name=dataspace,proto3" json:"dataspace,omitempty"`
 }
 
 func (x *ListShardingRuleRequest) Reset() {
@@ -261,6 +263,13 @@ func (*ListShardingRuleRequest) Descriptor() ([]byte, []int) {
 	return file_protos_sharding_rules_proto_rawDescGZIP(), []int{4}
 }
 
+func (x *ListShardingRuleRequest) GetDataspace() string {
+	if x != nil {
+		return x.Dataspace
+	}
+	return ""
+}
+
 type ListShardingRuleReply struct {
 	state         protoimpl.MessageState
 	sizeCache     protoimpl.SizeCache
@@ -417,35 +426,37 @@ var file_protos_sharding_rules_proto_rawDesc = []byte{
 	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64,
 	0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x16,
 	0x0a, 0x14, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c,
-	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68,
+	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x37, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68,
+	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
+	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01,
+	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
+	0x41, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
+	0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
+	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x53,
+	0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c,
+	0x65, 0x73, 0x22, 0x29, 0x0a, 0x17, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69,
+	0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
+	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x17, 0x0a,
+	0x15, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c,
+	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0x8c, 0x02, 0x0a, 0x14, 0x53, 0x68, 0x61, 0x72, 0x64,
+	0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
+	0x4e, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75,
+	0x6c, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x68,
 	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
-	0x74, 0x22, 0x41, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e,
-	0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x75,
-	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x70, 0x71, 0x72,
-	0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72,
-	0x75, 0x6c, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x17, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x68, 0x61, 0x72,
-	0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
-	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
-	0x17, 0x0a, 0x15, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
-	0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0x8c, 0x02, 0x0a, 0x14, 0x53, 0x68, 0x61,
-	0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
-	0x65, 0x12, 0x4e, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
-	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x41, 0x64, 0x64,
+	0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72,
+	0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
+	0x51, 0x0a, 0x11, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
+	0x75, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x44, 0x72, 0x6f, 0x70,
 	0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
-	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x68,
-	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
-	0x00, 0x12, 0x51, 0x0a, 0x11, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e,
-	0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x44, 0x72,
-	0x6f, 0x70, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
-	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x44, 0x72, 0x6f,
-	0x70, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x70,
-	0x6c, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72,
-	0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x70, 0x71, 0x72,
-	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c,
-	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e,
-	0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65,
-	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x73, 0x70, 0x71, 0x72, 0x2f,
-	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
+	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x53,
+	0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
+	0x22, 0x00, 0x12, 0x51, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69,
+	0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4c,
+	0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52,
+	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x70, 0x71, 0x72, 0x2e, 0x4c, 0x69,
+	0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
+	0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x73, 0x70, 0x71, 0x72, 0x2f, 0x70, 0x72,
+	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
 }
 
 var (
diff --git a/pkg/protos/sharding_rules_grpc.pb.go b/pkg/protos/sharding_rules_grpc.pb.go
index f05d590..35d7746 100644
--- a/pkg/protos/sharding_rules_grpc.pb.go
+++ b/pkg/protos/sharding_rules_grpc.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go-grpc. DO NOT EDIT.
 // versions:
-// - protoc-gen-go-grpc v1.3.0
-// - protoc             v4.23.4
+// - protoc-gen-go-grpc v1.2.0
+// - protoc             v3.6.1
 // source: protos/sharding_rules.proto
 
 package proto
@@ -18,12 +18,6 @@ import (
 // Requires gRPC-Go v1.32.0 or later.
 const _ = grpc.SupportPackageIsVersion7
 
-const (
-	ShardingRulesService_AddShardingRules_FullMethodName  = "/spqr.ShardingRulesService/AddShardingRules"
-	ShardingRulesService_DropShardingRules_FullMethodName = "/spqr.ShardingRulesService/DropShardingRules"
-	ShardingRulesService_ListShardingRules_FullMethodName = "/spqr.ShardingRulesService/ListShardingRules"
-)
-
 // ShardingRulesServiceClient is the client API for ShardingRulesService service.
 //
 // For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
@@ -43,7 +37,7 @@ func NewShardingRulesServiceClient(cc grpc.ClientConnInterface) ShardingRulesSer
 
 func (c *shardingRulesServiceClient) AddShardingRules(ctx context.Context, in *AddShardingRuleRequest, opts ...grpc.CallOption) (*AddShardingRuleReply, error) {
 	out := new(AddShardingRuleReply)
-	err := c.cc.Invoke(ctx, ShardingRulesService_AddShardingRules_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.ShardingRulesService/AddShardingRules", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -52,7 +46,7 @@ func (c *shardingRulesServiceClient) AddShardingRules(ctx context.Context, in *A
 
 func (c *shardingRulesServiceClient) DropShardingRules(ctx context.Context, in *DropShardingRuleRequest, opts ...grpc.CallOption) (*DropShardingRuleReply, error) {
 	out := new(DropShardingRuleReply)
-	err := c.cc.Invoke(ctx, ShardingRulesService_DropShardingRules_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.ShardingRulesService/DropShardingRules", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -61,7 +55,7 @@ func (c *shardingRulesServiceClient) DropShardingRules(ctx context.Context, in *
 
 func (c *shardingRulesServiceClient) ListShardingRules(ctx context.Context, in *ListShardingRuleRequest, opts ...grpc.CallOption) (*ListShardingRuleReply, error) {
 	out := new(ListShardingRuleReply)
-	err := c.cc.Invoke(ctx, ShardingRulesService_ListShardingRules_FullMethodName, in, out, opts...)
+	err := c.cc.Invoke(ctx, "/spqr.ShardingRulesService/ListShardingRules", in, out, opts...)
 	if err != nil {
 		return nil, err
 	}
@@ -114,7 +108,7 @@ func _ShardingRulesService_AddShardingRules_Handler(srv interface{}, ctx context
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: ShardingRulesService_AddShardingRules_FullMethodName,
+		FullMethod: "/spqr.ShardingRulesService/AddShardingRules",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(ShardingRulesServiceServer).AddShardingRules(ctx, req.(*AddShardingRuleRequest))
@@ -132,7 +126,7 @@ func _ShardingRulesService_DropShardingRules_Handler(srv interface{}, ctx contex
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: ShardingRulesService_DropShardingRules_FullMethodName,
+		FullMethod: "/spqr.ShardingRulesService/DropShardingRules",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(ShardingRulesServiceServer).DropShardingRules(ctx, req.(*DropShardingRuleRequest))
@@ -150,7 +144,7 @@ func _ShardingRulesService_ListShardingRules_Handler(srv interface{}, ctx contex
 	}
 	info := &grpc.UnaryServerInfo{
 		Server:     srv,
-		FullMethod: ShardingRulesService_ListShardingRules_FullMethodName,
+		FullMethod: "/spqr.ShardingRulesService/ListShardingRules",
 	}
 	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
 		return srv.(ShardingRulesServiceServer).ListShardingRules(ctx, req.(*ListShardingRuleRequest))
diff --git a/pkg/tsa/tsa_test.go b/pkg/tsa/tsa_test.go
index 5c9ab05..577697b 100644
--- a/pkg/tsa/tsa_test.go
+++ b/pkg/tsa/tsa_test.go
@@ -8,9 +8,9 @@ import (
 	"github.com/pg-sharding/spqr/pkg/txstatus"
 	"github.com/stretchr/testify/assert"
 
+	"github.com/golang/mock/gomock"
 	mockinst "github.com/pg-sharding/spqr/pkg/mock/conn"
 	"github.com/pg-sharding/spqr/pkg/tsa"
-	"go.uber.org/mock/gomock"
 )
 
 func TestTSA_RW(t *testing.T) {
diff --git a/protos/clients.proto b/protos/clients.proto
index 582962d..da02d36 100644
--- a/protos/clients.proto
+++ b/protos/clients.proto
@@ -20,7 +20,8 @@ message ClientInfo {
   string client_id = 1;
   string user = 2;
   string dbname = 3;
-  repeated UsedShardInfo shards = 4;
+  string dsname = 4;
+  repeated UsedShardInfo shards = 5;
 }
 
 message UsedShardInfo {
diff --git a/protos/key_range.proto b/protos/key_range.proto
index 7319499..27fceb8 100644
--- a/protos/key_range.proto
+++ b/protos/key_range.proto
@@ -35,6 +35,7 @@ message KeyRangeInfo {
 }
 
 message ListKeyRangeRequest {
+  string dataspace = 1;
 }
 
 message AddKeyRangeRequest {
@@ -49,6 +50,7 @@ message SplitKeyRangeRequest {
 
 message MergeKeyRangeRequest {
   bytes bound = 1;
+  string dataspace = 2;
 }
 
 message MoveKeyRangeRequest {
diff --git a/protos/sharding_rules.proto b/protos/sharding_rules.proto
index 0d68342..204e8a8 100644
--- a/protos/sharding_rules.proto
+++ b/protos/sharding_rules.proto
@@ -22,7 +22,9 @@ message AddShardingRuleRequest {
 
 message AddShardingRuleReply {}
 
-message ListShardingRuleRequest {}
+message ListShardingRuleRequest {
+  string dataspace = 1;
+}
 
 message ListShardingRuleReply {
   repeated ShardingRule rules = 1;
diff --git a/qdb/etcdqdb.go b/qdb/etcdqdb.go
index ac556dd..c18d47b 100644
--- a/qdb/etcdqdb.go
+++ b/qdb/etcdqdb.go
@@ -177,7 +177,7 @@ func (q *EtcdQDB) GetShardingRule(ctx context.Context, id string) (*ShardingRule
 
 }
 
-func (q *EtcdQDB) ListShardingRules(ctx context.Context) ([]*ShardingRule, error) {
+func (q *EtcdQDB) ListShardingRules(ctx context.Context, dataspace string) ([]*ShardingRule, error) {
 	spqrlog.Zero.Debug().Msg("etcdqdb: list all sharding rules")
 
 	namespacePrefix := shardingRulesNamespace + "/"
@@ -195,8 +195,9 @@ func (q *EtcdQDB) ListShardingRules(ctx context.Context) ([]*ShardingRule, error
 		if err := json.Unmarshal(kv.Value, &rule); err != nil {
 			return nil, err
 		}
-
-		rules = append(rules, rule)
+		if rule.DataspaceId == dataspace || dataspace == "" {
+			rules = append(rules, rule)
+		}
 	}
 
 	sort.Slice(rules, func(i, j int) bool {
@@ -331,7 +332,7 @@ func (q *EtcdQDB) MatchShardingRules(ctx context.Context, m func(shrules map[str
 	return nil
 }
 
-func (q *EtcdQDB) ListKeyRanges(ctx context.Context) ([]*KeyRange, error) {
+func (q *EtcdQDB) ListKeyRanges(ctx context.Context, dataspace string) ([]*KeyRange, error) {
 	spqrlog.Zero.Debug().Msg("etcdqdb: list all key ranges")
 
 	resp, err := q.cli.Get(ctx, keyRangesNamespace, clientv3.WithPrefix())
@@ -348,7 +349,9 @@ func (q *EtcdQDB) ListKeyRanges(ctx context.Context) ([]*KeyRange, error) {
 			return nil, err
 		}
 
-		ret = append(ret, &krCurr)
+		if dataspace == krCurr.DataspaceId || dataspace == "" {
+			ret = append(ret, &krCurr)
+		}
 	}
 
 	sort.Slice(ret, func(i, j int) bool {
@@ -940,6 +943,20 @@ func (q *EtcdQDB) ListDataspaces(ctx context.Context) ([]*Dataspace, error) {
 	return rules, nil
 }
 
+func (q *EtcdQDB) DropDataspace(ctx context.Context, id string) error {
+	spqrlog.Zero.Debug().
+		Str("id", id).
+		Msg("etcdqdb: drop dataspace")
+
+	resp, err := q.cli.Delete(ctx, dataspaceNodePath(id))
+
+	spqrlog.Zero.Debug().
+		Interface("response", resp).
+		Msg("etcdqdb: drop dataspace")
+
+	return err
+}
+
 // ==============================================================================
 //                              KEY RANGE MOVES
 // ==============================================================================
diff --git a/qdb/memqdb.go b/qdb/memqdb.go
index ebb0552..5535e29 100644
--- a/qdb/memqdb.go
+++ b/qdb/memqdb.go
@@ -169,13 +169,15 @@ func (q *MemQDB) GetShardingRule(ctx context.Context, id string) (*ShardingRule,
 	return nil, fmt.Errorf("rule with id %s not found", id)
 }
 
-func (q *MemQDB) ListShardingRules(ctx context.Context) ([]*ShardingRule, error) {
+func (q *MemQDB) ListShardingRules(ctx context.Context, dataspace string) ([]*ShardingRule, error) {
 	spqrlog.Zero.Debug().Msg("memqdb: list sharding rules")
 	q.mu.RLock()
 	defer q.mu.RUnlock()
 	var ret []*ShardingRule
 	for _, v := range q.Shrules {
-		ret = append(ret, v)
+		if dataspace == v.DataspaceId || dataspace == "" {
+			ret = append(ret, v)
+		}
 	}
 
 	sort.Slice(ret, func(i, j int) bool {
@@ -309,7 +311,7 @@ func (q *MemQDB) DropKeyRangeAll(ctx context.Context) error {
 	return ExecuteCommands(q.DumpState, NewDropCommand(q.Krs), NewDropCommand(q.Locks))
 }
 
-func (q *MemQDB) ListKeyRanges(_ context.Context) ([]*KeyRange, error) {
+func (q *MemQDB) ListKeyRanges(_ context.Context, dataspace string) ([]*KeyRange, error) {
 	spqrlog.Zero.Debug().Msg("memqdb: list all key ranges")
 	q.mu.RLock()
 	defer q.mu.RUnlock()
@@ -317,7 +319,9 @@ func (q *MemQDB) ListKeyRanges(_ context.Context) ([]*KeyRange, error) {
 	var ret []*KeyRange
 
 	for _, el := range q.Krs {
-		ret = append(ret, el)
+		if el.DataspaceId == dataspace || dataspace == "" {
+			ret = append(ret, el)
+		}
 	}
 
 	sort.Slice(ret, func(i, j int) bool {
@@ -619,3 +623,11 @@ func (q *MemQDB) ListDataspaces(ctx context.Context) ([]*Dataspace, error) {
 
 	return ret, nil
 }
+
+func (q *MemQDB) DropDataspace(ctx context.Context, id string) error {
+	spqrlog.Zero.Debug().Str("dataspace", id).Msg("memqdb: delete dataspace")
+	q.mu.Lock()
+	defer q.mu.Unlock()
+
+	return ExecuteCommands(q.DumpState, NewDeleteCommand(q.Dataspaces, id))
+}
diff --git a/qdb/memqdb_test.go b/qdb/memqdb_test.go
index 32e22ae..8815d32 100644
--- a/qdb/memqdb_test.go
+++ b/qdb/memqdb_test.go
@@ -11,23 +11,23 @@ import (
 
 const MemQDBPath = ""
 
-var mockDataspace *qdb.Dataspace = &qdb.Dataspace{"123"}
-var mockShard *qdb.Shard = &qdb.Shard{
+var mockDataspace = &qdb.Dataspace{"123"}
+var mockShard = &qdb.Shard{
 	ID:    "shard_id",
 	Hosts: []string{"host1", "host2"},
 }
-var mockKeyRange *qdb.KeyRange = &qdb.KeyRange{
+var mockKeyRange = &qdb.KeyRange{
 	LowerBound: []byte{1, 2},
 	UpperBound: []byte{3, 4},
 	ShardID:    mockShard.ID,
 	KeyRangeID: "key_range_id",
 }
-var mockRouter *qdb.Router = &qdb.Router{
+var mockRouter = &qdb.Router{
 	Address: "address",
 	ID:      "router_id",
 	State:   qdb.CLOSED,
 }
-var mockShardingRule *qdb.ShardingRule = &qdb.ShardingRule{
+var mockShardingRule = &qdb.ShardingRule{
 	ID:        "sharding_rule_id",
 	TableName: "fake_table",
 	Entries: []qdb.ShardingRuleEntry{
@@ -36,7 +36,7 @@ var mockShardingRule *qdb.ShardingRule = &qdb.ShardingRule{
 		},
 	},
 }
-var mockDataTransferTransaction *qdb.DataTransferTransaction = &qdb.DataTransferTransaction{
+var mockDataTransferTransaction = &qdb.DataTransferTransaction{
 	ToShardId:   mockShard.ID,
 	FromShardId: mockShard.ID,
 	FromTxName:  "fake_tx_1",
@@ -65,9 +65,9 @@ func TestMemqdbRacing(t *testing.T) {
 			_ = memqdb.RecordTransferTx(ctx, mockDataTransferTransaction.FromShardId, mockDataTransferTransaction)
 		},
 		func() { _, _ = memqdb.ListDataspaces(ctx) },
-		func() { _, _ = memqdb.ListKeyRanges(ctx) },
+		func() { _, _ = memqdb.ListKeyRanges(ctx, "") },
 		func() { _, _ = memqdb.ListRouters(ctx) },
-		func() { _, _ = memqdb.ListShardingRules(ctx) },
+		func() { _, _ = memqdb.ListShardingRules(ctx, "") },
 		func() { _, _ = memqdb.ListShards(ctx) },
 		func() { _, _ = memqdb.GetKeyRange(ctx, mockKeyRange.KeyRangeID) },
 		func() { _, _ = memqdb.GetShard(ctx, mockShard.ID) },
diff --git a/qdb/models.go b/qdb/models.go
index ca90478..19c61cd 100644
--- a/qdb/models.go
+++ b/qdb/models.go
@@ -6,10 +6,11 @@ type ShardKey struct {
 }
 
 type KeyRange struct {
-	LowerBound []byte `json:"from"`
-	UpperBound []byte `json:"to"`
-	ShardID    string `json:"shard_id"`
-	KeyRangeID string `json:"key_range_id"`
+	LowerBound  []byte `json:"from"`
+	UpperBound  []byte `json:"to"`
+	ShardID     string `json:"shard_id"`
+	KeyRangeID  string `json:"key_range_id"`
+	DataspaceId string `json:"dataspace_id"`
 }
 type MoveKeyRangeStatus string
 
@@ -62,9 +63,10 @@ type ShardingRuleEntry struct {
 }
 
 type ShardingRule struct {
-	ID        string              `json:"id"`
-	TableName string              `json:"table"`
-	Entries   []ShardingRuleEntry `json:"columns"`
+	ID          string              `json:"id"`
+	TableName   string              `json:"table"`
+	Entries     []ShardingRuleEntry `json:"columns"`
+	DataspaceId string              `json:"dataspace_id"`
 }
 
 type Shard struct {
diff --git a/qdb/ops/ops.go b/qdb/ops/ops.go
index ceb1754..5f668d7 100644
--- a/qdb/ops/ops.go
+++ b/qdb/ops/ops.go
@@ -17,18 +17,22 @@ func AddShardingRuleWithChecks(ctx context.Context, qdb qdb.QDB, rule *shrule.Sh
 		return fmt.Errorf("sharding rule %v already present in qdb", rule.Id)
 	}
 
-	existsRules, err := qdb.ListShardingRules(ctx)
+	existsRules, err := qdb.ListShardingRules(ctx, rule.Dataspace)
 	if err != nil {
 		return err
 	}
 
 	for _, v := range existsRules {
-		v_gen := shrule.ShardingRuleFromDB(v)
-		if rule.Includes(v_gen) {
-			return fmt.Errorf("sharding rule %v inlude existing rule %v", rule.Id, v_gen.Id)
+		if rule.Dataspace != v.DataspaceId {
+			continue
+		}
+
+		vGen := shrule.ShardingRuleFromDB(v)
+		if rule.Includes(vGen) {
+			return fmt.Errorf("sharding rule %v inlude existing rule %v", rule.Id, vGen.Id)
 		}
-		if v_gen.Includes(rule) {
-			return fmt.Errorf("sharding rule %v included in %v present in qdb", rule.Id, v_gen.Id)
+		if vGen.Includes(rule) {
+			return fmt.Errorf("sharding rule %v included in %v present in qdb", rule.Id, vGen.Id)
 		}
 	}
 
@@ -44,12 +48,15 @@ func AddKeyRangeWithChecks(ctx context.Context, qdb qdb.QDB, keyRange *kr.KeyRan
 		return fmt.Errorf("key range %v already present in qdb", keyRange.ID)
 	}
 
-	existsKrids, err := qdb.ListKeyRanges(ctx)
+	existsKrids, err := qdb.ListKeyRanges(ctx, keyRange.Dataspace)
 	if err != nil {
 		return err
 	}
 
 	for _, v := range existsKrids {
+		if keyRange.Dataspace != v.DataspaceId {
+			continue
+		}
 		if doIntersect(keyRange, v) {
 			return fmt.Errorf("key range %v intersects with key range %v in QDB", keyRange.ID, v.KeyRangeID)
 		}
@@ -58,7 +65,7 @@ func AddKeyRangeWithChecks(ctx context.Context, qdb qdb.QDB, keyRange *kr.KeyRan
 	return qdb.AddKeyRange(ctx, keyRange.ToDB())
 }
 
-func MatchShardingRule(ctx context.Context, mgr meta.EntityMgr, relationName string, shardingEntries []string, db qdb.QDB) (*qdb.ShardingRule, error) {
+func MatchShardingRule(ctx context.Context, _ meta.EntityMgr, relationName string, shardingEntries []string, db qdb.QDB) (*qdb.ShardingRule, error) {
 	/*
 	* Create set to search column names in `shardingEntries`
 	 */
@@ -115,7 +122,7 @@ func ModifyKeyRangeWithChecks(ctx context.Context, qdb qdb.QDB, keyRange *kr.Key
 		return err
 	}
 
-	krids, err := qdb.ListKeyRanges(ctx)
+	krids, err := qdb.ListKeyRanges(ctx, keyRange.Dataspace)
 	if err != nil {
 		return err
 	}
diff --git a/qdb/qdb.go b/qdb/qdb.go
index 1da8e66..c0ba2f7 100644
--- a/qdb/qdb.go
+++ b/qdb/qdb.go
@@ -49,14 +49,14 @@ type QDB interface {
 	DropShardingRule(ctx context.Context, id string) error
 	DropShardingRuleAll(ctx context.Context) ([]*ShardingRule, error)
 	GetShardingRule(ctx context.Context, id string) (*ShardingRule, error)
-	ListShardingRules(ctx context.Context) ([]*ShardingRule, error)
+	ListShardingRules(ctx context.Context, dataspace string) ([]*ShardingRule, error)
 
 	AddKeyRange(ctx context.Context, keyRange *KeyRange) error
 	GetKeyRange(ctx context.Context, id string) (*KeyRange, error)
 	UpdateKeyRange(ctx context.Context, keyRange *KeyRange) error
 	DropKeyRange(ctx context.Context, id string) error
 	DropKeyRangeAll(ctx context.Context) error
-	ListKeyRanges(_ context.Context) ([]*KeyRange, error)
+	ListKeyRanges(_ context.Context, datspace string) ([]*KeyRange, error)
 	LockKeyRange(ctx context.Context, id string) (*KeyRange, error)
 	UnlockKeyRange(ctx context.Context, id string) error
 	CheckLockedKeyRange(ctx context.Context, id string) (*KeyRange, error)
@@ -70,6 +70,7 @@ type QDB interface {
 
 	AddDataspace(ctx context.Context, ks *Dataspace) error
 	ListDataspaces(ctx context.Context) ([]*Dataspace, error)
+	DropDataspace(ctx context.Context, id string) error
 
 	UpdateCoordinator(ctx context.Context, address string) error
 	GetCoordinator(ctx context.Context) (string, error)
diff --git a/router/client/client.go b/router/client/client.go
index c877206..030bc35 100644
--- a/router/client/client.go
+++ b/router/client/client.go
@@ -631,6 +631,7 @@ func (cl *PsqlClient) Auth(rt *route.Route) error {
 		Str("client", cl.ID()).
 		Str("user", cl.Usr()).
 		Str("db", cl.DB()).
+		Str("ds", cl.DS()).
 		Msg("client connection for rule accepted")
 
 	ps, err := rt.Params()
@@ -674,6 +675,7 @@ func (cl *PsqlClient) StartupMessage() *pgproto3.StartupMessage {
 
 const DefaultUsr = "default"
 const DefaultDB = "default"
+const DefaultDS = "default"
 
 func (cl *PsqlClient) Usr() string {
 	if usr, ok := cl.startupMsg.Parameters["user"]; ok {
@@ -690,6 +692,13 @@ func (cl *PsqlClient) DB() string {
 	return DefaultDB
 }
 
+func (cl *PsqlClient) DS() string {
+	if ds, ok := cl.activeParamSet["dataspace"]; ok {
+		return ds
+	}
+	return DefaultDS
+}
+
 func (cl *PsqlClient) receivepasswd() (string, error) {
 	msg, err := cl.be.Receive()
 	if err != nil {
@@ -900,6 +909,12 @@ func (f FakeClient) DB() string {
 	return DefaultDB
 }
 
+func (f FakeClient) DS() string {
+	return DefaultDS
+}
+
+func (c FakeClient) SetDS(_ string) {}
+
 func NewFakeClient() *FakeClient {
 	return &FakeClient{}
 }
@@ -923,6 +938,7 @@ func NewNoopClient(clientInfo *routerproto.ClientInfo, rAddr string) NoopClient
 		id:     clientInfo.ClientId,
 		user:   clientInfo.User,
 		dbname: clientInfo.Dbname,
+		dsname: clientInfo.Dsname,
 		rAddr:  rAddr,
 		shards: make([]shard.Shard, len(clientInfo.Shards)),
 	}
@@ -937,6 +953,7 @@ type NoopClient struct {
 	id     string
 	user   string
 	dbname string
+	dsname string
 	shards []shard.Shard
 	rAddr  string
 }
@@ -953,6 +970,12 @@ func (c NoopClient) DB() string {
 	return c.dbname
 }
 
+func (c NoopClient) DS() string {
+	return c.dsname
+}
+
+func (c NoopClient) SetDS(_ string) {}
+
 func (c NoopClient) RAddr() string {
 	return c.rAddr
 }
diff --git a/router/client/client_test.go b/router/client/client_test.go
index 2a2808e..e30ff9b 100644
--- a/router/client/client_test.go
+++ b/router/client/client_test.go
@@ -5,9 +5,9 @@ import (
 	"fmt"
 	"testing"
 
+	"github.com/golang/mock/gomock"
 	"github.com/jackc/pgx/v5/pgproto3"
 	"github.com/pg-sharding/spqr/router/client"
-	"go.uber.org/mock/gomock"
 
 	"github.com/pg-sharding/spqr/pkg/conn"
 	mock_conn "github.com/pg-sharding/spqr/pkg/mock/conn"
diff --git a/router/console/console.go b/router/console/console.go
index 4f6098d..23a3b87 100644
--- a/router/console/console.go
+++ b/router/console/console.go
@@ -99,7 +99,6 @@ func (l *Local) proxyProc(ctx context.Context, tstmt spqrparser.Statement, cli *
 			defer conn.Close()
 			mgr = coord.NewAdapter(conn)
 		}
-
 	default:
 		coordAddr, err := l.Coord.GetCoordinator(ctx)
 		if err != nil {
diff --git a/router/frontend.go b/router/frontend.go
index 9afe8d8..16888ab 100644
--- a/router/frontend.go
+++ b/router/frontend.go
@@ -3,6 +3,7 @@ package app
 import (
 	"context"
 	"fmt"
+	spqrparser "github.com/pg-sharding/spqr/yacc/console"
 	"io"
 	"strings"
 	"time"
@@ -31,23 +32,22 @@ func AdvancedPoolModeNeeded(rst relay.RelayStateMgr) bool {
 	return rst.Client().Rule().PoolMode == config.PoolModeTransaction && rst.Client().Rule().PoolPreparedStatement || rst.RouterMode() == config.ProxyMode
 }
 
-func deparseRouteHint(rst relay.RelayStateMgr, params map[string]string) (routehint.RouteHint, error) {
+func deparseRouteHint(rst relay.RelayStateMgr, params map[string]string, dataspace string) (routehint.RouteHint, error) {
 	if val, ok := params["sharding_key"]; ok {
 		spqrlog.Zero.Debug().Str("sharding key", val).Msg("checking hint key")
 
-		krs, err := rst.QueryRouter().Mgr().ListKeyRanges(context.TODO())
+		krs, err := rst.QueryRouter().Mgr().ListKeyRanges(context.TODO(), dataspace)
 
 		if err != nil {
 			return nil, err
 		}
 
-		rls, err := rst.QueryRouter().Mgr().ListShardingRules(context.TODO())
+		rls, err := rst.QueryRouter().Mgr().ListShardingRules(context.TODO(), dataspace)
 		if err != nil {
 			return nil, err
 		}
 
-		meta := qrouter.NewRoutingMetadataContext(krs, rls, nil)
-
+		meta := qrouter.NewRoutingMetadataContext(krs, rls, dataspace, nil)
 		ds, err := rst.QueryRouter().DeparseKeyWithRangesInternal(context.TODO(), val, meta)
 		if err != nil {
 			return nil, err
@@ -75,7 +75,7 @@ func procQuery(rst relay.RelayStateMgr, query string, msg pgproto3.FrontendMessa
 	var routeHint routehint.RouteHint = &routehint.EmptyRouteHint{}
 
 	if err == nil {
-		routeHint, _ = deparseRouteHint(rst, mp)
+		routeHint, _ = deparseRouteHint(rst, mp, rst.Client().DS())
 
 		if val, ok := mp["target-session-attrs"]; ok {
 			// TBD: validate
@@ -120,6 +120,15 @@ func procQuery(rst relay.RelayStateMgr, query string, msg pgproto3.FrontendMessa
 			rst.Client().CommitActiveSet()
 		}
 		return err
+	case *parser.ParseSet:
+		switch el := st.Element.(type) {
+		case *spqrparser.DataspaceDefinition:
+			rst.Client().SetParam("dataspace", el.ID)
+			return rst.Client().ReplyCommandComplete(rst.TxStatus(), "Dataspace successful changed")
+		}
+		ret_err := fmt.Errorf("error processing query '%v': %v", query, err)
+		_ = rst.Client().ReplyErrMsg(ret_err.Error())
+		return ret_err
 	case parser.ParseStateTXRollback:
 		if rst.TxStatus() != txstatus.TXACT {
 			if rst.PgprotoDebug() {
@@ -391,6 +400,7 @@ func Frontend(qr qrouter.QueryRouter, cl client.RouterClient, cmngr poolmgr.Pool
 			default:
 				spqrlog.Zero.Error().
 					Uint("client", spqrlog.GetPointer(rst.Client())).Int("tx-status", int(rst.TxStatus())).Err(err).
+					Uint("client", spqrlog.GetPointer(rst.Client())).Int("tx-status", int(rst.TxStatus())).
 					Msg("client iteration done with error")
 				if err := rst.UnRouteWithError(rst.ActiveShards(), fmt.Errorf("client proccessing error: %v, tx status %s", err, rst.TxStatus().String())); err != nil {
 					return err
diff --git a/router/frontend_test.go b/router/frontend_test.go
index fe8cc1c..cf9fdbe 100644
--- a/router/frontend_test.go
+++ b/router/frontend_test.go
@@ -20,8 +20,8 @@ import (
 
 	mockcmgr "github.com/pg-sharding/spqr/router/mock/poolmgr"
 
+	"github.com/golang/mock/gomock"
 	"github.com/stretchr/testify/assert"
-	"go.uber.org/mock/gomock"
 )
 
 func TestFrontendSimpleEOF(t *testing.T) {
@@ -35,6 +35,7 @@ func TestFrontendSimpleEOF(t *testing.T) {
 
 	cl.EXPECT().Usr().AnyTimes().Return("user1")
 	cl.EXPECT().DB().AnyTimes().Return("db1")
+	cl.EXPECT().DS().AnyTimes().Return("")
 	cl.EXPECT().Close().Times(1)
 
 	cl.EXPECT().Receive().Times(1).Return(nil, io.EOF)
@@ -69,6 +70,7 @@ func TestFrontendSimple(t *testing.T) {
 
 	cl.EXPECT().Usr().AnyTimes().Return("user1")
 	cl.EXPECT().DB().AnyTimes().Return("db1")
+	cl.EXPECT().DS().AnyTimes().Return("")
 
 	cl.EXPECT().ID().AnyTimes().Return("lolkekcheburek")
 
@@ -99,7 +101,7 @@ func TestFrontendSimple(t *testing.T) {
 			&lyx.AExprConst{Value: "1"},
 		},
 		Where: &lyx.AExprEmpty{},
-	}, nil, &routehint.EmptyRouteHint{}).Return(routingstate.ShardMatchState{
+	}, "", nil, &routehint.EmptyRouteHint{}).Return(routingstate.ShardMatchState{
 		Routes: []*routingstate.DataShardRoute{
 			{
 				Shkey: kr.ShardKey{
@@ -182,6 +184,7 @@ func TestFrontendXProto(t *testing.T) {
 
 	cl.EXPECT().Usr().AnyTimes().Return("user1")
 	cl.EXPECT().DB().AnyTimes().Return("db1")
+	cl.EXPECT().DS().AnyTimes().Return("")
 
 	cl.EXPECT().ID().AnyTimes().Return("lolkekcheburek")
 
@@ -285,7 +288,6 @@ func TestFrontendXProto(t *testing.T) {
 }
 
 func TestFrontendSimpleCopyIn(t *testing.T) {
-
 	assert := assert.New(t)
 	ctrl := gomock.NewController(t)
 
@@ -307,6 +309,7 @@ func TestFrontendSimpleCopyIn(t *testing.T) {
 
 	cl.EXPECT().Usr().AnyTimes().Return("user1")
 	cl.EXPECT().DB().AnyTimes().Return("db1")
+	cl.EXPECT().DS().AnyTimes().Return("")
 
 	cl.EXPECT().ID().AnyTimes().Return("lolkekcheburek")
 
@@ -338,7 +341,7 @@ func TestFrontendSimpleCopyIn(t *testing.T) {
 		},
 		Where:  &lyx.AExprEmpty{},
 		IsFrom: true,
-	}, nil, &routehint.EmptyRouteHint{}).Return(routingstate.ShardMatchState{
+	}, "", nil, &routehint.EmptyRouteHint{}).Return(routingstate.ShardMatchState{
 		Routes: []*routingstate.DataShardRoute{
 			{
 				Shkey: kr.ShardKey{
diff --git a/router/grpc/qrouter.go b/router/grpc/qrouter.go
index 9366b0c..b7baa52 100644
--- a/router/grpc/qrouter.go
+++ b/router/grpc/qrouter.go
@@ -90,7 +90,7 @@ func (l *LocalQrouterServer) AddShardingRules(ctx context.Context, request *prot
 }
 
 func (l *LocalQrouterServer) ListShardingRules(ctx context.Context, request *protos.ListShardingRuleRequest) (*protos.ListShardingRuleReply, error) {
-	rules, err := l.mgr.ListShardingRules(ctx)
+	rules, err := l.mgr.ListShardingRules(ctx, request.Dataspace)
 	if err != nil {
 		return nil, err
 	}
@@ -128,12 +128,12 @@ func (l *LocalQrouterServer) AddKeyRange(ctx context.Context, request *protos.Ad
 	return &protos.ModifyReply{}, nil
 }
 
-func (l *LocalQrouterServer) ListKeyRange(ctx context.Context, _ *protos.ListKeyRangeRequest) (*protos.KeyRangeReply, error) {
+func (l *LocalQrouterServer) ListKeyRange(ctx context.Context, request *protos.ListKeyRangeRequest) (*protos.KeyRangeReply, error) {
 	var krs []*protos.KeyRangeInfo
 
 	spqrlog.Zero.Debug().Msg("listing key ranges")
 
-	krsqdb, err := l.mgr.ListKeyRanges(ctx)
+	krsqdb, err := l.mgr.ListKeyRanges(ctx, request.Dataspace)
 	if err != nil {
 		return nil, err
 	}
@@ -178,7 +178,7 @@ func (l *LocalQrouterServer) SplitKeyRange(ctx context.Context, request *protos.
 }
 
 func (l *LocalQrouterServer) MergeKeyRange(ctx context.Context, request *protos.MergeKeyRangeRequest) (*protos.ModifyReply, error) {
-	krs, err := l.mgr.ListKeyRanges(ctx)
+	krs, err := l.mgr.ListKeyRanges(ctx, request.Dataspace)
 	if err != nil {
 		return nil, err
 	}
diff --git a/router/mock/client/mock_client.go b/router/mock/client/mock_client.go
index f5dd7ab..5c4009a 100644
--- a/router/mock/client/mock_client.go
+++ b/router/mock/client/mock_client.go
@@ -1,10 +1,6 @@
 // Code generated by MockGen. DO NOT EDIT.
 // Source: ./router/client/client.go
-//
-// Generated by this command:
-//
-//	mockgen -source=./router/client/client.go -destination=./router/mock/client/mock_client.go -package=mock
-//
+
 // Package mock is a generated GoMock package.
 package mock
 
@@ -13,13 +9,13 @@ import (
 	tls "crypto/tls"
 	reflect "reflect"
 
+	gomock "github.com/golang/mock/gomock"
 	pgproto3 "github.com/jackc/pgx/v5/pgproto3"
 	config "github.com/pg-sharding/spqr/pkg/config"
 	shard "github.com/pg-sharding/spqr/pkg/shard"
 	txstatus "github.com/pg-sharding/spqr/pkg/txstatus"
 	route "github.com/pg-sharding/spqr/router/route"
 	server "github.com/pg-sharding/spqr/router/server"
-	gomock "go.uber.org/mock/gomock"
 )
 
 // MockPreparedStatementMapper is a mock of PreparedStatementMapper interface.
@@ -54,7 +50,7 @@ func (m *MockPreparedStatementMapper) PreparedStatementQueryByName(name string)
 }
 
 // PreparedStatementQueryByName indicates an expected call of PreparedStatementQueryByName.
-func (mr *MockPreparedStatementMapperMockRecorder) PreparedStatementQueryByName(name any) *gomock.Call {
+func (mr *MockPreparedStatementMapperMockRecorder) PreparedStatementQueryByName(name interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreparedStatementQueryByName", reflect.TypeOf((*MockPreparedStatementMapper)(nil).PreparedStatementQueryByName), name)
 }
@@ -66,7 +62,7 @@ func (m *MockPreparedStatementMapper) StorePreparedStatement(name, query string)
 }
 
 // StorePreparedStatement indicates an expected call of StorePreparedStatement.
-func (mr *MockPreparedStatementMapperMockRecorder) StorePreparedStatement(name, query any) *gomock.Call {
+func (mr *MockPreparedStatementMapperMockRecorder) StorePreparedStatement(name, query interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePreparedStatement", reflect.TypeOf((*MockPreparedStatementMapper)(nil).StorePreparedStatement), name, query)
 }
@@ -103,7 +99,7 @@ func (m *MockRouterClient) AssignRoute(r *route.Route) error {
 }
 
 // AssignRoute indicates an expected call of AssignRoute.
-func (mr *MockRouterClientMockRecorder) AssignRoute(r any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) AssignRoute(r interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoute", reflect.TypeOf((*MockRouterClient)(nil).AssignRoute), r)
 }
@@ -117,7 +113,7 @@ func (m *MockRouterClient) AssignRule(rule *config.FrontendRule) error {
 }
 
 // AssignRule indicates an expected call of AssignRule.
-func (mr *MockRouterClientMockRecorder) AssignRule(rule any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) AssignRule(rule interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRule", reflect.TypeOf((*MockRouterClient)(nil).AssignRule), rule)
 }
@@ -131,7 +127,7 @@ func (m *MockRouterClient) AssignServerConn(srv server.Server) error {
 }
 
 // AssignServerConn indicates an expected call of AssignServerConn.
-func (mr *MockRouterClientMockRecorder) AssignServerConn(srv any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) AssignServerConn(srv interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignServerConn", reflect.TypeOf((*MockRouterClient)(nil).AssignServerConn), srv)
 }
@@ -145,7 +141,7 @@ func (m *MockRouterClient) Auth(rt *route.Route) error {
 }
 
 // Auth indicates an expected call of Auth.
-func (mr *MockRouterClientMockRecorder) Auth(rt any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) Auth(rt interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockRouterClient)(nil).Auth), rt)
 }
@@ -232,6 +228,20 @@ func (mr *MockRouterClientMockRecorder) DB() *gomock.Call {
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockRouterClient)(nil).DB))
 }
 
+// DS mocks base method.
+func (m *MockRouterClient) DS() string {
+	m.ctrl.T.Helper()
+	ret := m.ctrl.Call(m, "DS")
+	ret0, _ := ret[0].(string)
+	return ret0
+}
+
+// DS indicates an expected call of DS.
+func (mr *MockRouterClientMockRecorder) DS() *gomock.Call {
+	mr.mock.ctrl.T.Helper()
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DS", reflect.TypeOf((*MockRouterClient)(nil).DS))
+}
+
 // DefaultReply mocks base method.
 func (m *MockRouterClient) DefaultReply() error {
 	m.ctrl.T.Helper()
@@ -311,7 +321,7 @@ func (m *MockRouterClient) Init(cfg *tls.Config) error {
 }
 
 // Init indicates an expected call of Init.
-func (mr *MockRouterClientMockRecorder) Init(cfg any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) Init(cfg interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockRouterClient)(nil).Init), cfg)
 }
@@ -355,7 +365,7 @@ func (m *MockRouterClient) PasswordMD5(salt [4]byte) (string, error) {
 }
 
 // PasswordMD5 indicates an expected call of PasswordMD5.
-func (mr *MockRouterClientMockRecorder) PasswordMD5(salt any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) PasswordMD5(salt interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordMD5", reflect.TypeOf((*MockRouterClient)(nil).PasswordMD5), salt)
 }
@@ -369,7 +379,7 @@ func (m *MockRouterClient) PreparedStatementQueryByName(name string) string {
 }
 
 // PreparedStatementQueryByName indicates an expected call of PreparedStatementQueryByName.
-func (mr *MockRouterClientMockRecorder) PreparedStatementQueryByName(name any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) PreparedStatementQueryByName(name interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreparedStatementQueryByName", reflect.TypeOf((*MockRouterClient)(nil).PreparedStatementQueryByName), name)
 }
@@ -423,7 +433,7 @@ func (m *MockRouterClient) ReceiveCtx(ctx context.Context) (pgproto3.FrontendMes
 }
 
 // ReceiveCtx indicates an expected call of ReceiveCtx.
-func (mr *MockRouterClientMockRecorder) ReceiveCtx(ctx any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) ReceiveCtx(ctx interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveCtx", reflect.TypeOf((*MockRouterClient)(nil).ReceiveCtx), ctx)
 }
@@ -437,7 +447,7 @@ func (m *MockRouterClient) Reply(msg string) error {
 }
 
 // Reply indicates an expected call of Reply.
-func (mr *MockRouterClientMockRecorder) Reply(msg any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) Reply(msg interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reply", reflect.TypeOf((*MockRouterClient)(nil).Reply), msg)
 }
@@ -451,7 +461,7 @@ func (m *MockRouterClient) ReplyCommandComplete(st txstatus.TXStatus, commandTag
 }
 
 // ReplyCommandComplete indicates an expected call of ReplyCommandComplete.
-func (mr *MockRouterClientMockRecorder) ReplyCommandComplete(st, commandTag any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) ReplyCommandComplete(st, commandTag interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyCommandComplete", reflect.TypeOf((*MockRouterClient)(nil).ReplyCommandComplete), st, commandTag)
 }
@@ -465,15 +475,15 @@ func (m *MockRouterClient) ReplyDebugNotice(msg string) error {
 }
 
 // ReplyDebugNotice indicates an expected call of ReplyDebugNotice.
-func (mr *MockRouterClientMockRecorder) ReplyDebugNotice(msg any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) ReplyDebugNotice(msg interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyDebugNotice", reflect.TypeOf((*MockRouterClient)(nil).ReplyDebugNotice), msg)
 }
 
 // ReplyDebugNoticef mocks base method.
-func (m *MockRouterClient) ReplyDebugNoticef(fmt string, args ...any) error {
+func (m *MockRouterClient) ReplyDebugNoticef(fmt string, args ...interface{}) error {
 	m.ctrl.T.Helper()
-	varargs := []any{fmt}
+	varargs := []interface{}{fmt}
 	for _, a := range args {
 		varargs = append(varargs, a)
 	}
@@ -483,9 +493,9 @@ func (m *MockRouterClient) ReplyDebugNoticef(fmt string, args ...any) error {
 }
 
 // ReplyDebugNoticef indicates an expected call of ReplyDebugNoticef.
-func (mr *MockRouterClientMockRecorder) ReplyDebugNoticef(fmt any, args ...any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) ReplyDebugNoticef(fmt interface{}, args ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	varargs := append([]any{fmt}, args...)
+	varargs := append([]interface{}{fmt}, args...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyDebugNoticef", reflect.TypeOf((*MockRouterClient)(nil).ReplyDebugNoticef), varargs...)
 }
 
@@ -498,7 +508,7 @@ func (m *MockRouterClient) ReplyErrMsg(errmsg string) error {
 }
 
 // ReplyErrMsg indicates an expected call of ReplyErrMsg.
-func (mr *MockRouterClientMockRecorder) ReplyErrMsg(errmsg any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) ReplyErrMsg(errmsg interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyErrMsg", reflect.TypeOf((*MockRouterClient)(nil).ReplyErrMsg), errmsg)
 }
@@ -512,7 +522,7 @@ func (m *MockRouterClient) ReplyNotice(message string) error {
 }
 
 // ReplyNotice indicates an expected call of ReplyNotice.
-func (mr *MockRouterClientMockRecorder) ReplyNotice(message any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) ReplyNotice(message interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyNotice", reflect.TypeOf((*MockRouterClient)(nil).ReplyNotice), message)
 }
@@ -554,15 +564,15 @@ func (m *MockRouterClient) ReplyWarningMsg(msg string) error {
 }
 
 // ReplyWarningMsg indicates an expected call of ReplyWarningMsg.
-func (mr *MockRouterClientMockRecorder) ReplyWarningMsg(msg any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) ReplyWarningMsg(msg interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyWarningMsg", reflect.TypeOf((*MockRouterClient)(nil).ReplyWarningMsg), msg)
 }
 
 // ReplyWarningf mocks base method.
-func (m *MockRouterClient) ReplyWarningf(fmt string, args ...any) error {
+func (m *MockRouterClient) ReplyWarningf(fmt string, args ...interface{}) error {
 	m.ctrl.T.Helper()
-	varargs := []any{fmt}
+	varargs := []interface{}{fmt}
 	for _, a := range args {
 		varargs = append(varargs, a)
 	}
@@ -572,9 +582,9 @@ func (m *MockRouterClient) ReplyWarningf(fmt string, args ...any) error {
 }
 
 // ReplyWarningf indicates an expected call of ReplyWarningf.
-func (mr *MockRouterClientMockRecorder) ReplyWarningf(fmt any, args ...any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) ReplyWarningf(fmt interface{}, args ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	varargs := append([]any{fmt}, args...)
+	varargs := append([]interface{}{fmt}, args...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyWarningf", reflect.TypeOf((*MockRouterClient)(nil).ReplyWarningf), varargs...)
 }
 
@@ -611,7 +621,7 @@ func (m *MockRouterClient) ResetParam(arg0 string) {
 }
 
 // ResetParam indicates an expected call of ResetParam.
-func (mr *MockRouterClientMockRecorder) ResetParam(arg0 any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) ResetParam(arg0 interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetParam", reflect.TypeOf((*MockRouterClient)(nil).ResetParam), arg0)
 }
@@ -635,7 +645,7 @@ func (m *MockRouterClient) RollbackToSP(arg0 string) {
 }
 
 // RollbackToSP indicates an expected call of RollbackToSP.
-func (mr *MockRouterClientMockRecorder) RollbackToSP(arg0 any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) RollbackToSP(arg0 interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackToSP", reflect.TypeOf((*MockRouterClient)(nil).RollbackToSP), arg0)
 }
@@ -675,7 +685,7 @@ func (m *MockRouterClient) Savepoint(arg0 string) {
 }
 
 // Savepoint indicates an expected call of Savepoint.
-func (mr *MockRouterClientMockRecorder) Savepoint(arg0 any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) Savepoint(arg0 interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Savepoint", reflect.TypeOf((*MockRouterClient)(nil).Savepoint), arg0)
 }
@@ -689,7 +699,7 @@ func (m *MockRouterClient) Send(msg pgproto3.BackendMessage) error {
 }
 
 // Send indicates an expected call of Send.
-func (mr *MockRouterClientMockRecorder) Send(msg any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) Send(msg interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRouterClient)(nil).Send), msg)
 }
@@ -703,7 +713,7 @@ func (m *MockRouterClient) SendCtx(ctx context.Context, msg pgproto3.BackendMess
 }
 
 // SendCtx indicates an expected call of SendCtx.
-func (mr *MockRouterClientMockRecorder) SendCtx(ctx, msg any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) SendCtx(ctx, msg interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCtx", reflect.TypeOf((*MockRouterClient)(nil).SendCtx), ctx, msg)
 }
@@ -755,7 +765,7 @@ func (m *MockRouterClient) SetAuthType(arg0 uint32) error {
 }
 
 // SetAuthType indicates an expected call of SetAuthType.
-func (mr *MockRouterClientMockRecorder) SetAuthType(arg0 any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) SetAuthType(arg0 interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthType", reflect.TypeOf((*MockRouterClient)(nil).SetAuthType), arg0)
 }
@@ -767,7 +777,7 @@ func (m *MockRouterClient) SetParam(arg0, arg1 string) {
 }
 
 // SetParam indicates an expected call of SetParam.
-func (mr *MockRouterClientMockRecorder) SetParam(arg0, arg1 any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) SetParam(arg0, arg1 interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParam", reflect.TypeOf((*MockRouterClient)(nil).SetParam), arg0, arg1)
 }
@@ -779,7 +789,7 @@ func (m *MockRouterClient) SetTsa(arg0 string) {
 }
 
 // SetTsa indicates an expected call of SetTsa.
-func (mr *MockRouterClientMockRecorder) SetTsa(arg0 any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) SetTsa(arg0 interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTsa", reflect.TypeOf((*MockRouterClient)(nil).SetTsa), arg0)
 }
@@ -845,7 +855,7 @@ func (m *MockRouterClient) StorePreparedStatement(name, query string) {
 }
 
 // StorePreparedStatement indicates an expected call of StorePreparedStatement.
-func (mr *MockRouterClientMockRecorder) StorePreparedStatement(name, query any) *gomock.Call {
+func (mr *MockRouterClientMockRecorder) StorePreparedStatement(name, query interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePreparedStatement", reflect.TypeOf((*MockRouterClient)(nil).StorePreparedStatement), name, query)
 }
diff --git a/router/mock/poolmgr/mock_pool_mgr.go b/router/mock/poolmgr/mock_pool_mgr.go
index fa0559d..d881ab1 100644
--- a/router/mock/poolmgr/mock_pool_mgr.go
+++ b/router/mock/poolmgr/mock_pool_mgr.go
@@ -1,21 +1,17 @@
 // Code generated by MockGen. DO NOT EDIT.
 // Source: ./router/poolmgr/pool_mgr.go
-//
-// Generated by this command:
-//
-//	mockgen -source=./router/poolmgr/pool_mgr.go -destination=./router/mock/poolmgr/mock_pool_mgr.go -package=mock
-//
+
 // Package mock is a generated GoMock package.
 package mock
 
 import (
 	reflect "reflect"
 
+	gomock "github.com/golang/mock/gomock"
 	kr "github.com/pg-sharding/spqr/pkg/models/kr"
 	txstatus "github.com/pg-sharding/spqr/pkg/txstatus"
 	client "github.com/pg-sharding/spqr/router/client"
 	poolmgr "github.com/pg-sharding/spqr/router/poolmgr"
-	gomock "go.uber.org/mock/gomock"
 )
 
 // MockConnectionKeeper is a mock of ConnectionKeeper interface.
@@ -88,7 +84,7 @@ func (m *MockConnectionKeeper) SetTxStatus(status txstatus.TXStatus) {
 }
 
 // SetTxStatus indicates an expected call of SetTxStatus.
-func (mr *MockConnectionKeeperMockRecorder) SetTxStatus(status any) *gomock.Call {
+func (mr *MockConnectionKeeperMockRecorder) SetTxStatus(status interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTxStatus", reflect.TypeOf((*MockConnectionKeeper)(nil).SetTxStatus), status)
 }
@@ -139,7 +135,7 @@ func (m *MockPoolMgr) ConnectionActive(rst poolmgr.ConnectionKeeper) bool {
 }
 
 // ConnectionActive indicates an expected call of ConnectionActive.
-func (mr *MockPoolMgrMockRecorder) ConnectionActive(rst any) *gomock.Call {
+func (mr *MockPoolMgrMockRecorder) ConnectionActive(rst interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionActive", reflect.TypeOf((*MockPoolMgr)(nil).ConnectionActive), rst)
 }
@@ -153,7 +149,7 @@ func (m *MockPoolMgr) RouteCB(client client.RouterClient, sh []kr.ShardKey) erro
 }
 
 // RouteCB indicates an expected call of RouteCB.
-func (mr *MockPoolMgrMockRecorder) RouteCB(client, sh any) *gomock.Call {
+func (mr *MockPoolMgrMockRecorder) RouteCB(client, sh interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteCB", reflect.TypeOf((*MockPoolMgr)(nil).RouteCB), client, sh)
 }
@@ -167,7 +163,7 @@ func (m *MockPoolMgr) TXBeginCB(rst poolmgr.ConnectionKeeper) error {
 }
 
 // TXBeginCB indicates an expected call of TXBeginCB.
-func (mr *MockPoolMgrMockRecorder) TXBeginCB(rst any) *gomock.Call {
+func (mr *MockPoolMgrMockRecorder) TXBeginCB(rst interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TXBeginCB", reflect.TypeOf((*MockPoolMgr)(nil).TXBeginCB), rst)
 }
@@ -181,7 +177,7 @@ func (m *MockPoolMgr) TXEndCB(rst poolmgr.ConnectionKeeper) error {
 }
 
 // TXEndCB indicates an expected call of TXEndCB.
-func (mr *MockPoolMgrMockRecorder) TXEndCB(rst any) *gomock.Call {
+func (mr *MockPoolMgrMockRecorder) TXEndCB(rst interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TXEndCB", reflect.TypeOf((*MockPoolMgr)(nil).TXEndCB), rst)
 }
@@ -195,7 +191,7 @@ func (m *MockPoolMgr) UnRouteCB(client client.RouterClient, sh []kr.ShardKey) er
 }
 
 // UnRouteCB indicates an expected call of UnRouteCB.
-func (mr *MockPoolMgrMockRecorder) UnRouteCB(client, sh any) *gomock.Call {
+func (mr *MockPoolMgrMockRecorder) UnRouteCB(client, sh interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRouteCB", reflect.TypeOf((*MockPoolMgr)(nil).UnRouteCB), client, sh)
 }
@@ -209,7 +205,7 @@ func (m *MockPoolMgr) UnRouteWithError(client client.RouterClient, sh []kr.Shard
 }
 
 // UnRouteWithError indicates an expected call of UnRouteWithError.
-func (mr *MockPoolMgrMockRecorder) UnRouteWithError(client, sh, errmsg any) *gomock.Call {
+func (mr *MockPoolMgrMockRecorder) UnRouteWithError(client, sh, errmsg interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRouteWithError", reflect.TypeOf((*MockPoolMgr)(nil).UnRouteWithError), client, sh, errmsg)
 }
@@ -223,7 +219,7 @@ func (m *MockPoolMgr) ValidateReRoute(rst poolmgr.ConnectionKeeper) bool {
 }
 
 // ValidateReRoute indicates an expected call of ValidateReRoute.
-func (mr *MockPoolMgrMockRecorder) ValidateReRoute(rst any) *gomock.Call {
+func (mr *MockPoolMgrMockRecorder) ValidateReRoute(rst interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateReRoute", reflect.TypeOf((*MockPoolMgr)(nil).ValidateReRoute), rst)
 }
diff --git a/router/mock/qrouter/mock_qrouter.go b/router/mock/qrouter/mock_qrouter.go
index f94b18a..d18d429 100644
--- a/router/mock/qrouter/mock_qrouter.go
+++ b/router/mock/qrouter/mock_qrouter.go
@@ -1,10 +1,6 @@
 // Code generated by MockGen. DO NOT EDIT.
 // Source: ./router/qrouter/qrouter.go
-//
-// Generated by this command:
-//
-//	mockgen -source=./router/qrouter/qrouter.go -destination=./router/mock/qrouter/mock_qrouter.go -package=mock
-//
+
 // Package mock is a generated GoMock package.
 package mock
 
@@ -12,12 +8,12 @@ import (
 	context "context"
 	reflect "reflect"
 
+	gomock "github.com/golang/mock/gomock"
 	lyx "github.com/pg-sharding/lyx/lyx"
 	meta "github.com/pg-sharding/spqr/pkg/meta"
 	qrouter "github.com/pg-sharding/spqr/router/qrouter"
 	routehint "github.com/pg-sharding/spqr/router/routehint"
 	routingstate "github.com/pg-sharding/spqr/router/routingstate"
-	gomock "go.uber.org/mock/gomock"
 )
 
 // MockQueryRouter is a mock of QueryRouter interface.
@@ -67,7 +63,7 @@ func (m *MockQueryRouter) DeparseKeyWithRangesInternal(ctx context.Context, key
 }
 
 // DeparseKeyWithRangesInternal indicates an expected call of DeparseKeyWithRangesInternal.
-func (mr *MockQueryRouterMockRecorder) DeparseKeyWithRangesInternal(ctx, key, meta any) *gomock.Call {
+func (mr *MockQueryRouterMockRecorder) DeparseKeyWithRangesInternal(ctx, key, meta interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeparseKeyWithRangesInternal", reflect.TypeOf((*MockQueryRouter)(nil).DeparseKeyWithRangesInternal), ctx, key, meta)
 }
@@ -115,18 +111,18 @@ func (mr *MockQueryRouterMockRecorder) Mgr() *gomock.Call {
 }
 
 // Route mocks base method.
-func (m *MockQueryRouter) Route(ctx context.Context, stmt lyx.Node, params [][]byte, rh routehint.RouteHint) (routingstate.RoutingState, error) {
+func (m *MockQueryRouter) Route(ctx context.Context, stmt lyx.Node, dataspace string, params [][]byte, rh routehint.RouteHint) (routingstate.RoutingState, error) {
 	m.ctrl.T.Helper()
-	ret := m.ctrl.Call(m, "Route", ctx, stmt, params, rh)
+	ret := m.ctrl.Call(m, "Route", ctx, stmt, dataspace, params, rh)
 	ret0, _ := ret[0].(routingstate.RoutingState)
 	ret1, _ := ret[1].(error)
 	return ret0, ret1
 }
 
 // Route indicates an expected call of Route.
-func (mr *MockQueryRouterMockRecorder) Route(ctx, stmt, params, rh any) *gomock.Call {
+func (mr *MockQueryRouterMockRecorder) Route(ctx, stmt, dataspace, params, rh interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Route", reflect.TypeOf((*MockQueryRouter)(nil).Route), ctx, stmt, params, rh)
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Route", reflect.TypeOf((*MockQueryRouter)(nil).Route), ctx, stmt, dataspace, params, rh)
 }
 
 // WorldShardsRoutes mocks base method.
diff --git a/router/mock/server/mock_server.go b/router/mock/server/mock_server.go
index 4d7efd8..28fa9b9 100644
--- a/router/mock/server/mock_server.go
+++ b/router/mock/server/mock_server.go
@@ -1,23 +1,19 @@
 // Code generated by MockGen. DO NOT EDIT.
 // Source: ./router/server/server.go
-//
-// Generated by this command:
-//
-//	mockgen -source=./router/server/server.go -destination=router/mock/server/mock_server.go -package=mock
-//
+
 // Package mock is a generated GoMock package.
 package mock
 
 import (
 	reflect "reflect"
 
+	gomock "github.com/golang/mock/gomock"
 	pgproto3 "github.com/jackc/pgx/v5/pgproto3"
 	config "github.com/pg-sharding/spqr/pkg/config"
 	kr "github.com/pg-sharding/spqr/pkg/models/kr"
 	shard "github.com/pg-sharding/spqr/pkg/shard"
 	txstatus "github.com/pg-sharding/spqr/pkg/txstatus"
 	server "github.com/pg-sharding/spqr/router/server"
-	gomock "go.uber.org/mock/gomock"
 )
 
 // MockPreparedStatementHolder is a mock of PreparedStatementHolder interface.
@@ -53,7 +49,7 @@ func (m *MockPreparedStatementHolder) HasPrepareStatement(hash uint64) (bool, se
 }
 
 // HasPrepareStatement indicates an expected call of HasPrepareStatement.
-func (mr *MockPreparedStatementHolderMockRecorder) HasPrepareStatement(hash any) *gomock.Call {
+func (mr *MockPreparedStatementHolderMockRecorder) HasPrepareStatement(hash interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPrepareStatement", reflect.TypeOf((*MockPreparedStatementHolder)(nil).HasPrepareStatement), hash)
 }
@@ -65,7 +61,7 @@ func (m *MockPreparedStatementHolder) PrepareStatement(hash uint64, rd server.Pr
 }
 
 // PrepareStatement indicates an expected call of PrepareStatement.
-func (mr *MockPreparedStatementHolderMockRecorder) PrepareStatement(hash, rd any) *gomock.Call {
+func (mr *MockPreparedStatementHolderMockRecorder) PrepareStatement(hash, rd interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareStatement", reflect.TypeOf((*MockPreparedStatementHolder)(nil).PrepareStatement), hash, rd)
 }
@@ -102,7 +98,7 @@ func (m *MockServer) AddDataShard(clid string, shardKey kr.ShardKey, tsa string)
 }
 
 // AddDataShard indicates an expected call of AddDataShard.
-func (mr *MockServerMockRecorder) AddDataShard(clid, shardKey, tsa any) *gomock.Call {
+func (mr *MockServerMockRecorder) AddDataShard(clid, shardKey, tsa interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDataShard", reflect.TypeOf((*MockServer)(nil).AddDataShard), clid, shardKey, tsa)
 }
@@ -145,7 +141,7 @@ func (m *MockServer) HasPrepareStatement(hash uint64) (bool, server.PreparedStat
 }
 
 // HasPrepareStatement indicates an expected call of HasPrepareStatement.
-func (mr *MockServerMockRecorder) HasPrepareStatement(hash any) *gomock.Call {
+func (mr *MockServerMockRecorder) HasPrepareStatement(hash interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPrepareStatement", reflect.TypeOf((*MockServer)(nil).HasPrepareStatement), hash)
 }
@@ -171,7 +167,7 @@ func (m *MockServer) PrepareStatement(hash uint64, rd server.PreparedStatementDe
 }
 
 // PrepareStatement indicates an expected call of PrepareStatement.
-func (mr *MockServerMockRecorder) PrepareStatement(hash, rd any) *gomock.Call {
+func (mr *MockServerMockRecorder) PrepareStatement(hash, rd interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareStatement", reflect.TypeOf((*MockServer)(nil).PrepareStatement), hash, rd)
 }
@@ -214,7 +210,7 @@ func (m *MockServer) Send(query pgproto3.FrontendMessage) error {
 }
 
 // Send indicates an expected call of Send.
-func (mr *MockServerMockRecorder) Send(query any) *gomock.Call {
+func (mr *MockServerMockRecorder) Send(query interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockServer)(nil).Send), query)
 }
@@ -226,7 +222,7 @@ func (m *MockServer) SetTxStatus(status txstatus.TXStatus) {
 }
 
 // SetTxStatus indicates an expected call of SetTxStatus.
-func (mr *MockServerMockRecorder) SetTxStatus(status any) *gomock.Call {
+func (mr *MockServerMockRecorder) SetTxStatus(status interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTxStatus", reflect.TypeOf((*MockServer)(nil).SetTxStatus), status)
 }
@@ -268,7 +264,7 @@ func (m *MockServer) UnRouteShard(sh kr.ShardKey, rule *config.FrontendRule) err
 }
 
 // UnRouteShard indicates an expected call of UnRouteShard.
-func (mr *MockServerMockRecorder) UnRouteShard(sh, rule any) *gomock.Call {
+func (mr *MockServerMockRecorder) UnRouteShard(sh, rule interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRouteShard", reflect.TypeOf((*MockServer)(nil).UnRouteShard), sh, rule)
 }
diff --git a/router/parser/qparser.go b/router/parser/qparser.go
index a698d1e..c362110 100644
--- a/router/parser/qparser.go
+++ b/router/parser/qparser.go
@@ -4,7 +4,7 @@ import (
 	"strings"
 
 	"github.com/pg-sharding/spqr/pkg/spqrlog"
-	"github.com/pg-sharding/spqr/router/qrouter"
+	spqrparser "github.com/pg-sharding/spqr/yacc/console"
 
 	"github.com/pg-sharding/lyx/lyx"
 )
@@ -29,6 +29,11 @@ func (qp *QParser) Query() string {
 
 type ParseState interface{}
 
+type ParseSet struct {
+	ParseState
+	Element spqrparser.Statement
+}
+
 type ParseStateTXBegin struct {
 	ParseState
 	Options []lyx.TransactionModeItem
@@ -128,7 +133,11 @@ func (qp *QParser) Parse(query string) (ParseState, string, error) {
 
 	routerStmts, err := lyx.Parse(query)
 	if err != nil {
-		return qp.stmt, "", qrouter.ComplexQuery
+		state := CustomSQLQueryParse(query)
+		if state == nil {
+			return nil, comment, err
+		}
+		return state, comment, nil
 	}
 	if routerStmts == nil {
 		qp.state = ParseStateEmptyQuery{}
@@ -238,3 +247,20 @@ func (qp *QParser) Parse(query string) (ParseState, string, error) {
 
 	return ParseStateQuery{}, comment, nil
 }
+
+func CustomSQLQueryParse(query string) ParseState {
+	spqrlog.Zero.Debug().Str("Query", query).Msg("Custom psql query parse")
+	stmt, err := spqrparser.Parse(query)
+	if err != nil {
+		return nil
+	}
+
+	switch statement := stmt.(type) {
+	case *spqrparser.Set:
+		state := &ParseSet{
+			Element: statement.Element,
+		}
+		return state
+	}
+	return nil
+}
diff --git a/router/qrouter/explain.go b/router/qrouter/explain.go
index 686396f..bf36ce4 100644
--- a/router/qrouter/explain.go
+++ b/router/qrouter/explain.go
@@ -10,7 +10,7 @@ import (
 )
 
 func (qr *ProxyQrouter) Explain(ctx context.Context, stmt *lyx.Explain, cli *clientinteractor.PSQLInteractor) error {
-	meta := NewRoutingMetadataContext(nil, nil, nil)
+	meta := NewRoutingMetadataContext(nil, nil, cli.GetDataspace(), nil)
 
 	switch node := stmt.Stmt.(type) {
 	case *lyx.VariableSetStmt:
diff --git a/router/qrouter/local.go b/router/qrouter/local.go
index 070aedc..3fd464c 100644
--- a/router/qrouter/local.go
+++ b/router/qrouter/local.go
@@ -62,7 +62,7 @@ func (l *LocalQrouter) AddDataShard(_ context.Context, ds *datashards.DataShard)
 	return nil
 }
 
-func (l *LocalQrouter) Route(_ context.Context, _ lyx.Node, _ [][]byte, _ routehint.RouteHint) (routingstate.RoutingState, error) {
+func (l *LocalQrouter) Route(_ context.Context, _ lyx.Node, _ string, _ [][]byte, _ routehint.RouteHint) (routingstate.RoutingState, error) {
 	return routingstate.ShardMatchState{
 		Routes: []*routingstate.DataShardRoute{
 			{
diff --git a/router/qrouter/proxy_routing.go b/router/qrouter/proxy_routing.go
index f4e6c6a..6ba402a 100644
--- a/router/qrouter/proxy_routing.go
+++ b/router/qrouter/proxy_routing.go
@@ -48,8 +48,9 @@ type RoutingMetadataContext struct {
 	// INSERT INTO x (...) SELECT 7
 	TargetList []lyx.Node
 
-	rls []*shrule.ShardingRule
-	krs []*kr.KeyRange
+	rls       []*shrule.ShardingRule
+	krs       []*kr.KeyRange
+	dataspace string
 
 	params [][]byte
 	// TODO: include client ops and metadata here
@@ -69,6 +70,7 @@ func (m *RoutingMetadataContext) CheckColumnRls(colname string) bool {
 func NewRoutingMetadataContext(
 	krs []*kr.KeyRange,
 	rls []*shrule.ShardingRule,
+	ds string,
 	params [][]byte) *RoutingMetadataContext {
 	return &RoutingMetadataContext{
 		rels:             map[string][]string{},
@@ -77,6 +79,7 @@ func NewRoutingMetadataContext(
 		unparsed_columns: map[string]struct{}{},
 		krs:              krs,
 		rls:              rls,
+		dataspace:        ds,
 		params:           params,
 	}
 }
@@ -137,7 +140,8 @@ func (qr *ProxyQrouter) DeparseKeyWithRangesInternal(ctx context.Context, key st
 		Msg("checking key with key ranges")
 
 	for _, krkey := range meta.krs {
-		if kr.CmpRangesLessEqual(krkey.LowerBound, []byte(key)) && kr.CmpRangesLess([]byte(key), krkey.UpperBound) {
+		if kr.CmpRangesLessEqual(krkey.LowerBound, []byte(key)) &&
+			kr.CmpRangesLess([]byte(key), krkey.UpperBound) {
 			if err := qr.mgr.ShareKeyRange(krkey.ID); err != nil {
 				return nil, err
 			}
@@ -428,7 +432,7 @@ func (qr *ProxyQrouter) CheckTableIsRoutable(ctx context.Context, node *lyx.Crea
 	return fmt.Errorf("create table stmt ignored: no sharding rule columns found")
 }
 
-func (qr *ProxyQrouter) Route(ctx context.Context, stmt lyx.Node, params [][]byte, rh routehint.RouteHint) (routingstate.RoutingState, error) {
+func (qr *ProxyQrouter) Route(ctx context.Context, stmt lyx.Node, dataspace string, params [][]byte, rh routehint.RouteHint) (routingstate.RoutingState, error) {
 	if stmt == nil {
 		return nil, ComplexQuery
 	}
@@ -445,18 +449,18 @@ func (qr *ProxyQrouter) Route(ctx context.Context, stmt lyx.Node, params [][]byt
 	* Currently, deparse only first query from multi-statement query msg (Enhance)
 	 */
 
-	krs, err := qr.mgr.ListKeyRanges(ctx)
+	krs, err := qr.mgr.ListKeyRanges(ctx, dataspace)
 
 	if err != nil {
 		return nil, err
 	}
 
-	rls, err := qr.mgr.ListShardingRules(ctx)
+	rls, err := qr.mgr.ListShardingRules(ctx, dataspace)
 	if err != nil {
 		return nil, err
 	}
 
-	meta := NewRoutingMetadataContext(krs, rls, params)
+	meta := NewRoutingMetadataContext(krs, rls, dataspace, params)
 
 	tsa := config.TargetSessionAttrsAny
 
diff --git a/router/qrouter/proxy_routing_test.go b/router/qrouter/proxy_routing_test.go
index 721c83a..1b5b26d 100644
--- a/router/qrouter/proxy_routing_test.go
+++ b/router/qrouter/proxy_routing_test.go
@@ -29,10 +29,12 @@ func TestMultiShardRouting(t *testing.T) {
 	}
 	/* TODO: fix by adding configurable setting */
 	db, _ := qdb.NewMemQDB(MemQDBPath)
+	dataspace := "default"
 
 	_ = db.AddShardingRule(context.TODO(), &qdb.ShardingRule{
-		ID:        "id1",
-		TableName: "",
+		ID:          "id1",
+		TableName:   "",
+		DataspaceId: dataspace,
 		Entries: []qdb.ShardingRuleEntry{
 			{
 				Column: "i",
@@ -103,7 +105,7 @@ func TestMultiShardRouting(t *testing.T) {
 
 		assert.NoError(err, "query %s", tt.query)
 
-		tmp, err := pr.Route(context.TODO(), parserRes, nil, routehint.EmptyRouteHint{})
+		tmp, err := pr.Route(context.TODO(), parserRes, dataspace, nil, routehint.EmptyRouteHint{})
 
 		assert.NoError(err, "query %s", tt.query)
 
@@ -121,10 +123,12 @@ func TestComment(t *testing.T) {
 	}
 	/* TODO: fix by adding configurable setting */
 	db, _ := qdb.NewMemQDB(MemQDBPath)
+	dataspace := "default"
 
 	_ = db.AddShardingRule(context.TODO(), &qdb.ShardingRule{
-		ID:        "id1",
-		TableName: "",
+		ID:          "id1",
+		TableName:   "",
+		DataspaceId: dataspace,
 		Entries: []qdb.ShardingRuleEntry{
 			{
 				Column: "i",
@@ -133,19 +137,21 @@ func TestComment(t *testing.T) {
 	})
 
 	err := db.AddKeyRange(context.TODO(), &qdb.KeyRange{
-		ShardID:    "sh1",
-		KeyRangeID: "id1",
-		LowerBound: []byte("1"),
-		UpperBound: []byte("11"),
+		ShardID:     "sh1",
+		DataspaceId: dataspace,
+		KeyRangeID:  "id1",
+		LowerBound:  []byte("1"),
+		UpperBound:  []byte("11"),
 	})
 
 	assert.NoError(err)
 
 	err = db.AddKeyRange(context.TODO(), &qdb.KeyRange{
-		ShardID:    "sh2",
-		KeyRangeID: "id2",
-		LowerBound: []byte("11"),
-		UpperBound: []byte("25"),
+		ShardID:     "sh2",
+		KeyRangeID:  "id2",
+		DataspaceId: dataspace,
+		LowerBound:  []byte("11"),
+		UpperBound:  []byte("25"),
 	})
 
 	assert.NoError(err)
@@ -177,6 +183,7 @@ func TestComment(t *testing.T) {
 						Matchedkr: &kr.KeyRange{
 							ShardID:    "sh1",
 							ID:         "id1",
+							Dataspace:  dataspace,
 							LowerBound: []byte("1"),
 							UpperBound: []byte("11"),
 						},
@@ -191,7 +198,7 @@ func TestComment(t *testing.T) {
 
 		assert.NoError(err, "query %s", tt.query)
 
-		tmp, err := pr.Route(context.TODO(), parserRes, nil, routehint.EmptyRouteHint{})
+		tmp, err := pr.Route(context.TODO(), parserRes, dataspace, nil, routehint.EmptyRouteHint{})
 
 		assert.NoError(err, "query %s", tt.query)
 
@@ -209,10 +216,12 @@ func TestSingleShard(t *testing.T) {
 	}
 	/* TODO: fix by adding configurable setting */
 	db, _ := qdb.NewMemQDB(MemQDBPath)
+	dataspace := "default"
 
 	_ = db.AddShardingRule(context.TODO(), &qdb.ShardingRule{
-		ID:        "id1",
-		TableName: "",
+		ID:          "id1",
+		TableName:   "",
+		DataspaceId: dataspace,
 		Entries: []qdb.ShardingRuleEntry{
 			{
 				Column: "i",
@@ -221,19 +230,21 @@ func TestSingleShard(t *testing.T) {
 	})
 
 	err := db.AddKeyRange(context.TODO(), &qdb.KeyRange{
-		ShardID:    "sh1",
-		KeyRangeID: "id1",
-		LowerBound: []byte("1"),
-		UpperBound: []byte("11"),
+		ShardID:     "sh1",
+		DataspaceId: dataspace,
+		KeyRangeID:  "id1",
+		LowerBound:  []byte("1"),
+		UpperBound:  []byte("11"),
 	})
 
 	assert.NoError(err)
 
 	err = db.AddKeyRange(context.TODO(), &qdb.KeyRange{
-		ShardID:    "sh2",
-		KeyRangeID: "id2",
-		LowerBound: []byte("11"),
-		UpperBound: []byte("25"),
+		ShardID:     "sh2",
+		DataspaceId: dataspace,
+		KeyRangeID:  "id2",
+		LowerBound:  []byte("11"),
+		UpperBound:  []byte("25"),
 	})
 
 	assert.NoError(err)
@@ -265,6 +276,7 @@ func TestSingleShard(t *testing.T) {
 						Matchedkr: &kr.KeyRange{
 							ShardID:    "sh1",
 							ID:         "id1",
+							Dataspace:  dataspace,
 							LowerBound: []byte("1"),
 							UpperBound: []byte("11"),
 						},
@@ -286,6 +298,7 @@ func TestSingleShard(t *testing.T) {
 						Matchedkr: &kr.KeyRange{
 							ShardID:    "sh2",
 							ID:         "id2",
+							Dataspace:  dataspace,
 							LowerBound: []byte("11"),
 							UpperBound: []byte("25"),
 						},
@@ -306,6 +319,7 @@ func TestSingleShard(t *testing.T) {
 						},
 						Matchedkr: &kr.KeyRange{
 							ShardID:    "sh2",
+							Dataspace:  dataspace,
 							ID:         "id2",
 							LowerBound: []byte("11"),
 							UpperBound: []byte("25"),
@@ -327,6 +341,7 @@ func TestSingleShard(t *testing.T) {
 						Matchedkr: &kr.KeyRange{
 							ShardID:    "sh2",
 							ID:         "id2",
+							Dataspace:  dataspace,
 							LowerBound: []byte("11"),
 							UpperBound: []byte("25"),
 						},
@@ -348,6 +363,7 @@ func TestSingleShard(t *testing.T) {
 						Matchedkr: &kr.KeyRange{
 							ShardID:    "sh1",
 							ID:         "id1",
+							Dataspace:  dataspace,
 							LowerBound: []byte("1"),
 							UpperBound: []byte("11"),
 						},
@@ -369,6 +385,7 @@ func TestSingleShard(t *testing.T) {
 						Matchedkr: &kr.KeyRange{
 							ShardID:    "sh1",
 							ID:         "id1",
+							Dataspace:  dataspace,
 							LowerBound: []byte("1"),
 							UpperBound: []byte("11"),
 						},
@@ -390,6 +407,7 @@ func TestSingleShard(t *testing.T) {
 						Matchedkr: &kr.KeyRange{
 							ShardID:    "sh2",
 							ID:         "id2",
+							Dataspace:  dataspace,
 							LowerBound: []byte("11"),
 							UpperBound: []byte("25"),
 						},
@@ -404,7 +422,7 @@ func TestSingleShard(t *testing.T) {
 
 		assert.NoError(err, "query %s", tt.query)
 
-		tmp, err := pr.Route(context.TODO(), parserRes, nil, routehint.EmptyRouteHint{})
+		tmp, err := pr.Route(context.TODO(), parserRes, dataspace, nil, routehint.EmptyRouteHint{})
 
 		assert.NoError(err, "query %s", tt.query)
 
@@ -422,10 +440,12 @@ func TestInsertOffsets(t *testing.T) {
 	}
 	/* TODO: fix by adding configurable setting */
 	db, _ := qdb.NewMemQDB(MemQDBPath)
+	dataspace := "default"
 
 	_ = db.AddShardingRule(context.TODO(), &qdb.ShardingRule{
-		ID:        "id1",
-		TableName: "",
+		ID:          "id1",
+		TableName:   "",
+		DataspaceId: dataspace,
 		Entries: []qdb.ShardingRuleEntry{
 			{
 				Column: "i",
@@ -434,19 +454,21 @@ func TestInsertOffsets(t *testing.T) {
 	})
 
 	err := db.AddKeyRange(context.TODO(), &qdb.KeyRange{
-		ShardID:    "sh1",
-		KeyRangeID: "id1",
-		LowerBound: []byte("1"),
-		UpperBound: []byte("11"),
+		ShardID:     "sh1",
+		KeyRangeID:  "id1",
+		DataspaceId: dataspace,
+		LowerBound:  []byte("1"),
+		UpperBound:  []byte("11"),
 	})
 
 	assert.NoError(err)
 
 	err = db.AddKeyRange(context.TODO(), &qdb.KeyRange{
-		ShardID:    "sh2",
-		KeyRangeID: "id2",
-		LowerBound: []byte("11"),
-		UpperBound: []byte("21"),
+		ShardID:     "sh2",
+		DataspaceId: dataspace,
+		KeyRangeID:  "id2",
+		LowerBound:  []byte("11"),
+		UpperBound:  []byte("21"),
 	})
 
 	assert.NoError(err)
@@ -479,6 +501,7 @@ func TestInsertOffsets(t *testing.T) {
 						Matchedkr: &kr.KeyRange{
 							ShardID:    "sh1",
 							ID:         "id1",
+							Dataspace:  dataspace,
 							LowerBound: []byte("1"),
 							UpperBound: []byte("11"),
 						},
@@ -493,7 +516,7 @@ func TestInsertOffsets(t *testing.T) {
 
 		assert.NoError(err, "query %s", tt.query)
 
-		tmp, err := pr.Route(context.TODO(), parserRes, nil, routehint.EmptyRouteHint{})
+		tmp, err := pr.Route(context.TODO(), parserRes, dataspace, nil, routehint.EmptyRouteHint{})
 
 		assert.NoError(err, "query %s", tt.query)
 
@@ -511,10 +534,12 @@ func TestJoins(t *testing.T) {
 	}
 	/* TODO: fix by adding configurable setting */
 	db, _ := qdb.NewMemQDB(MemQDBPath)
+	dataspace := "default"
 
 	_ = db.AddShardingRule(context.TODO(), &qdb.ShardingRule{
-		ID:        "id1",
-		TableName: "",
+		ID:          "id1",
+		TableName:   "",
+		DataspaceId: dataspace,
 		Entries: []qdb.ShardingRuleEntry{
 			{
 				Column: "i",
@@ -523,19 +548,21 @@ func TestJoins(t *testing.T) {
 	})
 
 	err := db.AddKeyRange(context.TODO(), &qdb.KeyRange{
-		ShardID:    "sh1",
-		KeyRangeID: "id1",
-		LowerBound: []byte("1"),
-		UpperBound: []byte("11"),
+		ShardID:     "sh1",
+		KeyRangeID:  "id1",
+		DataspaceId: dataspace,
+		LowerBound:  []byte("1"),
+		UpperBound:  []byte("11"),
 	})
 
 	assert.NoError(err)
 
 	err = db.AddKeyRange(context.TODO(), &qdb.KeyRange{
-		ShardID:    "sh2",
-		KeyRangeID: "id2",
-		LowerBound: []byte("11"),
-		UpperBound: []byte("21"),
+		ShardID:     "sh2",
+		KeyRangeID:  "id2",
+		DataspaceId: dataspace,
+		LowerBound:  []byte("11"),
+		UpperBound:  []byte("21"),
 	})
 
 	assert.NoError(err)
@@ -565,6 +592,7 @@ func TestJoins(t *testing.T) {
 						Matchedkr: &kr.KeyRange{
 							ShardID:    "sh2",
 							ID:         "id2",
+							Dataspace:  dataspace,
 							LowerBound: []byte("11"),
 							UpperBound: []byte("21"),
 						},
@@ -607,7 +635,7 @@ func TestJoins(t *testing.T) {
 
 		assert.NoError(err, "query %s", tt.query)
 
-		tmp, err := pr.Route(context.TODO(), parserRes, nil, routehint.EmptyRouteHint{})
+		tmp, err := pr.Route(context.TODO(), parserRes, dataspace, nil, routehint.EmptyRouteHint{})
 
 		if tt.err != nil {
 			assert.Equal(tt.err, err, "query %s", tt.query)
@@ -629,10 +657,12 @@ func TestUnnest(t *testing.T) {
 	}
 	/* TODO: fix by adding configurable setting */
 	db, _ := qdb.NewMemQDB(MemQDBPath)
+	dataspace := "default"
 
 	_ = db.AddShardingRule(context.TODO(), &qdb.ShardingRule{
-		ID:        "id1",
-		TableName: "",
+		ID:          "id1",
+		DataspaceId: dataspace,
+		TableName:   "",
 		Entries: []qdb.ShardingRuleEntry{
 			{
 				Column: "i",
@@ -641,19 +671,21 @@ func TestUnnest(t *testing.T) {
 	})
 
 	err := db.AddKeyRange(context.TODO(), &qdb.KeyRange{
-		ShardID:    "sh1",
-		KeyRangeID: "id1",
-		LowerBound: []byte("1"),
-		UpperBound: []byte("11"),
+		ShardID:     "sh1",
+		KeyRangeID:  "id1",
+		DataspaceId: dataspace,
+		LowerBound:  []byte("1"),
+		UpperBound:  []byte("11"),
 	})
 
 	assert.NoError(err)
 
 	err = db.AddKeyRange(context.TODO(), &qdb.KeyRange{
-		ShardID:    "sh2",
-		KeyRangeID: "id2",
-		LowerBound: []byte("11"),
-		UpperBound: []byte("21"),
+		ShardID:     "sh2",
+		DataspaceId: dataspace,
+		KeyRangeID:  "id2",
+		LowerBound:  []byte("11"),
+		UpperBound:  []byte("21"),
 	})
 
 	assert.NoError(err)
@@ -686,6 +718,7 @@ func TestUnnest(t *testing.T) {
 						Matchedkr: &kr.KeyRange{
 							ShardID:    "sh2",
 							ID:         "id2",
+							Dataspace:  dataspace,
 							LowerBound: []byte("11"),
 							UpperBound: []byte("21"),
 						},
@@ -707,6 +740,7 @@ func TestUnnest(t *testing.T) {
 						Matchedkr: &kr.KeyRange{
 							ShardID:    "sh2",
 							ID:         "id2",
+							Dataspace:  dataspace,
 							LowerBound: []byte("11"),
 							UpperBound: []byte("21"),
 						},
@@ -721,7 +755,7 @@ func TestUnnest(t *testing.T) {
 
 		assert.NoError(err, "query %s", tt.query)
 
-		tmp, err := pr.Route(context.TODO(), parserRes, nil, routehint.EmptyRouteHint{})
+		tmp, err := pr.Route(context.TODO(), parserRes, dataspace, nil, routehint.EmptyRouteHint{})
 
 		assert.NoError(err, "query %s", tt.query)
 
@@ -739,10 +773,12 @@ func TestCopySingleShard(t *testing.T) {
 	}
 	/* TODO: fix by adding configurable setting */
 	db, _ := qdb.NewMemQDB(MemQDBPath)
+	dataspace := "default"
 
 	_ = db.AddShardingRule(context.TODO(), &qdb.ShardingRule{
-		ID:        "id1",
-		TableName: "",
+		ID:          "id1",
+		TableName:   "",
+		DataspaceId: dataspace,
 		Entries: []qdb.ShardingRuleEntry{
 			{
 				Column: "i",
@@ -751,19 +787,21 @@ func TestCopySingleShard(t *testing.T) {
 	})
 
 	err := db.AddKeyRange(context.TODO(), &qdb.KeyRange{
-		ShardID:    "sh1",
-		KeyRangeID: "id1",
-		LowerBound: []byte("1"),
-		UpperBound: []byte("11"),
+		ShardID:     "sh1",
+		DataspaceId: dataspace,
+		KeyRangeID:  "id1",
+		LowerBound:  []byte("1"),
+		UpperBound:  []byte("11"),
 	})
 
 	assert.NoError(err)
 
 	err = db.AddKeyRange(context.TODO(), &qdb.KeyRange{
-		ShardID:    "sh2",
-		KeyRangeID: "id2",
-		LowerBound: []byte("11"),
-		UpperBound: []byte("21"),
+		ShardID:     "sh2",
+		DataspaceId: dataspace,
+		KeyRangeID:  "id2",
+		LowerBound:  []byte("11"),
+		UpperBound:  []byte("21"),
 	})
 
 	assert.NoError(err)
@@ -795,6 +833,7 @@ func TestCopySingleShard(t *testing.T) {
 						Matchedkr: &kr.KeyRange{
 							ShardID:    "sh1",
 							ID:         "id1",
+							Dataspace:  dataspace,
 							LowerBound: []byte("1"),
 							UpperBound: []byte("11"),
 						},
@@ -809,7 +848,135 @@ func TestCopySingleShard(t *testing.T) {
 
 		assert.NoError(err, "query %s", tt.query)
 
-		tmp, err := pr.Route(context.TODO(), parserRes, nil, routehint.EmptyRouteHint{})
+		tmp, err := pr.Route(context.TODO(), parserRes, dataspace, nil, routehint.EmptyRouteHint{})
+
+		assert.NoError(err, "query %s", tt.query)
+
+		assert.Equal(tt.exp, tmp)
+	}
+}
+
+func TestInsertMultiDataspace(t *testing.T) {
+	assert := assert.New(t)
+
+	type tcase struct {
+		query     string
+		dataspace string
+		exp       routingstate.RoutingState
+		err       error
+	}
+	db, _ := qdb.NewMemQDB(MemQDBPath)
+	dataspace1 := "ds1"
+	dataspace2 := "ds2"
+
+	_ = db.AddShardingRule(context.TODO(), &qdb.ShardingRule{
+		ID:          "id1",
+		DataspaceId: dataspace1,
+		TableName:   "",
+		Entries: []qdb.ShardingRuleEntry{
+			{
+				Column: "i",
+			},
+		},
+	})
+
+	_ = db.AddShardingRule(context.TODO(), &qdb.ShardingRule{
+		ID:          "id1",
+		DataspaceId: dataspace2,
+		TableName:   "",
+		Entries: []qdb.ShardingRuleEntry{
+			{
+				Column: "i",
+			},
+		},
+	})
+
+	err := db.AddKeyRange(context.TODO(), &qdb.KeyRange{
+		ShardID:     "sh1",
+		DataspaceId: dataspace1,
+		KeyRangeID:  "id1",
+		LowerBound:  []byte("1"),
+		UpperBound:  []byte("11"),
+	})
+
+	assert.NoError(err)
+
+	err = db.AddKeyRange(context.TODO(), &qdb.KeyRange{
+		ShardID:     "sh2",
+		DataspaceId: dataspace2,
+		KeyRangeID:  "id2",
+		LowerBound:  []byte("1"),
+		UpperBound:  []byte("11"),
+	})
+
+	assert.NoError(err)
+
+	lc := local.NewLocalCoordinator(db)
+
+	pr, err := qrouter.NewProxyRouter(map[string]*config.Shard{
+		"sh1": {
+			Hosts: nil,
+		},
+		"sh2": {
+			Hosts: nil,
+		},
+	}, lc, &config.QRouter{
+		DefaultRouteBehaviour: "BLOCK",
+	})
+
+	assert.NoError(err)
+
+	for _, tt := range []tcase{
+		{
+			query:     "INSERT INTO xxxdst1(i) VALUES(5);",
+			dataspace: dataspace1,
+			exp: routingstate.ShardMatchState{
+				Routes: []*routingstate.DataShardRoute{
+					{
+						Shkey: kr.ShardKey{
+							Name: "sh1",
+						},
+						Matchedkr: &kr.KeyRange{
+							ShardID:    "sh1",
+							ID:         "id1",
+							Dataspace:  dataspace1,
+							LowerBound: []byte("1"),
+							UpperBound: []byte("11"),
+						},
+					},
+				},
+				TargetSessionAttrs: "any",
+			},
+			err: nil,
+		},
+		{
+			query:     "INSERT INTO xxxdst1(i) VALUES(5);",
+			dataspace: dataspace2,
+			exp: routingstate.ShardMatchState{
+				Routes: []*routingstate.DataShardRoute{
+					{
+						Shkey: kr.ShardKey{
+							Name: "sh2",
+						},
+						Matchedkr: &kr.KeyRange{
+							ShardID:    "sh2",
+							ID:         "id2",
+							Dataspace:  dataspace2,
+							LowerBound: []byte("1"),
+							UpperBound: []byte("11"),
+						},
+					},
+				},
+				TargetSessionAttrs: "any",
+			},
+			err: nil,
+		},
+	} {
+		parserRes, err := lyx.Parse(tt.query)
+
+		assert.NoError(err, "query %s", tt.query)
+
+		tmp, err := pr.Route(context.TODO(), parserRes, tt.dataspace, nil, routehint.EmptyRouteHint{})
 
 		assert.NoError(err, "query %s", tt.query)
 
diff --git a/router/qrouter/qrouter.go b/router/qrouter/qrouter.go
index 60560fe..23c7c27 100644
--- a/router/qrouter/qrouter.go
+++ b/router/qrouter/qrouter.go
@@ -16,7 +16,7 @@ import (
 var MatchShardError = fmt.Errorf("failed to match datashard")
 
 type QueryRouter interface {
-	Route(ctx context.Context, stmt lyx.Node, params [][]byte, rh routehint.RouteHint) (routingstate.RoutingState, error)
+	Route(ctx context.Context, stmt lyx.Node, dataspace string, params [][]byte, rh routehint.RouteHint) (routingstate.RoutingState, error)
 
 	WorldShardsRoutes() []*routingstate.DataShardRoute
 	DataShardsRoutes() []*routingstate.DataShardRoute
diff --git a/router/relay/relay.go b/router/relay/relay.go
index a8522ad..682c5db 100644
--- a/router/relay/relay.go
+++ b/router/relay/relay.go
@@ -28,9 +28,7 @@ import (
 type RelayStateMgr interface {
 	poolmgr.ConnectionKeeper
 	route.RouteMgr
-
 	QueryRouter() qrouter.QueryRouter
-
 	Reset() error
 	StartTrace()
 	Flush()
@@ -139,11 +137,7 @@ type RelayStateImpl struct {
 	xBuf []pgproto3.FrontendMessage
 }
 
-func NewRelayState(
-	qr qrouter.QueryRouter,
-	client client.RouterClient,
-	manager poolmgr.PoolMgr,
-	rcfg *config.Router) RelayStateMgr {
+func NewRelayState(qr qrouter.QueryRouter, client client.RouterClient, manager poolmgr.PoolMgr, rcfg *config.Router) *RelayStateImpl {
 	return &RelayStateImpl{
 		activeShards:       nil,
 		txStatus:           txstatus.TXIDLE,
@@ -330,7 +324,7 @@ func (rst *RelayStateImpl) Reroute(params [][]byte, rh routehint.RouteHint) erro
 		Interface("statement", rst.qp.Stmt()).
 		Msg("rerouting the client connection, resolving shard")
 
-	routingState, err := rst.Qr.Route(context.TODO(), rst.qp.Stmt(), params, rh)
+	routingState, err := rst.Qr.Route(context.TODO(), rst.qp.Stmt(), rst.Cl.DS(), params, rh)
 	if err != nil {
 		return fmt.Errorf("error processing query '%v': %v", rst.plainQ, err)
 	}
@@ -464,6 +458,7 @@ func (rst *RelayStateImpl) Connect(shardRoutes []*routingstate.DataShardRoute) e
 	spqrlog.Zero.Debug().
 		Str("user", rst.Cl.Usr()).
 		Str("db", rst.Cl.DB()).
+		Str("dataspace", rst.Cl.DS()).
 		Uint("client", spqrlog.GetPointer(rst.Cl)).
 		Msg("connect client to datashard routes")
 
@@ -1090,6 +1085,7 @@ func (rst *RelayStateImpl) PrepareRelayStep(cmngr poolmgr.PoolMgr, parameters []
 		Uint("client", spqrlog.GetPointer(rst.Client())).
 		Str("user", rst.Client().Usr()).
 		Str("db", rst.Client().DB()).
+		Str("ds", rst.Client().DS()).
 		Msg("preparing relay step for client")
 	// txactive == 0 || activeSh == nil
 	if !cmngr.ValidateReRoute(rst) {
diff --git a/test/regress/schedule/console b/test/regress/schedule/console
index 1c3877e..ac6156f 100644
--- a/test/regress/schedule/console
+++ b/test/regress/schedule/console
@@ -2,6 +2,7 @@ test: show_shards
 test: show_routers
 test: show_key_ranges
 test: show_sharding_rules
+test: show_dataspaces
 test: show_version
 test: drop
 test: add
diff --git a/test/regress/schedule/router b/test/regress/schedule/router
index 259e6d8..68606bb 100644
--- a/test/regress/schedule/router
+++ b/test/regress/schedule/router
@@ -9,4 +9,4 @@ test: with_tables
 test: single_shard_joins
 test: multishard
 test: error
-
+test: switch_dataspace
diff --git a/test/regress/tests/console/expected/add.out b/test/regress/tests/console/expected/add.out
index 989b8b9..91334e3 100644
--- a/test/regress/tests/console/expected/add.out
+++ b/test/regress/tests/console/expected/add.out
@@ -18,9 +18,9 @@ ADD KEY RANGE krid2 FROM 11 TO 20 ROUTE TO sh1;
 (1 row)
 
 ADD SHARDING RULE rule1 COLUMNS id;
-                            add sharding rule                            
--------------------------------------------------------------------------
- created sharding rule rule1 for table (*) with columns [id, hash: x->x]
+                                       add sharding rule                                       
+-----------------------------------------------------------------------------------------------
+ created sharding rule rule1 for table (*) with columns [id, hash: x->x] for dataspace default
 (1 row)
 
 ADD SHARDING RULE rule1 COLUMNS id;
@@ -28,16 +28,16 @@ ERROR:  sharding rule rule1 already present in qdb
 ADD SHARDING RULE rule2 COLUMNS id;
 ERROR:  sharding rule rule2 inlude existing rule rule1
 SHOW key_ranges;
- Key range ID | Shard ID | Lower bound | Upper bound 
---------------+----------+-------------+-------------
- krid1        | sh1      | 1           | 10
- krid2        | sh1      | 11          | 20
+ Key range ID | Shard ID | Dataspace ID | Lower bound | Upper bound 
+--------------+----------+--------------+-------------+-------------
+ krid1        | sh1      | default      | 1           | 10
+ krid2        | sh1      | default      | 11          | 20
 (2 rows)
 
 SHOW sharding_rules;
- Sharding Rule ID | Table Name | Columns | Hash Function 
-------------------+------------+---------+---------------
- rule1            | *          | id      | x->x
+ Sharding Rule ID | Dataspace ID | Table Name | Columns | Hash Function 
+------------------+--------------+------------+---------+---------------
+ rule1            | default      | *          | id      | x->x
 (1 row)
 
 DROP SHARDING RULE rule1;
@@ -55,41 +55,41 @@ DROP KEY RANGE krid1;
 ADD KEY RANGE krid2 FROM 11 TO 20 ROUTE TO sh2;
 ERROR:  key range krid2 already present in qdb
 ADD SHARDING RULE rule1 COLUMNS id;
-                            add sharding rule                            
--------------------------------------------------------------------------
- created sharding rule rule1 for table (*) with columns [id, hash: x->x]
+                                       add sharding rule                                       
+-----------------------------------------------------------------------------------------------
+ created sharding rule rule1 for table (*) with columns [id, hash: x->x] for dataspace default
 (1 row)
 
 SHOW key_ranges;
- Key range ID | Shard ID | Lower bound | Upper bound 
---------------+----------+-------------+-------------
- krid2        | sh1      | 11          | 20
+ Key range ID | Shard ID | Dataspace ID | Lower bound | Upper bound 
+--------------+----------+--------------+-------------+-------------
+ krid2        | sh1      | default      | 11          | 20
 (1 row)
 
 SHOW sharding_rules;
- Sharding Rule ID | Table Name | Columns | Hash Function 
-------------------+------------+---------+---------------
- rule1            | *          | id      | x->x
+ Sharding Rule ID | Dataspace ID | Table Name | Columns | Hash Function 
+------------------+--------------+------------+---------+---------------
+ rule1            | default      | *          | id      | x->x
 (1 row)
 
 ADD SHARDING RULE cat TABLE orders COLUMN iid;
-                              add sharding rule                              
------------------------------------------------------------------------------
- created sharding rule cat for table (orders) with columns [iid, hash: x->x]
+                                         add sharding rule                                         
+---------------------------------------------------------------------------------------------------
+ created sharding rule cat for table (orders) with columns [iid, hash: x->x] for dataspace default
 (1 row)
 
 ADD SHARDING RULE dog TABLE delivery COLUMN order_id;
-                                 add sharding rule                                  
-------------------------------------------------------------------------------------
- created sharding rule dog for table (delivery) with columns [order_id, hash: x->x]
+                                            add sharding rule                                             
+----------------------------------------------------------------------------------------------------------
+ created sharding rule dog for table (delivery) with columns [order_id, hash: x->x] for dataspace default
 (1 row)
 
 SHOW sharding_rules;
- Sharding Rule ID | Table Name | Columns  | Hash Function 
-------------------+------------+----------+---------------
- cat              | orders     | iid      | x->x
- dog              | delivery   | order_id | x->x
- rule1            | *          | id       | x->x
+ Sharding Rule ID | Dataspace ID | Table Name | Columns  | Hash Function 
+------------------+--------------+------------+----------+---------------
+ cat              | default      | orders     | iid      | x->x
+ dog              | default      | delivery   | order_id | x->x
+ rule1            | default      | *          | id       | x->x
 (3 rows)
 
 DROP SHARDING RULE ALL;
diff --git a/test/regress/tests/console/expected/drop.out b/test/regress/tests/console/expected/drop.out
index 9953610..c3fdaee 100644
--- a/test/regress/tests/console/expected/drop.out
+++ b/test/regress/tests/console/expected/drop.out
@@ -18,36 +18,36 @@ ADD KEY RANGE krid2 FROM 11 TO 20 ROUTE TO sh1;
 (1 row)
 
 ADD SHARDING RULE rule1 COLUMNS id;
-                            add sharding rule                            
--------------------------------------------------------------------------
- created sharding rule rule1 for table (*) with columns [id, hash: x->x]
+                                       add sharding rule                                       
+-----------------------------------------------------------------------------------------------
+ created sharding rule rule1 for table (*) with columns [id, hash: x->x] for dataspace default
 (1 row)
 
 ADD SHARDING RULE rule2 COLUMNS idx;
-                            add sharding rule                             
---------------------------------------------------------------------------
- created sharding rule rule2 for table (*) with columns [idx, hash: x->x]
+                                       add sharding rule                                        
+------------------------------------------------------------------------------------------------
+ created sharding rule rule2 for table (*) with columns [idx, hash: x->x] for dataspace default
 (1 row)
 
 ADD SHARDING RULE rule3 COLUMNS idy;
-                            add sharding rule                             
---------------------------------------------------------------------------
- created sharding rule rule3 for table (*) with columns [idy, hash: x->x]
+                                       add sharding rule                                        
+------------------------------------------------------------------------------------------------
+ created sharding rule rule3 for table (*) with columns [idy, hash: x->x] for dataspace default
 (1 row)
 
 SHOW key_ranges;
- Key range ID | Shard ID | Lower bound | Upper bound 
---------------+----------+-------------+-------------
- krid1        | sh1      | 1           | 10
- krid2        | sh1      | 11          | 20
+ Key range ID | Shard ID | Dataspace ID | Lower bound | Upper bound 
+--------------+----------+--------------+-------------+-------------
+ krid1        | sh1      | default      | 1           | 10
+ krid2        | sh1      | default      | 11          | 20
 (2 rows)
 
 SHOW sharding_rules;
- Sharding Rule ID | Table Name | Columns | Hash Function 
-------------------+------------+---------+---------------
- rule1            | *          | id      | x->x
- rule2            | *          | idx     | x->x
- rule3            | *          | idy     | x->x
+ Sharding Rule ID | Dataspace ID | Table Name | Columns | Hash Function 
+------------------+--------------+------------+---------+---------------
+ rule1            | default      | *          | id      | x->x
+ rule2            | default      | *          | idx     | x->x
+ rule3            | default      | *          | idy     | x->x
 (3 rows)
 
 DROP KEY RANGE ALL;
@@ -68,12 +68,12 @@ DROP SHARDING RULE ALL;
 (1 row)
 
 SHOW key_ranges;
- Key range ID | Shard ID | Lower bound | Upper bound 
---------------+----------+-------------+-------------
+ Key range ID | Shard ID | Dataspace ID | Lower bound | Upper bound 
+--------------+----------+--------------+-------------+-------------
 (0 rows)
 
 SHOW sharding_rules;
- Sharding Rule ID | Table Name | Columns | Hash Function 
-------------------+------------+---------+---------------
+ Sharding Rule ID | Dataspace ID | Table Name | Columns | Hash Function 
+------------------+--------------+------------+---------+---------------
 (0 rows)
 
diff --git a/test/regress/tests/console/expected/show_dataspaces.out b/test/regress/tests/console/expected/show_dataspaces.out
new file mode 100644
index 0000000..6b93e64
--- /dev/null
+++ b/test/regress/tests/console/expected/show_dataspaces.out
@@ -0,0 +1,26 @@
+
+		SQPR router admin console
+	Here you can configure your routing rules
+------------------------------------------------
+	You can find documentation here 
+https://github.com/pg-sharding/spqr/tree/master/docs
+
+CREATE DATASPACE ds1;
+         add dataspace         
+-------------------------------
+ created dataspace with id ds1
+(1 row)
+
+CREATE DATASPACE ds2;
+         add dataspace         
+-------------------------------
+ created dataspace with id ds2
+(1 row)
+
+SHOW dataspaces;
+ Dataspace ID 
+--------------
+ ds1
+ ds2
+(2 rows)
+
diff --git a/test/regress/tests/console/expected/show_key_ranges.out b/test/regress/tests/console/expected/show_key_ranges.out
index 6bf1106..14e0764 100644
--- a/test/regress/tests/console/expected/show_key_ranges.out
+++ b/test/regress/tests/console/expected/show_key_ranges.out
@@ -18,10 +18,10 @@ ADD KEY RANGE krid2 FROM 11 TO 20 ROUTE TO sh1;
 (1 row)
 
 SHOW key_ranges;
- Key range ID | Shard ID | Lower bound | Upper bound 
---------------+----------+-------------+-------------
- krid1        | sh1      | 1           | 10
- krid2        | sh1      | 11          | 20
+ Key range ID | Shard ID | Dataspace ID | Lower bound | Upper bound 
+--------------+----------+--------------+-------------+-------------
+ krid1        | sh1      | default      | 1           | 10
+ krid2        | sh1      | default      | 11          | 20
 (2 rows)
 
 DROP KEY RANGE ALL;
diff --git a/test/regress/tests/console/expected/show_sharding_rules.out b/test/regress/tests/console/expected/show_sharding_rules.out
index 803ac6a..5102cfc 100644
--- a/test/regress/tests/console/expected/show_sharding_rules.out
+++ b/test/regress/tests/console/expected/show_sharding_rules.out
@@ -6,29 +6,29 @@
 https://github.com/pg-sharding/spqr/tree/master/docs
 
 ADD SHARDING RULE rule1 COLUMNS id;
-                            add sharding rule                            
--------------------------------------------------------------------------
- created sharding rule rule1 for table (*) with columns [id, hash: x->x]
+                                       add sharding rule                                       
+-----------------------------------------------------------------------------------------------
+ created sharding rule rule1 for table (*) with columns [id, hash: x->x] for dataspace default
 (1 row)
 
 ADD SHARDING RULE rule2 COLUMNS idx;
-                            add sharding rule                             
---------------------------------------------------------------------------
- created sharding rule rule2 for table (*) with columns [idx, hash: x->x]
+                                       add sharding rule                                        
+------------------------------------------------------------------------------------------------
+ created sharding rule rule2 for table (*) with columns [idx, hash: x->x] for dataspace default
 (1 row)
 
 ADD SHARDING RULE rule3 COLUMNS idy;
-                            add sharding rule                             
---------------------------------------------------------------------------
- created sharding rule rule3 for table (*) with columns [idy, hash: x->x]
+                                       add sharding rule                                        
+------------------------------------------------------------------------------------------------
+ created sharding rule rule3 for table (*) with columns [idy, hash: x->x] for dataspace default
 (1 row)
 
 SHOW sharding_rules;
- Sharding Rule ID | Table Name | Columns | Hash Function 
-------------------+------------+---------+---------------
- rule1            | *          | id      | x->x
- rule2            | *          | idx     | x->x
- rule3            | *          | idy     | x->x
+ Sharding Rule ID | Dataspace ID | Table Name | Columns | Hash Function 
+------------------+--------------+------------+---------+---------------
+ rule1            | default      | *          | id      | x->x
+ rule2            | default      | *          | idx     | x->x
+ rule3            | default      | *          | idy     | x->x
 (3 rows)
 
 DROP SHARDING RULE ALL;
diff --git a/test/regress/tests/console/sql/show_dataspaces.sql b/test/regress/tests/console/sql/show_dataspaces.sql
new file mode 100644
index 0000000..8a5f496
--- /dev/null
+++ b/test/regress/tests/console/sql/show_dataspaces.sql
@@ -0,0 +1,4 @@
+CREATE DATASPACE ds1;
+CREATE DATASPACE ds2;
+
+SHOW dataspaces;
diff --git a/test/regress/tests/router/expected/copy_routing.out b/test/regress/tests/router/expected/copy_routing.out
index 2bf848f..756021b 100644
--- a/test/regress/tests/router/expected/copy_routing.out
+++ b/test/regress/tests/router/expected/copy_routing.out
@@ -7,9 +7,9 @@
 https://github.com/pg-sharding/spqr/tree/master/docs
 
 ADD SHARDING RULE t1 COLUMNS id;
-                          add sharding rule                           
-----------------------------------------------------------------------
- created sharding rule t1 for table (*) with columns [id, hash: x->x]
+                                     add sharding rule                                      
+--------------------------------------------------------------------------------------------
+ created sharding rule t1 for table (*) with columns [id, hash: x->x] for dataspace default
 (1 row)
 
 ADD KEY RANGE krid1 FROM 1 TO 30 ROUTE TO sh1;
diff --git a/test/regress/tests/router/expected/error.out b/test/regress/tests/router/expected/error.out
index d7895d6..bba4161 100644
--- a/test/regress/tests/router/expected/error.out
+++ b/test/regress/tests/router/expected/error.out
@@ -18,9 +18,9 @@ DROP SHARDING RULE ALL;
 (1 row)
 
 CREATE SHARDING RULE r1 COLUMN id;
-                          add sharding rule                           
-----------------------------------------------------------------------
- created sharding rule r1 for table (*) with columns [id, hash: x->x]
+                                     add sharding rule                                      
+--------------------------------------------------------------------------------------------
+ created sharding rule r1 for table (*) with columns [id, hash: x->x] for dataspace default
 (1 row)
 
 CREATE KEY RANGE kridi1 from 1 to 11 route to sh1;
@@ -50,7 +50,7 @@ ERROR:  column "ixxxd" does not exist
 LINE 1: SELECT * FROM x WHERE ixxxd = 1;
                               ^
 SELECT * FROM x WHERE ixxxd = 1 iuwehiuhweui;
-ERROR:  client proccessing error: error processing query 'SELECT * FROM x WHERE ixxxd = 1 iuwehiuhweui;': too complex query to parse, tx status IDLE
+ERROR:  client proccessing error: error processing query 'SELECT * FROM x WHERE ixxxd = 1 iuwehiuhweui;': syntax error on pos 32, tx status IDLE
 SELECT * FROM x WHERE id = 1;
 NOTICE: send query to shard(s) : sh1
  id 
diff --git a/test/regress/tests/router/expected/joins.out b/test/regress/tests/router/expected/joins.out
index 934f193..7e46785 100644
--- a/test/regress/tests/router/expected/joins.out
+++ b/test/regress/tests/router/expected/joins.out
@@ -7,15 +7,15 @@
 https://github.com/pg-sharding/spqr/tree/master/docs
 
 CREATE SHARDING RULE r1 COLUMN id;
-                          add sharding rule                           
-----------------------------------------------------------------------
- created sharding rule r1 for table (*) with columns [id, hash: x->x]
+                                     add sharding rule                                      
+--------------------------------------------------------------------------------------------
+ created sharding rule r1 for table (*) with columns [id, hash: x->x] for dataspace default
 (1 row)
 
 CREATE SHARDING RULE r2 COLUMN w_id;
-                           add sharding rule                            
-------------------------------------------------------------------------
- created sharding rule r2 for table (*) with columns [w_id, hash: x->x]
+                                      add sharding rule                                       
+----------------------------------------------------------------------------------------------
+ created sharding rule r2 for table (*) with columns [w_id, hash: x->x] for dataspace default
 (1 row)
 
 CREATE KEY RANGE kridi1 from 0 to 11 route to sh1;
diff --git a/test/regress/tests/router/expected/mixed_routing.out b/test/regress/tests/router/expected/mixed_routing.out
index edeca69..3f670a4 100644
--- a/test/regress/tests/router/expected/mixed_routing.out
+++ b/test/regress/tests/router/expected/mixed_routing.out
@@ -8,9 +8,9 @@ https://github.com/pg-sharding/spqr/tree/master/docs
 
 -- check that numeric type works
 ADD SHARDING RULE t1 COLUMNS id;
-                          add sharding rule                           
-----------------------------------------------------------------------
- created sharding rule t1 for table (*) with columns [id, hash: x->x]
+                                     add sharding rule                                      
+--------------------------------------------------------------------------------------------
+ created sharding rule t1 for table (*) with columns [id, hash: x->x] for dataspace default
 (1 row)
 
 ADD KEY RANGE krid1 FROM 1 TO 11 ROUTE TO sh1;
@@ -151,9 +151,9 @@ DROP SHARDING RULE ALL;
 
 -- check that uuid type works
 ADD SHARDING RULE t1 COLUMNS id;
-                          add sharding rule                           
-----------------------------------------------------------------------
- created sharding rule t1 for table (*) with columns [id, hash: x->x]
+                                     add sharding rule                                      
+--------------------------------------------------------------------------------------------
+ created sharding rule t1 for table (*) with columns [id, hash: x->x] for dataspace default
 (1 row)
 
 ADD KEY RANGE krid1 FROM 00000000-0000-0000-0000-000000000000 TO 88888888-8888-8888-8888-888888888889 ROUTE TO sh1;
diff --git a/test/regress/tests/router/expected/multishard.out b/test/regress/tests/router/expected/multishard.out
index d2c47ea..3f5f51e 100644
--- a/test/regress/tests/router/expected/multishard.out
+++ b/test/regress/tests/router/expected/multishard.out
@@ -8,9 +8,9 @@ https://github.com/pg-sharding/spqr/tree/master/docs
 
 -- check that numeric type works
 ADD SHARDING RULE t1 COLUMNS id;
-                          add sharding rule                           
-----------------------------------------------------------------------
- created sharding rule t1 for table (*) with columns [id, hash: x->x]
+                                     add sharding rule                                      
+--------------------------------------------------------------------------------------------
+ created sharding rule t1 for table (*) with columns [id, hash: x->x] for dataspace default
 (1 row)
 
 ADD KEY RANGE krid1 FROM 1 TO 11 ROUTE TO sh1;
diff --git a/test/regress/tests/router/expected/shard_routing.out b/test/regress/tests/router/expected/shard_routing.out
index 6d776be..403c115 100644
--- a/test/regress/tests/router/expected/shard_routing.out
+++ b/test/regress/tests/router/expected/shard_routing.out
@@ -7,15 +7,15 @@
 https://github.com/pg-sharding/spqr/tree/master/docs
 
 ADD SHARDING RULE r1 COLUMNS w_id;
-                           add sharding rule                            
-------------------------------------------------------------------------
- created sharding rule r1 for table (*) with columns [w_id, hash: x->x]
+                                      add sharding rule                                       
+----------------------------------------------------------------------------------------------
+ created sharding rule r1 for table (*) with columns [w_id, hash: x->x] for dataspace default
 (1 row)
 
 ADD SHARDING RULE r2 COLUMNS id;
-                          add sharding rule                           
-----------------------------------------------------------------------
- created sharding rule r2 for table (*) with columns [id, hash: x->x]
+                                     add sharding rule                                      
+--------------------------------------------------------------------------------------------
+ created sharding rule r2 for table (*) with columns [id, hash: x->x] for dataspace default
 (1 row)
 
 ADD KEY RANGE krid1 FROM 1 TO 11 ROUTE TO sh1;
diff --git a/test/regress/tests/router/expected/single_shard_joins.out b/test/regress/tests/router/expected/single_shard_joins.out
index fe1d22e..b93de19 100644
--- a/test/regress/tests/router/expected/single_shard_joins.out
+++ b/test/regress/tests/router/expected/single_shard_joins.out
@@ -7,9 +7,9 @@
 https://github.com/pg-sharding/spqr/tree/master/docs
 
 CREATE SHARDING RULE r1 COLUMN i;
-                          add sharding rule                          
----------------------------------------------------------------------
- created sharding rule r1 for table (*) with columns [i, hash: x->x]
+                                     add sharding rule                                     
+-------------------------------------------------------------------------------------------
+ created sharding rule r1 for table (*) with columns [i, hash: x->x] for dataspace default
 (1 row)
 
 CREATE KEY RANGE kridi1 from 0 to 11 route to sh1;
@@ -48,7 +48,7 @@ NOTICE: send query to shard(s) : sh2
 (0 rows)
 
 SELECT * FROM sshjt1 a join sshjt1 b WHERE a.i = 12 ON TRUE;
-ERROR:  client proccessing error: error processing query 'SELECT * FROM sshjt1 a join sshjt1 b WHERE a.i = 12 ON TRUE;': too complex query to parse, tx status IDLE
+ERROR:  client proccessing error: error processing query 'SELECT * FROM sshjt1 a join sshjt1 b WHERE a.i = 12 ON TRUE;': syntax error on pos 37, tx status IDLE
 SELECT * FROM sshjt1 a join sshjt1 b ON TRUE WHERE a.i = 12;
 NOTICE: send query to shard(s) : sh2
  i  | j  | i  | j  
diff --git a/test/regress/tests/router/expected/switch_dataspace.out b/test/regress/tests/router/expected/switch_dataspace.out
new file mode 100644
index 0000000..0b47cc6
--- /dev/null
+++ b/test/regress/tests/router/expected/switch_dataspace.out
@@ -0,0 +1,68 @@
+\c spqr-console
+
+		SQPR router admin console
+	Here you can configure your routing rules
+------------------------------------------------
+	You can find documentation here 
+https://github.com/pg-sharding/spqr/tree/master/docs
+
+CREATE DATASPACE ds1;
+         add dataspace         
+-------------------------------
+ created dataspace with id ds1
+(1 row)
+
+CREATE DATASPACE ds2;
+         add dataspace         
+-------------------------------
+ created dataspace with id ds2
+(1 row)
+
+ADD SHARDING RULE r1 COLUMNS w_id FOR DATASPACE ds1;
+                                    add sharding rule                                     
+------------------------------------------------------------------------------------------
+ created sharding rule r1 for table (*) with columns [w_id, hash: x->x] for dataspace ds1
+(1 row)
+
+ADD SHARDING RULE r2 COLUMNS w_id FOR DATASPACE ds2;
+                                    add sharding rule                                     
+------------------------------------------------------------------------------------------
+ created sharding rule r2 for table (*) with columns [w_id, hash: x->x] for dataspace ds2
+(1 row)
+
+ADD KEY RANGE krid1 FROM 1 TO 11 ROUTE TO sh1 FOR DATASPACE ds1;
+         add key range          
+--------------------------------
+ created key range from 1 to 11
+(1 row)
+
+ADD KEY RANGE krid2 FROM 11 TO 31 ROUTE TO sh2 FOR DATASPACE ds1;
+          add key range          
+---------------------------------
+ created key range from 11 to 31
+(1 row)
+
+ADD KEY RANGE krid3 FROM 11 TO 31 ROUTE TO sh2 FOR DATASPACE ds2;
+          add key range          
+---------------------------------
+ created key range from 11 to 31
+(1 row)
+
+\c regress
+SET DATASPACE ds1;
+CREATE TABLE xx (w_id int);
+NOTICE: send query to shard(s) : sh1,sh2
+INSERT INTO xx(w_id) VALUES(5);
+NOTICE: send query to shard(s) : sh1
+INSERT INTO xx(w_id) VALUES(20);
+NOTICE: send query to shard(s) : sh2
+SELECT * FROM xx WHERE w_id=5;
+NOTICE: send query to shard(s) : sh1
+ w_id 
+------
+    5
+(1 row)
+
+SET DATASPACE ds2;
+SELECT * FROM xx WHERE w_id=5;
+ERROR:  client proccessing error: error processing query 'SELECT * FROM xx WHERE w_id=5;': too complex query to parse, tx status IDLE
diff --git a/test/regress/tests/router/expected/target_session_attrs.out b/test/regress/tests/router/expected/target_session_attrs.out
index ce30ac8..671c650 100644
--- a/test/regress/tests/router/expected/target_session_attrs.out
+++ b/test/regress/tests/router/expected/target_session_attrs.out
@@ -7,9 +7,9 @@
 https://github.com/pg-sharding/spqr/tree/master/docs
 
 ADD SHARDING RULE t1 COLUMNS id;
-                          add sharding rule                           
-----------------------------------------------------------------------
- created sharding rule t1 for table (*) with columns [id, hash: x->x]
+                                     add sharding rule                                      
+--------------------------------------------------------------------------------------------
+ created sharding rule t1 for table (*) with columns [id, hash: x->x] for dataspace default
 (1 row)
 
 ADD KEY RANGE krid1 FROM 1 TO 101 ROUTE TO sh1;
diff --git a/test/regress/tests/router/expected/transactions.out b/test/regress/tests/router/expected/transactions.out
index 1a692f0..d5fdbc0 100644
--- a/test/regress/tests/router/expected/transactions.out
+++ b/test/regress/tests/router/expected/transactions.out
@@ -7,9 +7,9 @@
 https://github.com/pg-sharding/spqr/tree/master/docs
 
 ADD SHARDING RULE t1 COLUMNS id;
-                          add sharding rule                           
-----------------------------------------------------------------------
- created sharding rule t1 for table (*) with columns [id, hash: x->x]
+                                     add sharding rule                                      
+--------------------------------------------------------------------------------------------
+ created sharding rule t1 for table (*) with columns [id, hash: x->x] for dataspace default
 (1 row)
 
 ADD KEY RANGE krid1 FROM 1 TO 101 ROUTE TO sh1;
diff --git a/test/regress/tests/router/expected/with_tables.out b/test/regress/tests/router/expected/with_tables.out
index de588ea..33f2841 100644
--- a/test/regress/tests/router/expected/with_tables.out
+++ b/test/regress/tests/router/expected/with_tables.out
@@ -7,15 +7,15 @@
 https://github.com/pg-sharding/spqr/tree/master/docs
 
 ADD SHARDING RULE t1 TABLE orders COLUMN id;
-                             add sharding rule                             
----------------------------------------------------------------------------
- created sharding rule t1 for table (orders) with columns [id, hash: x->x]
+                                        add sharding rule                                        
+-------------------------------------------------------------------------------------------------
+ created sharding rule t1 for table (orders) with columns [id, hash: x->x] for dataspace default
 (1 row)
 
 ADD SHARDING RULE t2 TABLE delivery COLUMN order_id;
-                                 add sharding rule                                 
------------------------------------------------------------------------------------
- created sharding rule t2 for table (delivery) with columns [order_id, hash: x->x]
+                                            add sharding rule                                            
+---------------------------------------------------------------------------------------------------------
+ created sharding rule t2 for table (delivery) with columns [order_id, hash: x->x] for dataspace default
 (1 row)
 
 ADD KEY RANGE krid1 FROM 1 TO 101 ROUTE TO sh1;
diff --git a/test/regress/tests/router/sql/switch_dataspace.sql b/test/regress/tests/router/sql/switch_dataspace.sql
new file mode 100644
index 0000000..712a0a7
--- /dev/null
+++ b/test/regress/tests/router/sql/switch_dataspace.sql
@@ -0,0 +1,28 @@
+\c spqr-console
+
+CREATE DATASPACE ds1;
+CREATE DATASPACE ds2;
+
+ADD SHARDING RULE r1 COLUMNS w_id FOR DATASPACE ds1;
+ADD SHARDING RULE r2 COLUMNS w_id FOR DATASPACE ds2;
+
+ADD KEY RANGE krid1 FROM 1 TO 11 ROUTE TO sh1 FOR DATASPACE ds1;
+ADD KEY RANGE krid2 FROM 11 TO 31 ROUTE TO sh2 FOR DATASPACE ds1;
+
+ADD KEY RANGE krid3 FROM 11 TO 31 ROUTE TO sh2 FOR DATASPACE ds2;
+
+\c regress
+
+SET DATASPACE ds1;
+
+CREATE TABLE xx (w_id int);
+
+INSERT INTO xx(w_id) VALUES(5);
+
+INSERT INTO xx(w_id) VALUES(20);
+
+SELECT * FROM xx WHERE w_id=5;
+
+SET DATASPACE ds2;
+
+SELECT * FROM xx WHERE w_id=5;
diff --git a/yacc/console/ast.go b/yacc/console/ast.go
index aebe912..a8cfa25 100644
--- a/yacc/console/ast.go
+++ b/yacc/console/ast.go
@@ -33,6 +33,10 @@ type Show struct {
 	Where WhereClauseNode
 }
 
+type Set struct {
+	Element Statement
+}
+
 type Create struct {
 	Element Statement
 }
@@ -40,7 +44,8 @@ type Create struct {
 func (*Create) iStatement() {}
 
 type Drop struct {
-	Element Statement
+	Element    Statement
+	HardDelete bool
 }
 
 func (*Drop) iStatement() {}
@@ -73,6 +78,7 @@ type ShardingRuleDefinition struct {
 	ID        string
 	TableName string
 	Entries   []ShardingRuleEntry
+	Dataspace string
 }
 
 type ShardingRuleEntry struct {
@@ -85,6 +91,7 @@ type KeyRangeDefinition struct {
 	UpperBound []byte
 	ShardID    string
 	KeyRangeID string
+	Dataspace  string
 }
 
 type ShardDefinition struct {
@@ -121,12 +128,17 @@ type ShardingRuleSelector struct {
 	ID string
 }
 
+type DataspaceSelector struct {
+	ID string
+}
+
 type DropRoutersAll struct{}
 
 func (*DropRoutersAll) iStatement() {}
 
 func (*KeyRangeSelector) iDrop()     {}
 func (*ShardingRuleSelector) iDrop() {}
+func (*DataspaceSelector) iDrop()    {}
 
 const (
 	EntityRouters      = "ROUTERS"
@@ -166,6 +178,7 @@ type UnregisterRouter struct {
 // The frollowing constants represent SHOW statements.
 const (
 	DatabasesStr          = "databases"
+	DataspacesStr         = "dataspaces"
 	RoutersStr            = "routers"
 	ShardsStr             = "shards"
 	ShardingRules         = "sharding_rules"
@@ -188,8 +201,10 @@ type Statement interface {
 }
 
 func (*Show) iStatement()                   {}
+func (*Set) iStatement()                    {}
 func (*KeyRangeSelector) iStatement()       {}
 func (*ShardingRuleSelector) iStatement()   {}
+func (*DataspaceSelector) iStatement()      {}
 func (*Lock) iStatement()                   {}
 func (*Unlock) iStatement()                 {}
 func (*Shutdown) iStatement()               {}
diff --git a/yacc/console/gram.go b/yacc/console/gram.go
index ed33dc3..e718a1e 100644
--- a/yacc/console/gram.go
+++ b/yacc/console/gram.go
@@ -31,6 +31,7 @@ type yySymType struct {
 	bool  bool
 	empty struct{}
 
+	set       *Set
 	statement Statement
 	show      *Show
 
@@ -95,36 +96,39 @@ const UNLOCK = 57368
 const SPLIT = 57369
 const MOVE = 57370
 const COMPOSE = 57371
-const SHARDING = 57372
-const COLUMN = 57373
-const TABLE = 57374
-const HASH = 57375
-const FUNCTION = 57376
-const KEY = 57377
-const RANGE = 57378
-const DATASPACE = 57379
-const SHARDS = 57380
-const KEY_RANGES = 57381
-const ROUTERS = 57382
-const SHARD = 57383
-const HOST = 57384
-const SHARDING_RULES = 57385
-const RULE = 57386
-const COLUMNS = 57387
-const VERSION = 57388
-const BY = 57389
-const FROM = 57390
-const TO = 57391
-const WITH = 57392
-const UNITE = 57393
-const ALL = 57394
-const ADDRESS = 57395
-const CLIENT = 57396
-const START = 57397
-const STOP = 57398
-const TRACE = 57399
-const MESSAGES = 57400
-const OP = 57401
+const SET = 57372
+const HARD = 57373
+const SHARDING = 57374
+const COLUMN = 57375
+const TABLE = 57376
+const HASH = 57377
+const FUNCTION = 57378
+const KEY = 57379
+const RANGE = 57380
+const DATASPACE = 57381
+const SHARDS = 57382
+const KEY_RANGES = 57383
+const ROUTERS = 57384
+const SHARD = 57385
+const HOST = 57386
+const SHARDING_RULES = 57387
+const RULE = 57388
+const COLUMNS = 57389
+const VERSION = 57390
+const BY = 57391
+const FROM = 57392
+const TO = 57393
+const WITH = 57394
+const UNITE = 57395
+const ALL = 57396
+const ADDRESS = 57397
+const FOR = 57398
+const CLIENT = 57399
+const START = 57400
+const STOP = 57401
+const TRACE = 57402
+const MESSAGES = 57403
+const OP = 57404
 
 var yyToknames = [...]string{
 	"$end",
@@ -156,6 +160,8 @@ var yyToknames = [...]string{
 	"SPLIT",
 	"MOVE",
 	"COMPOSE",
+	"SET",
+	"HARD",
 	"SHARDING",
 	"COLUMN",
 	"TABLE",
@@ -180,6 +186,7 @@ var yyToknames = [...]string{
 	"UNITE",
 	"ALL",
 	"ADDRESS",
+	"FOR",
 	"CLIENT",
 	"START",
 	"STOP",
@@ -187,17 +194,16 @@ var yyToknames = [...]string{
 	"MESSAGES",
 	"OP",
 }
-
 var yyStatenames = [...]string{}
 
 const yyEofCode = 1
 const yyErrCode = 2
 const yyInitialStackSize = 16
 
-//line gram.y:592
+//line gram.y:615
 
 //line yacctab:1
-var yyExca = [...]int8{
+var yyExca = [...]int{
 	-1, 1,
 	1, -1,
 	-2, 0,
@@ -205,131 +211,137 @@ var yyExca = [...]int8{
 
 const yyPrivate = 57344
 
-const yyLast = 173
-
-var yyAct = [...]uint8{
-	108, 62, 115, 105, 93, 99, 114, 26, 27, 78,
-	49, 48, 76, 61, 77, 112, 74, 29, 28, 33,
-	34, 74, 97, 20, 19, 23, 24, 25, 30, 31,
-	88, 74, 155, 154, 148, 74, 141, 87, 120, 86,
-	74, 132, 80, 72, 117, 122, 70, 98, 75, 40,
-	81, 79, 32, 55, 41, 147, 21, 22, 118, 71,
-	42, 84, 85, 60, 103, 137, 74, 73, 53, 89,
-	90, 92, 95, 51, 94, 153, 50, 152, 100, 101,
-	102, 104, 102, 91, 96, 40, 69, 109, 110, 111,
-	41, 39, 47, 68, 94, 119, 42, 113, 121, 36,
-	123, 54, 56, 74, 38, 37, 83, 65, 66, 67,
-	128, 74, 46, 106, 133, 64, 58, 135, 138, 139,
-	134, 35, 140, 63, 142, 45, 44, 125, 143, 1,
-	125, 145, 127, 126, 146, 127, 126, 135, 144, 130,
-	18, 17, 16, 149, 15, 14, 131, 12, 150, 13,
-	151, 8, 9, 136, 116, 156, 157, 43, 6, 5,
-	4, 3, 7, 11, 10, 59, 57, 52, 2, 107,
-	129, 124, 82,
+const yyLast = 185
+
+var yyAct = [...]int{
+
+	112, 139, 66, 109, 97, 119, 103, 118, 28, 29,
+	82, 52, 51, 80, 141, 65, 81, 121, 31, 30,
+	35, 36, 116, 75, 21, 20, 25, 26, 27, 32,
+	33, 122, 24, 75, 101, 92, 164, 75, 75, 163,
+	141, 156, 147, 75, 74, 91, 124, 78, 90, 136,
+	121, 84, 76, 126, 102, 34, 143, 154, 44, 43,
+	22, 23, 85, 45, 122, 43, 88, 89, 64, 46,
+	83, 79, 59, 93, 94, 77, 57, 96, 99, 155,
+	75, 55, 104, 107, 106, 108, 106, 105, 95, 100,
+	98, 113, 114, 115, 42, 39, 162, 75, 161, 123,
+	73, 117, 72, 125, 41, 127, 40, 110, 38, 87,
+	98, 75, 62, 68, 132, 37, 50, 47, 54, 137,
+	53, 67, 144, 145, 140, 138, 49, 146, 48, 148,
+	1, 134, 149, 19, 18, 17, 151, 129, 135, 152,
+	153, 16, 131, 130, 140, 58, 60, 15, 150, 13,
+	157, 69, 70, 71, 14, 158, 159, 129, 9, 160,
+	10, 142, 131, 130, 165, 166, 120, 167, 168, 6,
+	5, 4, 3, 8, 12, 11, 7, 63, 61, 56,
+	2, 111, 133, 128, 86,
 }
-
-var yyPact = [...]int16{
-	1, -1000, 86, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
-	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19,
-	55, -46, -47, 38, 18, 18, 112, 9, 111, -1000,
-	18, 18, 18, 73, 66, -1000, -1000, -1000, -1000, -1000,
-	2, 23, 17, -1000, -1000, -1000, -1000, 107, -40, -49,
-	-1000, 15, -1000, -2, -1000, 14, -1000, 98, -1000, 111,
-	111, -1000, -1000, -1000, -1000, -9, -12, -20, 107, 31,
-	62, 36, -28, 5, -1000, -1000, -53, 107, -1000, 27,
-	12, 107, -1000, 99, -1000, -1000, 107, 107, 107, -38,
-	-1000, -1000, 42, 13, 107, -10, 111, 3, 111, -1000,
-	-1000, -1000, -1000, -1000, -1000, 126, 99, 135, -1000, -6,
-	-1000, -1000, 111, 13, 13, -1000, 32, 107, 107, -1000,
-	111, -13, 111, -1000, 99, -1000, -1000, -1000, 123, 111,
-	-1000, -1000, 111, -1000, 13, -1000, -1000, 21, -1000, -1000,
-	-15, 111, -1000, 126, -1000, -1000, -1000, 107, 111, 56,
-	-1000, 54, -16, -17, 107, 107, -1000, -1000,
+var yyPact = [...]int{
+
+	2, -1000, 95, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
+	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
+	26, 26, -48, -49, 20, 44, 35, 35, 108, 11,
+	109, -1000, 35, 35, 35, 82, 80, -1000, -1000, -1000,
+	-1000, -1000, -1000, 107, 6, 37, 19, -1000, -1000, -1000,
+	-1000, -41, -51, -1000, -1000, 32, -1000, 5, -1000, 24,
+	-1000, 101, -1000, 109, 109, -1000, -1000, -1000, -1000, -2,
+	-6, -17, 107, 34, -1000, -1000, 76, 39, -18, 10,
+	-55, 107, -1000, 33, 29, 107, -1000, 93, -1000, -1000,
+	107, 107, 107, -33, -1000, -1000, 56, 17, 107, -4,
+	109, 9, 109, -1000, -1000, -1000, -1000, -1000, -1000, 153,
+	93, 127, -1000, 0, -1000, -1000, 109, 17, -16, -1000,
+	21, 107, 107, -1000, 109, -9, 109, -1000, 93, -1000,
+	-1000, -1000, 133, 109, -1000, -1000, 109, -1000, -16, -1000,
+	-1000, 18, -1000, 43, -1000, -1000, -10, 109, -1000, 153,
+	-1000, -1000, -1000, -1000, 107, 107, 109, 77, -1000, -1000,
+	75, -12, -15, 107, 107, -42, -42, -1000, -1000,
 }
+var yyPgo = [...]int{
 
-var yyPgo = [...]uint8{
-	0, 172, 3, 171, 170, 169, 1, 0, 168, 167,
-	76, 166, 165, 164, 163, 162, 161, 160, 159, 158,
-	157, 105, 104, 91, 6, 2, 4, 154, 153, 152,
-	151, 149, 147, 145, 144, 142, 141, 140, 129, 121,
+	0, 184, 3, 183, 182, 181, 2, 0, 180, 179,
+	118, 178, 177, 176, 175, 174, 173, 172, 171, 170,
+	169, 95, 106, 104, 94, 7, 5, 4, 166, 161,
+	1, 160, 158, 154, 149, 147, 141, 135, 134, 133,
+	130, 115,
 }
+var yyR1 = [...]int{
 
-var yyR1 = [...]int8{
-	0, 38, 39, 39, 8, 8, 8, 8, 8, 8,
+	0, 40, 41, 41, 8, 8, 8, 8, 8, 8,
 	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
-	6, 6, 7, 3, 3, 3, 4, 4, 5, 2,
-	2, 2, 1, 1, 11, 12, 15, 15, 15, 15,
-	16, 16, 16, 18, 18, 19, 17, 17, 17, 17,
-	13, 30, 20, 21, 21, 24, 24, 25, 26, 26,
-	27, 27, 28, 28, 22, 22, 23, 23, 29, 9,
-	10, 33, 14, 14, 34, 35, 32, 31, 36, 37,
-	37,
+	8, 6, 6, 7, 3, 3, 3, 4, 4, 5,
+	2, 2, 2, 1, 1, 11, 12, 13, 16, 16,
+	16, 16, 17, 17, 17, 17, 19, 19, 20, 18,
+	18, 18, 18, 14, 32, 21, 22, 22, 25, 25,
+	26, 27, 27, 28, 28, 29, 29, 30, 30, 23,
+	23, 24, 24, 31, 9, 10, 35, 15, 15, 36,
+	37, 34, 33, 38, 39, 39,
 }
+var yyR2 = [...]int{
 
-var yyR2 = [...]int8{
 	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
 	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
-	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
-	3, 3, 0, 2, 1, 1, 2, 4, 2, 4,
-	2, 2, 2, 4, 4, 3, 2, 2, 2, 2,
-	3, 2, 2, 5, 4, 1, 2, 2, 2, 0,
-	2, 2, 3, 0, 10, 9, 5, 4, 2, 3,
-	3, 6, 3, 3, 4, 4, 2, 1, 5, 3,
-	3,
+	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+	3, 3, 3, 0, 2, 1, 1, 2, 2, 4,
+	2, 4, 2, 2, 2, 2, 4, 4, 3, 2,
+	2, 2, 2, 3, 2, 2, 6, 5, 1, 2,
+	2, 2, 0, 2, 2, 3, 0, 3, 0, 11,
+	10, 5, 4, 2, 3, 3, 6, 3, 3, 4,
+	4, 2, 1, 5, 3, 3,
 }
-
-var yyChk = [...]int16{
-	-1000, -38, -8, -16, -17, -18, -19, -15, -30, -29,
-	-13, -14, -32, -31, -33, -34, -35, -36, -37, 23,
-	22, 55, 56, 24, 25, 26, 6, 7, 17, 16,
-	27, 28, 51, 18, 19, -39, 13, -21, -22, -23,
-	30, 35, 41, -20, -21, -22, -23, 37, 57, 57,
-	-10, 35, -9, 30, -10, 35, -10, -11, 4, -12,
-	54, 4, -6, 12, 4, -10, -10, -10, 20, 20,
-	44, 36, -7, 50, 4, -7, 52, 54, 58, 36,
-	44, 36, -1, 8, -6, -6, 48, 49, 50, -7,
-	-7, 52, -7, -26, 32, -7, 48, 50, 42, 58,
-	-7, 52, -7, 52, -7, -2, 14, -5, -7, -7,
-	-7, -7, 53, -26, -24, -25, -27, 31, 45, -7,
-	48, -6, 42, -6, -3, 4, 10, 9, -2, -4,
-	4, 11, 47, -6, -24, -25, -28, 33, -7, -7,
-	-6, 49, -6, -2, 15, -6, -6, 34, 49, -6,
-	-7, -6, 21, 21, 49, 49, -7, -7,
+var yyChk = [...]int{
+
+	-1000, -40, -8, -17, -18, -19, -20, -13, -16, -32,
+	-31, -14, -15, -34, -33, -35, -36, -37, -38, -39,
+	23, 22, 58, 59, 30, 24, 25, 26, 6, 7,
+	17, 16, 27, 28, 53, 18, 19, -41, 13, -21,
+	-22, -23, -24, 39, 32, 37, 43, -21, -22, -23,
+	-24, 60, 60, -21, -10, 37, -9, 32, -10, 37,
+	-10, -11, 4, -12, 57, 4, -6, 12, 4, -10,
+	-10, -10, 20, 20, -7, 4, 46, 38, -7, 52,
+	54, 57, 61, 38, 46, 38, -1, 8, -6, -6,
+	50, 51, 52, -7, -7, 54, -7, -27, 34, -7,
+	50, 52, 44, 61, -7, 54, -7, 54, -7, -2,
+	14, -5, -7, -7, -7, -7, 55, -27, -25, -26,
+	-28, 33, 47, -7, 50, -6, 44, -6, -3, 4,
+	10, 9, -2, -4, 4, 11, 49, -6, -25, -30,
+	-26, 56, -29, 35, -7, -7, -6, 51, -6, -2,
+	15, -6, -6, -30, 39, 36, 51, -6, -7, -7,
+	-6, 21, 21, 51, 51, -7, -7, -30, -30,
 }
+var yyDef = [...]int{
 
-var yyDef = [...]int8{
 	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
-	11, 12, 13, 14, 15, 16, 17, 18, 19, 0,
-	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
-	0, 0, 0, 0, 0, 1, 3, 40, 41, 42,
-	0, 0, 0, 46, 47, 48, 49, 0, 0, 0,
-	36, 0, 38, 0, 51, 0, 68, 32, 34, 0,
-	0, 35, 76, 20, 21, 0, 0, 0, 0, 0,
-	59, 0, 0, 0, 22, 52, 0, 0, 45, 0,
-	0, 0, 50, 0, 72, 73, 0, 0, 0, 0,
-	79, 80, 59, 0, 0, 0, 0, 0, 0, 43,
-	44, 37, 70, 39, 69, 33, 0, 0, 28, 0,
-	74, 75, 0, 0, 54, 55, 63, 0, 0, 58,
-	0, 0, 0, 67, 0, 23, 24, 25, 0, 0,
-	26, 27, 0, 78, 53, 56, 57, 0, 60, 61,
-	0, 0, 66, 31, 29, 30, 71, 0, 0, 0,
-	62, 0, 0, 0, 0, 0, 65, 64,
+	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0, 82, 0, 0, 0, 0, 0, 1, 3, 42,
+	43, 44, 45, 0, 0, 0, 0, 49, 50, 51,
+	52, 0, 0, 37, 38, 0, 40, 0, 54, 0,
+	73, 33, 35, 0, 0, 36, 81, 21, 22, 0,
+	0, 0, 0, 0, 55, 23, 62, 0, 0, 0,
+	0, 0, 48, 0, 0, 0, 53, 0, 77, 78,
+	0, 0, 0, 0, 84, 85, 62, 0, 0, 0,
+	0, 0, 0, 46, 47, 39, 75, 41, 74, 34,
+	0, 0, 29, 0, 79, 80, 0, 0, 68, 58,
+	66, 0, 0, 61, 0, 0, 0, 72, 0, 24,
+	25, 26, 0, 0, 27, 28, 0, 83, 68, 57,
+	59, 0, 60, 0, 63, 64, 0, 0, 71, 32,
+	30, 31, 76, 56, 0, 0, 0, 0, 67, 65,
+	0, 0, 0, 0, 0, 68, 68, 70, 69,
 }
+var yyTok1 = [...]int{
 
-var yyTok1 = [...]int8{
 	1,
 }
+var yyTok2 = [...]int{
 
-var yyTok2 = [...]int8{
 	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
 	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
 	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
 	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
 	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
-	52, 53, 54, 55, 56, 57, 58, 59,
+	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
+	62,
 }
-
-var yyTok3 = [...]int8{
+var yyTok3 = [...]int{
 	0,
 }
 
@@ -411,9 +423,9 @@ func yyErrorMessage(state, lookAhead int) string {
 	expected := make([]int, 0, 4)
 
 	// Look for shiftable tokens.
-	base := int(yyPact[state])
+	base := yyPact[state]
 	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
-		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
+		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
 			if len(expected) == cap(expected) {
 				return res
 			}
@@ -423,13 +435,13 @@ func yyErrorMessage(state, lookAhead int) string {
 
 	if yyDef[state] == -2 {
 		i := 0
-		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
+		for yyExca[i] != -1 || yyExca[i+1] != state {
 			i += 2
 		}
 
 		// Look for tokens that we accept or reduce.
 		for i += 2; yyExca[i] >= 0; i += 2 {
-			tok := int(yyExca[i])
+			tok := yyExca[i]
 			if tok < TOKSTART || yyExca[i+1] == 0 {
 				continue
 			}
@@ -460,30 +472,30 @@ func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
 	token = 0
 	char = lex.Lex(lval)
 	if char <= 0 {
-		token = int(yyTok1[0])
+		token = yyTok1[0]
 		goto out
 	}
 	if char < len(yyTok1) {
-		token = int(yyTok1[char])
+		token = yyTok1[char]
 		goto out
 	}
 	if char >= yyPrivate {
 		if char < yyPrivate+len(yyTok2) {
-			token = int(yyTok2[char-yyPrivate])
+			token = yyTok2[char-yyPrivate]
 			goto out
 		}
 	}
 	for i := 0; i < len(yyTok3); i += 2 {
-		token = int(yyTok3[i+0])
+		token = yyTok3[i+0]
 		if token == char {
-			token = int(yyTok3[i+1])
+			token = yyTok3[i+1]
 			goto out
 		}
 	}
 
 out:
 	if token == 0 {
-		token = int(yyTok2[1]) /* unknown char */
+		token = yyTok2[1] /* unknown char */
 	}
 	if yyDebug >= 3 {
 		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
@@ -538,7 +550,7 @@ yystack:
 	yyS[yyp].yys = yystate
 
 yynewstate:
-	yyn = int(yyPact[yystate])
+	yyn = yyPact[yystate]
 	if yyn <= yyFlag {
 		goto yydefault /* simple state */
 	}
@@ -549,8 +561,8 @@ yynewstate:
 	if yyn < 0 || yyn >= yyLast {
 		goto yydefault
 	}
-	yyn = int(yyAct[yyn])
-	if int(yyChk[yyn]) == yytoken { /* valid shift */
+	yyn = yyAct[yyn]
+	if yyChk[yyn] == yytoken { /* valid shift */
 		yyrcvr.char = -1
 		yytoken = -1
 		yyVAL = yyrcvr.lval
@@ -563,7 +575,7 @@ yynewstate:
 
 yydefault:
 	/* default state action */
-	yyn = int(yyDef[yystate])
+	yyn = yyDef[yystate]
 	if yyn == -2 {
 		if yyrcvr.char < 0 {
 			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
@@ -572,18 +584,18 @@ yydefault:
 		/* look through exception table */
 		xi := 0
 		for {
-			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
+			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
 				break
 			}
 			xi += 2
 		}
 		for xi += 2; ; xi += 2 {
-			yyn = int(yyExca[xi+0])
+			yyn = yyExca[xi+0]
 			if yyn < 0 || yyn == yytoken {
 				break
 			}
 		}
-		yyn = int(yyExca[xi+1])
+		yyn = yyExca[xi+1]
 		if yyn < 0 {
 			goto ret0
 		}
@@ -605,10 +617,10 @@ yydefault:
 
 			/* find a state where "error" is a legal shift action */
 			for yyp >= 0 {
-				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
+				yyn = yyPact[yyS[yyp].yys] + yyErrCode
 				if yyn >= 0 && yyn < yyLast {
-					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
-					if int(yyChk[yystate]) == yyErrCode {
+					yystate = yyAct[yyn] /* simulate a shift of "error" */
+					if yyChk[yystate] == yyErrCode {
 						goto yystack
 					}
 				}
@@ -644,7 +656,7 @@ yydefault:
 	yypt := yyp
 	_ = yypt // guard against "declared and not used"
 
-	yyp -= int(yyR2[yyn])
+	yyp -= yyR2[yyn]
 	// yyp is now the index of $0. Perform the default action. Iff the
 	// reduced production is ε, $1 is possibly out of range.
 	if yyp+1 >= len(yyS) {
@@ -655,16 +667,16 @@ yydefault:
 	yyVAL = yyS[yyp+1]
 
 	/* consult goto table to find next state */
-	yyn = int(yyR1[yyn])
-	yyg := int(yyPgo[yyn])
+	yyn = yyR1[yyn]
+	yyg := yyPgo[yyn]
 	yyj := yyg + yyS[yyp].yys + 1
 
 	if yyj >= yyLast {
-		yystate = int(yyAct[yyg])
+		yystate = yyAct[yyg]
 	} else {
-		yystate = int(yyAct[yyj])
-		if int(yyChk[yystate]) != -yyn {
-			yystate = int(yyAct[yyg])
+		yystate = yyAct[yyj]
+		if yyChk[yystate] != -yyn {
+			yystate = yyAct[yyg]
 		}
 	}
 	// dummy call; replaced with literal code
@@ -672,175 +684,181 @@ yydefault:
 
 	case 2:
 		yyDollar = yyS[yypt-0 : yypt+1]
-//line gram.y:165
+//line gram.y:168
 		{
 		}
 	case 3:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:166
+//line gram.y:169
 		{
 		}
 	case 4:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:171
+//line gram.y:174
 		{
 			setParseTree(yylex, yyDollar[1].create)
 		}
 	case 5:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:175
+//line gram.y:178
 		{
 			setParseTree(yylex, yyDollar[1].create)
 		}
 	case 6:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:179
+//line gram.y:182
 		{
 			setParseTree(yylex, yyDollar[1].trace)
 		}
 	case 7:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:183
+//line gram.y:186
 		{
 			setParseTree(yylex, yyDollar[1].stoptrace)
 		}
 	case 8:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:187
+//line gram.y:190
 		{
-			setParseTree(yylex, yyDollar[1].drop)
+			setParseTree(yylex, yyDollar[1].set)
 		}
 	case 9:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:191
+//line gram.y:194
 		{
-			setParseTree(yylex, yyDollar[1].lock)
+			setParseTree(yylex, yyDollar[1].drop)
 		}
 	case 10:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:195
+//line gram.y:198
 		{
-			setParseTree(yylex, yyDollar[1].unlock)
+			setParseTree(yylex, yyDollar[1].lock)
 		}
 	case 11:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:199
+//line gram.y:202
 		{
-			setParseTree(yylex, yyDollar[1].show)
+			setParseTree(yylex, yyDollar[1].unlock)
 		}
 	case 12:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:203
+//line gram.y:206
 		{
-			setParseTree(yylex, yyDollar[1].kill)
+			setParseTree(yylex, yyDollar[1].show)
 		}
 	case 13:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:207
+//line gram.y:210
 		{
-			setParseTree(yylex, yyDollar[1].listen)
+			setParseTree(yylex, yyDollar[1].kill)
 		}
 	case 14:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:211
+//line gram.y:214
 		{
-			setParseTree(yylex, yyDollar[1].shutdown)
+			setParseTree(yylex, yyDollar[1].listen)
 		}
 	case 15:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:215
+//line gram.y:218
 		{
-			setParseTree(yylex, yyDollar[1].split)
+			setParseTree(yylex, yyDollar[1].shutdown)
 		}
 	case 16:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:219
+//line gram.y:222
 		{
-			setParseTree(yylex, yyDollar[1].move)
+			setParseTree(yylex, yyDollar[1].split)
 		}
 	case 17:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:223
+//line gram.y:226
 		{
-			setParseTree(yylex, yyDollar[1].unite)
+			setParseTree(yylex, yyDollar[1].move)
 		}
 	case 18:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:227
+//line gram.y:230
 		{
-			setParseTree(yylex, yyDollar[1].register_router)
+			setParseTree(yylex, yyDollar[1].unite)
 		}
 	case 19:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:231
+//line gram.y:234
 		{
-			setParseTree(yylex, yyDollar[1].unregister_router)
+			setParseTree(yylex, yyDollar[1].register_router)
 		}
 	case 20:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:236
+//line gram.y:238
 		{
-			yyVAL.str = string(yyDollar[1].str)
+			setParseTree(yylex, yyDollar[1].unregister_router)
 		}
 	case 21:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:240
+//line gram.y:243
 		{
 			yyVAL.str = string(yyDollar[1].str)
 		}
 	case 22:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:245
+//line gram.y:247
 		{
 			yyVAL.str = string(yyDollar[1].str)
 		}
 	case 23:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:251
+//line gram.y:252
 		{
-			yyVAL.str = yyDollar[1].str
+			yyVAL.str = string(yyDollar[1].str)
 		}
 	case 24:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:253
+//line gram.y:258
 		{
-			yyVAL.str = "AND"
+			yyVAL.str = yyDollar[1].str
 		}
 	case 25:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:255
+//line gram.y:260
 		{
-			yyVAL.str = "OR"
+			yyVAL.str = "AND"
 		}
 	case 26:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:260
+//line gram.y:262
 		{
-			yyVAL.str = yyDollar[1].str
+			yyVAL.str = "OR"
 		}
 	case 27:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:262
+//line gram.y:267
 		{
-			yyVAL.str = "="
+			yyVAL.str = yyDollar[1].str
 		}
 	case 28:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:268
+//line gram.y:269
+		{
+			yyVAL.str = "="
+		}
+	case 29:
+		yyDollar = yyS[yypt-1 : yypt+1]
+//line gram.y:275
 		{
 			yyVAL.colref = ColumnRef{
 				ColName: yyDollar[1].str,
 			}
 		}
-	case 29:
+	case 30:
 		yyDollar = yyS[yypt-3 : yypt+1]
-//line gram.y:276
+//line gram.y:283
 		{
 			yyVAL.where = yyDollar[2].where
 		}
-	case 30:
+	case 31:
 		yyDollar = yyS[yypt-3 : yypt+1]
-//line gram.y:279
+//line gram.y:286
 		{
 			yyVAL.where = WhereClauseLeaf{
 				ColRef: yyDollar[1].colref,
@@ -848,9 +866,9 @@ yydefault:
 				Value:  yyDollar[3].str,
 			}
 		}
-	case 31:
+	case 32:
 		yyDollar = yyS[yypt-3 : yypt+1]
-//line gram.y:287
+//line gram.y:294
 		{
 			yyVAL.where = WhereClauseOp{
 				Op:    yyDollar[2].str,
@@ -858,32 +876,32 @@ yydefault:
 				Right: yyDollar[3].where,
 			}
 		}
-	case 32:
+	case 33:
 		yyDollar = yyS[yypt-0 : yypt+1]
-//line gram.y:297
+//line gram.y:304
 		{
 			yyVAL.where = WhereClauseEmpty{}
 		}
-	case 33:
+	case 34:
 		yyDollar = yyS[yypt-2 : yypt+1]
-//line gram.y:301
+//line gram.y:308
 		{
 			yyVAL.where = yyDollar[2].where
 		}
-	case 34:
+	case 35:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:308
+//line gram.y:315
 		{
 			switch v := strings.ToLower(string(yyDollar[1].str)); v {
-			case DatabasesStr, RoutersStr, PoolsStr, ShardsStr, BackendConnectionsStr, KeyRangesStr, ShardingRules, ClientsStr, StatusStr, VersionStr:
+			case DatabasesStr, RoutersStr, PoolsStr, ShardsStr, BackendConnectionsStr, KeyRangesStr, ShardingRules, ClientsStr, StatusStr, DataspacesStr, VersionStr:
 				yyVAL.str = v
 			default:
 				yyVAL.str = UnsupportedStr
 			}
 		}
-	case 35:
+	case 36:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:319
+//line gram.y:326
 		{
 			switch v := string(yyDollar[1].str); v {
 			case ClientStr:
@@ -892,209 +910,233 @@ yydefault:
 				yyVAL.str = "unsupp"
 			}
 		}
-	case 36:
+	case 37:
 		yyDollar = yyS[yypt-2 : yypt+1]
-//line gram.y:330
+//line gram.y:337
+		{
+			yyVAL.set = &Set{Element: yyDollar[2].ds}
+		}
+	case 38:
+		yyDollar = yyS[yypt-2 : yypt+1]
+//line gram.y:344
 		{
 			yyVAL.drop = &Drop{Element: yyDollar[2].key_range_selector}
 		}
-	case 37:
+	case 39:
 		yyDollar = yyS[yypt-4 : yypt+1]
-//line gram.y:335
+//line gram.y:349
 		{
 			yyVAL.drop = &Drop{Element: &KeyRangeSelector{KeyRangeID: `*`}}
 		}
-	case 38:
+	case 40:
 		yyDollar = yyS[yypt-2 : yypt+1]
-//line gram.y:339
+//line gram.y:353
 		{
 			yyVAL.drop = &Drop{Element: yyDollar[2].sharding_rule_selector}
 		}
-	case 39:
+	case 41:
 		yyDollar = yyS[yypt-4 : yypt+1]
-//line gram.y:344
+//line gram.y:358
 		{
 			yyVAL.drop = &Drop{Element: &ShardingRuleSelector{ID: `*`}}
 		}
-	case 40:
+	case 42:
 		yyDollar = yyS[yypt-2 : yypt+1]
-//line gram.y:350
+//line gram.y:364
+		{
+			yyVAL.create = &Create{Element: yyDollar[2].ds}
+		}
+	case 43:
+		yyDollar = yyS[yypt-2 : yypt+1]
+//line gram.y:369
 		{
 			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
 		}
-	case 41:
+	case 44:
 		yyDollar = yyS[yypt-2 : yypt+1]
-//line gram.y:355
+//line gram.y:374
 		{
 			yyVAL.create = &Create{Element: yyDollar[2].kr}
 		}
-	case 42:
+	case 45:
 		yyDollar = yyS[yypt-2 : yypt+1]
-//line gram.y:359
+//line gram.y:378
 		{
 			yyVAL.create = &Create{Element: yyDollar[2].shard}
 		}
-	case 43:
+	case 46:
 		yyDollar = yyS[yypt-4 : yypt+1]
-//line gram.y:366
+//line gram.y:385
 		{
 			yyVAL.trace = &TraceStmt{All: true}
 		}
-	case 44:
+	case 47:
 		yyDollar = yyS[yypt-4 : yypt+1]
-//line gram.y:369
+//line gram.y:388
 		{
 			yyVAL.trace = &TraceStmt{
 				Client: yyDollar[4].str,
 			}
 		}
-	case 45:
+	case 48:
 		yyDollar = yyS[yypt-3 : yypt+1]
-//line gram.y:377
+//line gram.y:396
 		{
 			yyVAL.stoptrace = &StopTraceStmt{}
 		}
-	case 46:
+	case 49:
 		yyDollar = yyS[yypt-2 : yypt+1]
-//line gram.y:384
+//line gram.y:403
 		{
 			yyVAL.create = &Create{Element: yyDollar[2].ds}
 		}
-	case 47:
+	case 50:
 		yyDollar = yyS[yypt-2 : yypt+1]
-//line gram.y:389
+//line gram.y:408
 		{
 			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
 		}
-	case 48:
+	case 51:
 		yyDollar = yyS[yypt-2 : yypt+1]
-//line gram.y:394
+//line gram.y:413
 		{
 			yyVAL.create = &Create{Element: yyDollar[2].kr}
 		}
-	case 49:
+	case 52:
 		yyDollar = yyS[yypt-2 : yypt+1]
-//line gram.y:398
+//line gram.y:417
 		{
 			yyVAL.create = &Create{Element: yyDollar[2].shard}
 		}
-	case 50:
+	case 53:
 		yyDollar = yyS[yypt-3 : yypt+1]
-//line gram.y:405
+//line gram.y:424
 		{
 			yyVAL.show = &Show{Cmd: yyDollar[2].str, Where: yyDollar[3].where}
 		}
-	case 51:
+	case 54:
 		yyDollar = yyS[yypt-2 : yypt+1]
-//line gram.y:411
+//line gram.y:430
 		{
 			yyVAL.lock = &Lock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
 		}
-	case 52:
+	case 55:
 		yyDollar = yyS[yypt-2 : yypt+1]
-//line gram.y:419
+//line gram.y:438
 		{
 			yyVAL.ds = &DataspaceDefinition{ID: yyDollar[2].str}
 		}
-	case 53:
-		yyDollar = yyS[yypt-5 : yypt+1]
-//line gram.y:425
+	case 56:
+		yyDollar = yyS[yypt-6 : yypt+1]
+//line gram.y:444
 		{
-			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: yyDollar[3].str, TableName: yyDollar[4].str, Entries: yyDollar[5].entrieslist}
+			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: yyDollar[3].str, TableName: yyDollar[4].str, Entries: yyDollar[5].entrieslist, Dataspace: yyDollar[6].str}
 		}
-	case 54:
-		yyDollar = yyS[yypt-4 : yypt+1]
-//line gram.y:430
+	case 57:
+		yyDollar = yyS[yypt-5 : yypt+1]
+//line gram.y:449
 		{
 			str, err := randomHex(6)
 			if err != nil {
 				panic(err)
 			}
-			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: "shrule" + str, TableName: yyDollar[3].str, Entries: yyDollar[4].entrieslist}
+			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: "shrule" + str, TableName: yyDollar[3].str, Entries: yyDollar[4].entrieslist, Dataspace: yyDollar[5].str}
 		}
-	case 55:
+	case 58:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:439
+//line gram.y:458
 		{
 			yyVAL.entrieslist = make([]ShardingRuleEntry, 0)
 			yyVAL.entrieslist = append(yyVAL.entrieslist, yyDollar[1].shruleEntry)
 		}
-	case 56:
+	case 59:
 		yyDollar = yyS[yypt-2 : yypt+1]
-//line gram.y:445
+//line gram.y:464
 		{
 			yyVAL.entrieslist = append(yyDollar[1].entrieslist, yyDollar[2].shruleEntry)
 		}
-	case 57:
+	case 60:
 		yyDollar = yyS[yypt-2 : yypt+1]
-//line gram.y:451
+//line gram.y:470
 		{
 			yyVAL.shruleEntry = ShardingRuleEntry{
 				Column:       yyDollar[1].str,
 				HashFunction: yyDollar[2].str,
 			}
 		}
-	case 58:
+	case 61:
 		yyDollar = yyS[yypt-2 : yypt+1]
-//line gram.y:460
+//line gram.y:479
 		{
 			yyVAL.str = yyDollar[2].str
 		}
-	case 59:
+	case 62:
 		yyDollar = yyS[yypt-0 : yypt+1]
-//line gram.y:463
+//line gram.y:482
 		{
 			yyVAL.str = ""
 		}
-	case 60:
+	case 63:
 		yyDollar = yyS[yypt-2 : yypt+1]
-//line gram.y:467
+//line gram.y:486
 		{
 			yyVAL.str = yyDollar[2].str
 		}
-	case 61:
+	case 64:
 		yyDollar = yyS[yypt-2 : yypt+1]
-//line gram.y:472
+//line gram.y:491
 		{
 			yyVAL.str = yyDollar[2].str
 		}
-	case 62:
+	case 65:
 		yyDollar = yyS[yypt-3 : yypt+1]
-//line gram.y:478
+//line gram.y:497
 		{
 			yyVAL.str = yyDollar[3].str
 		}
-	case 63:
+	case 66:
 		yyDollar = yyS[yypt-0 : yypt+1]
-//line gram.y:481
+//line gram.y:500
 		{
 			yyVAL.str = ""
 		}
-	case 64:
-		yyDollar = yyS[yypt-10 : yypt+1]
-//line gram.y:486
+	case 67:
+		yyDollar = yyS[yypt-3 : yypt+1]
+//line gram.y:503
 		{
-			yyVAL.kr = &KeyRangeDefinition{LowerBound: []byte(yyDollar[5].str), UpperBound: []byte(yyDollar[7].str), ShardID: yyDollar[10].str, KeyRangeID: yyDollar[3].str}
+			yyVAL.str = yyDollar[3].str
 		}
-	case 65:
-		yyDollar = yyS[yypt-9 : yypt+1]
-//line gram.y:491
+	case 68:
+		yyDollar = yyS[yypt-0 : yypt+1]
+//line gram.y:506
+		{
+			yyVAL.str = "default"
+		}
+	case 69:
+		yyDollar = yyS[yypt-11 : yypt+1]
+//line gram.y:511
+		{
+			yyVAL.kr = &KeyRangeDefinition{LowerBound: []byte(yyDollar[5].str), UpperBound: []byte(yyDollar[7].str), ShardID: yyDollar[10].str, KeyRangeID: yyDollar[3].str, Dataspace: yyDollar[11].str}
+		}
+	case 70:
+		yyDollar = yyS[yypt-10 : yypt+1]
+//line gram.y:515
 		{
 			str, err := randomHex(6)
 			if err != nil {
 				panic(err)
 			}
-			yyVAL.kr = &KeyRangeDefinition{LowerBound: []byte(yyDollar[4].str), UpperBound: []byte(yyDollar[6].str), ShardID: yyDollar[9].str, KeyRangeID: "kr" + str}
+			yyVAL.kr = &KeyRangeDefinition{LowerBound: []byte(yyDollar[4].str), UpperBound: []byte(yyDollar[6].str), ShardID: yyDollar[9].str, KeyRangeID: "kr" + str, Dataspace: yyDollar[10].str}
 		}
-	case 66:
+	case 71:
 		yyDollar = yyS[yypt-5 : yypt+1]
-//line gram.y:502
+//line gram.y:526
 		{
 			yyVAL.shard = &ShardDefinition{Id: yyDollar[2].str, Hosts: []string{yyDollar[5].str}}
 		}
-	case 67:
+	case 72:
 		yyDollar = yyS[yypt-4 : yypt+1]
-//line gram.y:507
+//line gram.y:531
 		{
 			str, err := randomHex(6)
 			if err != nil {
@@ -1102,81 +1144,81 @@ yydefault:
 			}
 			yyVAL.shard = &ShardDefinition{Id: "shard" + str, Hosts: []string{yyDollar[4].str}}
 		}
-	case 68:
+	case 73:
 		yyDollar = yyS[yypt-2 : yypt+1]
-//line gram.y:518
+//line gram.y:542
 		{
 			yyVAL.unlock = &Unlock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
 		}
-	case 69:
+	case 74:
 		yyDollar = yyS[yypt-3 : yypt+1]
-//line gram.y:524
+//line gram.y:548
 		{
 			yyVAL.sharding_rule_selector = &ShardingRuleSelector{ID: yyDollar[3].str}
 		}
-	case 70:
+	case 75:
 		yyDollar = yyS[yypt-3 : yypt+1]
-//line gram.y:530
+//line gram.y:554
 		{
 			yyVAL.key_range_selector = &KeyRangeSelector{KeyRangeID: yyDollar[3].str}
 		}
-	case 71:
+	case 76:
 		yyDollar = yyS[yypt-6 : yypt+1]
-//line gram.y:536
+//line gram.y:560
 		{
 			yyVAL.split = &SplitKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeFromID: yyDollar[4].str, Border: []byte(yyDollar[6].str)}
 		}
-	case 72:
+	case 77:
 		yyDollar = yyS[yypt-3 : yypt+1]
-//line gram.y:542
+//line gram.y:566
 		{
 			yyVAL.kill = &Kill{Cmd: yyDollar[2].str, Target: yyDollar[3].str}
 		}
-	case 73:
+	case 78:
 		yyDollar = yyS[yypt-3 : yypt+1]
-//line gram.y:545
+//line gram.y:569
 		{
 			yyVAL.kill = &Kill{Cmd: "client", Target: yyDollar[3].str}
 		}
-	case 74:
+	case 79:
 		yyDollar = yyS[yypt-4 : yypt+1]
-//line gram.y:551
+//line gram.y:575
 		{
 			yyVAL.move = &MoveKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str}
 		}
-	case 75:
+	case 80:
 		yyDollar = yyS[yypt-4 : yypt+1]
-//line gram.y:557
+//line gram.y:581
 		{
 			yyVAL.unite = &UniteKeyRange{KeyRangeIDL: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeIDR: yyDollar[4].str}
 		}
-	case 76:
+	case 81:
 		yyDollar = yyS[yypt-2 : yypt+1]
-//line gram.y:563
+//line gram.y:587
 		{
 			yyVAL.listen = &Listen{addr: yyDollar[2].str}
 		}
-	case 77:
+	case 82:
 		yyDollar = yyS[yypt-1 : yypt+1]
-//line gram.y:569
+//line gram.y:593
 		{
 			yyVAL.shutdown = &Shutdown{}
 		}
-	case 78:
+	case 83:
 		yyDollar = yyS[yypt-5 : yypt+1]
-//line gram.y:577
+//line gram.y:601
 		{
 			yyVAL.register_router = &RegisterRouter{ID: yyDollar[3].str, Addr: yyDollar[5].str}
 		}
-	case 79:
+	case 84:
 		yyDollar = yyS[yypt-3 : yypt+1]
-//line gram.y:583
+//line gram.y:607
 		{
 			yyVAL.unregister_router = &UnregisterRouter{ID: yyDollar[3].str}
 		}
-	case 80:
+	case 85:
 		yyDollar = yyS[yypt-3 : yypt+1]
-//line gram.y:588
+//line gram.y:612
 		{
 			yyVAL.unregister_router = &UnregisterRouter{ID: `*`}
 		}
diff --git a/yacc/console/gram.y b/yacc/console/gram.y
index b210023..0ef20fc 100644
--- a/yacc/console/gram.y
+++ b/yacc/console/gram.y
@@ -28,6 +28,7 @@ func randomHex(n int) (string, error) {
 	bool                   bool
 	empty                  struct{}
 
+    set                    *Set
 	statement              Statement
 	show                   *Show
 
@@ -105,10 +106,10 @@ func randomHex(n int) (string, error) {
 // routers
 %token <str> SHUTDOWN LISTEN REGISTER UNREGISTER ROUTER ROUTE
 
-%token <str> CREATE ADD DROP LOCK UNLOCK SPLIT MOVE COMPOSE
+%token <str> CREATE ADD DROP LOCK UNLOCK SPLIT MOVE COMPOSE SET HARD
 %token <str> SHARDING COLUMN TABLE HASH FUNCTION KEY RANGE DATASPACE
 %token <str> SHARDS KEY_RANGES ROUTERS SHARD HOST SHARDING_RULES RULE COLUMNS VERSION
-%token <str> BY FROM TO WITH UNITE ALL ADDRESS
+%token <str> BY FROM TO WITH UNITE ALL ADDRESS FOR
 %token <str> CLIENT
 
 %token<str> START STOP TRACE MESSAGES
@@ -123,6 +124,7 @@ func randomHex(n int) (string, error) {
 %type <str> show_statement_type
 %type <str> kill_statement_type
 
+%type <set> set_stmt
 %type <show> show_stmt
 %type <kill> kill_stmt
 
@@ -143,6 +145,7 @@ func randomHex(n int) (string, error) {
 %type<str> sharding_rule_table_clause
 %type<str> sharding_rule_column_clause
 %type<str> sharding_rule_hash_function_clause
+%type<str> opt_dataspace
 
 %type <unlock> unlock_stmt
 %type <lock> lock_stmt
@@ -183,6 +186,10 @@ command:
 	{
 		setParseTree(yylex, $1)
 	}
+	| set_stmt
+	{
+		setParseTree(yylex, $1)
+	}
 	| drop_stmt
 	{
 		setParseTree(yylex, $1)
@@ -307,7 +314,7 @@ show_statement_type:
 	IDENT
 	{
 		switch v := strings.ToLower(string($1)); v {
-		case DatabasesStr, RoutersStr, PoolsStr, ShardsStr,BackendConnectionsStr, KeyRangesStr, ShardingRules, ClientsStr, StatusStr, VersionStr:
+		case DatabasesStr, RoutersStr, PoolsStr, ShardsStr,BackendConnectionsStr, KeyRangesStr, ShardingRules, ClientsStr, StatusStr, DataspacesStr, VersionStr:
 			$$ = v
 		default:
 			$$ = UnsupportedStr
@@ -325,6 +332,13 @@ kill_statement_type:
 		}
 	}
 
+set_stmt:
+	SET dataspace_define_stmt
+	{
+	    $$ = &Set{Element: $2}
+	}
+
+
 drop_stmt:
 	DROP key_range_stmt
 	{
@@ -346,6 +360,11 @@ drop_stmt:
     }
 
 add_stmt:
+	ADD dataspace_define_stmt
+	{
+		$$ = &Create{Element: $2}
+	}
+	|
 	ADD sharding_rule_define_stmt
 	{
 		$$ = &Create{Element: $2}
@@ -421,18 +440,18 @@ dataspace_define_stmt:
 	}
 
 sharding_rule_define_stmt:
-	SHARDING RULE any_id sharding_rule_table_clause sharding_rule_argument_list
+	SHARDING RULE any_id sharding_rule_table_clause sharding_rule_argument_list opt_dataspace
 	{
-		$$ = &ShardingRuleDefinition{ID: $3, TableName: $4, Entries: $5}
+		$$ = &ShardingRuleDefinition{ID: $3, TableName: $4, Entries: $5, Dataspace: $6}
 	}
 	|
-	SHARDING RULE sharding_rule_table_clause sharding_rule_argument_list
+	SHARDING RULE sharding_rule_table_clause sharding_rule_argument_list opt_dataspace
 	{
 		str, err := randomHex(6)
 		if err != nil {
 			panic(err)
 		}
-		$$ = &ShardingRuleDefinition{ID:  "shrule"+str, TableName: $3, Entries: $4}
+		$$ = &ShardingRuleDefinition{ID:  "shrule"+str, TableName: $3, Entries: $4, Dataspace: $5}
 	}
 
 sharding_rule_argument_list: sharding_rule_entry
@@ -480,20 +499,25 @@ sharding_rule_hash_function_clause:
 	}
 	| /*EMPTY*/ { $$ = ""; }
 
+opt_dataspace:
+    FOR DATASPACE any_id{
+        $$ = $3
+    }
+    | /* EMPTY */ { $$ = "default" }
+
 
 key_range_define_stmt:
-	KEY RANGE any_id FROM any_val TO any_val ROUTE TO any_id
+	KEY RANGE any_id FROM any_val TO any_val ROUTE TO any_id opt_dataspace
 	{
-		$$ = &KeyRangeDefinition{LowerBound: []byte($5), UpperBound: []byte($7), ShardID: $10, KeyRangeID: $3}
+		$$ = &KeyRangeDefinition{LowerBound: []byte($5), UpperBound: []byte($7), ShardID: $10, KeyRangeID: $3, Dataspace: $11}
 	}
-	|
-	KEY RANGE FROM any_val TO any_val ROUTE TO any_id
+	| KEY RANGE FROM any_val TO any_val ROUTE TO any_id opt_dataspace
 	{
 		str, err := randomHex(6)
 		if err != nil {
 			panic(err)
 		}
-		$$ = &KeyRangeDefinition{LowerBound: []byte($4), UpperBound: []byte($6), ShardID: $9, KeyRangeID: "kr"+str}
+		$$ = &KeyRangeDefinition{LowerBound: []byte($4), UpperBound: []byte($6), ShardID: $9, KeyRangeID: "kr"+str, Dataspace: $10}
 	}
 
 
@@ -588,6 +612,5 @@ unregister_router_stmt:
     {
         $$ = &UnregisterRouter{ID: `*`}
     }
-
 %%
 
diff --git a/yacc/console/gram.y.save b/yacc/console/gram.y.save
new file mode 100644
index 0000000..a0343de
--- /dev/null
+++ b/yacc/console/gram.y.save
@@ -0,0 +1,603 @@
+
+%{
+package spqrparser
+
+import (
+	"crypto/rand"
+	"encoding/hex"
+	"strings"
+)
+
+
+func randomHex(n int) (string, error) {
+	bytes := make([]byte, n)
+	if _, err := rand.Read(bytes); err != nil {
+	  return "", err
+	}
+	return hex.EncodeToString(bytes), nil
+}
+%}
+
+// fields inside this union end up as the fields in a structure known
+// as ${PREFIX}SymType, of which a reference is passed to the lexer.
+%union {
+	str                    string
+	byte                   byte
+	bytes                  []byte
+	int                    int
+	bool                   bool
+	empty                  struct{}
+
+	statement              Statement
+	show                   *Show
+
+	drop                   *Drop
+	create                 *Create
+
+	kill                   *Kill
+	lock                   *Lock
+	unlock                 *Unlock
+
+	ds                     *DataspaceDefinition
+	kr                     *KeyRangeDefinition
+	shard                  *ShardDefinition
+	sharding_rule          *ShardingRuleDefinition
+
+	register_router        *RegisterRouter
+	unregister_router      *UnregisterRouter
+	
+	split                  *SplitKeyRange
+	move                   *MoveKeyRange
+	unite                  *UniteKeyRange
+
+	shutdown               *Shutdown
+	listen                 *Listen
+
+	trace                  *TraceStmt
+	stoptrace              *StopTraceStmt
+	
+	entrieslist            []ShardingRuleEntry
+	shruleEntry            ShardingRuleEntry
+
+	sharding_rule_selector *ShardingRuleSelector
+	key_range_selector     *KeyRangeSelector
+
+    colref                 ColumnRef
+    where                  WhereClauseNode
+}
+
+// any non-terminal which returns a value needs a type, which is
+// really a field name in the above union struct
+//%type <val> expr number
+
+// same for terminals
+%token <str> IDENT COMMAND
+
+// DDL
+%token <str> SHOW KILL
+
+// SQL
+%token <str> WHERE OR AND
+
+%type< where> where_clause where_clause_seq
+
+// '='
+%token<str> TEQ
+
+/* any const */
+%token<str> SCONST
+
+// ';'
+%token<str> TSEMICOLON
+
+// '(' & ')'
+%token<str> TOPENBR TCLOSEBR
+
+%type<str> operator where_operator
+
+%type<colref> ColRef
+
+%type<str> any_val any_id
+
+// CMDS
+%type <statement> command
+
+// routers
+%token <str> SHUTDOWN LISTEN REGISTER UNREGISTER ROUTER ROUTE
+
+%token <str> CREATE ADD DROP LOCK UNLOCK SPLIT MOVE COMPOSE
+%token <str> SHARDING COLUMN TABLE HASH FUNCTION KEY RANGE DATASPACE
+%token <str> SHARDS KEY_RANGES ROUTERS SHARD HOST SHARDING_RULES RULE COLUMNS VERSION
+%token <str> BY FROM TO WITH UNITE ALL ADDRESS
+%token <str> CLIENT
+
+%token<str> START STOP TRACE MESSAGES
+
+/* any operator */
+%token<str> OP
+
+
+%type<sharding_rule_selector> sharding_rule_stmt
+%type<key_range_selector> key_range_stmt
+
+%type <str> show_statement_type
+%type <str> kill_statement_type
+
+%type <show> show_stmt
+%type <kill> kill_stmt
+
+%type <drop> drop_stmt
+%type <create> add_stmt create_stmt
+
+%type <trace> trace_stmt
+%type <stoptrace> stoptrace_stmt
+
+%type <ds> dataspace_define_stmt
+%type <sharding_rule> sharding_rule_define_stmt
+%type <kr> key_range_define_stmt
+%type <shard> shard_define_stmt
+
+%type<entrieslist> sharding_rule_argument_list
+%type<shruleEntry> sharding_rule_entry
+
+%type<str> sharding_rule_table_clause
+%type<str> sharding_rule_column_clause
+%type<str> sharding_rule_hash_function_clause
+%type<str> opt_dataspace
+
+%type <unlock> unlock_stmt
+%type <lock> lock_stmt
+%type <shutdown> shutdown_stmt
+%type <listen> listen_stmt
+%type <split> split_key_range_stmt
+%type <move> move_key_range_stmt
+%type <unite> unite_key_range_stmt
+%type <register_router> register_router_stmt
+%type <unregister_router> unregister_router_stmt
+%start any_command
+
+%%
+
+
+any_command:
+    command semicolon_opt
+
+semicolon_opt:
+/*empty*/ {}
+| TSEMICOLON {}
+
+
+command:
+	add_stmt
+	{
+		setParseTree(yylex, $1)
+	}
+	| create_stmt
+	{
+		setParseTree(yylex, $1)
+	}
+	| trace_stmt
+	{
+		setParseTree(yylex, $1)
+	}
+	| stoptrace_stmt
+	{
+		setParseTree(yylex, $1)
+	}
+	| drop_stmt
+	{
+		setParseTree(yylex, $1)
+	}
+	| lock_stmt
+	{
+		setParseTree(yylex, $1)
+	}
+	| unlock_stmt
+	{
+		setParseTree(yylex, $1)
+	}
+	| show_stmt
+	{
+		setParseTree(yylex, $1)
+	}
+	| kill_stmt
+	{
+		setParseTree(yylex, $1)
+	}
+	| listen_stmt
+	{
+		setParseTree(yylex, $1)
+	}
+	| shutdown_stmt
+	{
+		setParseTree(yylex, $1)
+	}
+	| split_key_range_stmt
+	{
+		setParseTree(yylex, $1)
+	}
+	| move_key_range_stmt
+	{
+		setParseTree(yylex, $1)
+	}
+	| unite_key_range_stmt
+	{
+	   setParseTree(yylex, $1)
+	}
+	| register_router_stmt
+	{
+		setParseTree(yylex, $1)
+	}
+	| unregister_router_stmt
+	{
+		setParseTree(yylex, $1)
+	}
+
+any_val: SCONST
+	{
+		$$ = string($1)
+	} | 
+	IDENT
+	{
+		$$ = string($1)
+	}
+
+any_id: IDENT
+	{
+		$$ = string($1)
+	}
+
+
+operator:
+    IDENT {
+        $$ = $1
+    } | AND {
+        $$ = "AND"
+    } | OR {
+        $$ = "OR"
+    }
+
+where_operator:
+    IDENT {
+        $$ = $1
+    } | TEQ {
+        $$ = "="
+    }
+
+
+ColRef:
+    any_id {
+        $$ = ColumnRef{
+            ColName: $1,
+        }
+    }
+
+
+where_clause_seq:
+    TOPENBR where_clause_seq TCLOSEBR {
+        $$ = $2
+    } | ColRef where_operator any_val
+    {
+        $$ = WhereClauseLeaf {
+            ColRef:     $1,
+			Op:         $2,
+            Value:      $3,
+        }
+    }
+    | where_clause_seq operator where_clause_seq
+    {
+        $$ = WhereClauseOp{
+            Op: $2,
+            Left: $1,
+            Right: $3,
+        }
+    }
+
+where_clause:
+    /* empty */
+    {
+        $$ = WhereClauseEmpty{}
+    }
+    | WHERE where_clause_seq
+    {
+        $$ = $2
+    }
+
+
+show_statement_type:
+	IDENT
+	{
+		switch v := strings.ToLower(string($1)); v {
+		case DatabasesStr, RoutersStr, PoolsStr, ShardsStr,BackendConnectionsStr, KeyRangesStr, ShardingRules, ClientsStr, StatusStr, DataspacesStr, VersionStr:
+			$$ = v
+		default:
+			$$ = UnsupportedStr
+		}
+	}
+
+kill_statement_type:
+	IDENT
+	{
+		switch v := string($1); v {
+		case ClientStr:
+			$$ = v
+		default:
+			$$ = "unsupp"
+		}
+	}
+
+drop_stmt:
+	DROP key_range_stmt
+	{
+		$$ = &Drop{Element: $2}
+	}
+	|
+    DROP KEY RANGE ALL
+    {
+        $$ = &Drop{Element: &KeyRangeSelector{KeyRangeID: `*`}}
+    }
+	| DROP sharding_rule_stmt
+	{
+		$$ = &Drop{Element: $2}
+	}
+	|
+	DROP SHARDING RULE ALL
+    {
+        $$ = &Drop{Element: &ShardingRuleSelector{ID: `*`}}
+    }
+
+add_stmt:
+    ADD dataspace_define_stmt
+{
+		$$ = &Create{Element: $2}
+	}
+	|
+	ADD sharding_rule_define_stmt
+	{
+		$$ = &Create{Element: $2}
+	}
+	|
+	ADD key_range_define_stmt
+	{
+		$$ = &Create{Element: $2}
+	}|
+	ADD shard_define_stmt
+	{
+		$$ = &Create{Element: $2}
+	}
+
+
+trace_stmt:
+	START TRACE ALL MESSAGES
+	{
+		$$ = &TraceStmt{All: true}
+	} | 
+	START TRACE CLIENT any_id {
+		$$ = &TraceStmt {
+			Client: $4,
+		}
+	}
+
+stoptrace_stmt:
+	STOP TRACE MESSAGES
+	{
+		$$ = &StopTraceStmt{}
+	}
+
+
+create_stmt:
+	CREATE dataspace_define_stmt
+	{
+		$$ = &Create{Element: $2}
+	}
+	|
+	CREATE sharding_rule_define_stmt
+	{
+		$$ = &Create{Element: $2}
+	}
+	|
+	CREATE key_range_define_stmt
+	{
+		$$ = &Create{Element: $2}
+	}|
+	CREATE shard_define_stmt
+	{
+		$$ = &Create{Element: $2}
+	}
+
+
+show_stmt:
+	SHOW show_statement_type where_clause
+	{
+		$$ = &Show{Cmd: $2, Where: $3}
+	}
+
+lock_stmt:
+	LOCK key_range_stmt
+	{
+		$$ = &Lock{KeyRangeID: $2.KeyRangeID}
+	}
+	// or lock someting else
+
+
+dataspace_define_stmt:
+	DATASPACE any_id
+	{
+		$$ = &DataspaceDefinition{ID: $2}
+	}
+
+sharding_rule_define_stmt:
+	SHARDING RULE any_id opt_dataspace sharding_rule_table_clause sharding_rule_argument_list
+	{
+		$$ = &ShardingRuleDefinition{ID: $3, TableName: $5, Entries: $6, Dataspace: $4}
+	}
+	|
+	SHARDING RULE opt_dataspace sharding_rule_table_clause sharding_rule_argument_list
+	{
+		str, err := randomHex(6)
+		if err != nil {
+			panic(err)
+		}
+		$$ = &ShardingRuleDefinition{ID:  "shrule"+str, TableName: $4, Entries: $5, Dataspace: $3}
+	}
+
+sharding_rule_argument_list: sharding_rule_entry
+    {
+      $$ = make([]ShardingRuleEntry, 0)
+      $$ = append($$, $1)
+    }
+    |
+    sharding_rule_argument_list sharding_rule_entry
+    {
+      $$ = append($1, $2)
+    }
+
+sharding_rule_entry:
+	sharding_rule_column_clause sharding_rule_hash_function_clause
+	{
+		$$ = ShardingRuleEntry{
+			Column: $1,
+			HashFunction: $2,
+		}
+	}
+
+sharding_rule_table_clause:
+	TABLE any_id
+	{
+       $$ = $2
+    }
+	| /*EMPTY*/	{ $$ = ""; }
+
+sharding_rule_column_clause:
+	COLUMN any_id
+	{
+		$$ = $2
+	}
+	|
+	COLUMNS any_id
+	{
+		$$ = $2
+	}/* to be backward-compatable*/
+
+sharding_rule_hash_function_clause:
+	HASH FUNCTION any_id
+	{
+		$$ = $3
+	}
+	| /*EMPTY*/ { $$ = ""; }
+
+opt_dataspace:
+    DATASPACE any_id{
+        $$ = $2
+    }
+    | /* EMPTY */ { $$ = "default" }
+
+
+key_range_define_stmt:
+	KEY RANGE any_id FROM any_val TO any_val ROUTE TO any_id opt_dataspace
+	{
+		$$ = &KeyRangeDefinition{LowerBound: []byte($5), UpperBound: []byte($7), ShardID: $10, KeyRangeID: $3, Dataspace: $11}
+	}
+	| KEY RANGE FROM any_val TO any_val ROUTE TO any_id opt_dataspace
+	{
+		str, err := randomHex(6)
+		if err != nil {
+			panic(err)
+		}
+		$$ = &KeyRangeDefinition{LowerBound: []byte($4), UpperBound: []byte($6), ShardID: $9, KeyRangeID: "kr"+str, Dataspace: $10}
+	}
+
+
+shard_define_stmt:
+	SHARD any_id WITH HOST any_val
+	{
+		$$ = &ShardDefinition{Id: $2, Hosts: []string{$5}}
+	}
+	|
+	SHARD WITH HOST any_val
+	{
+		str, err := randomHex(6)
+		if err != nil {
+			panic(err)
+		}
+		$$ = &ShardDefinition{Id: "shard" + str, Hosts: []string{$4}}
+	}
+
+
+unlock_stmt:
+	UNLOCK key_range_stmt
+	{
+		$$ = &Unlock{KeyRangeID: $2.KeyRangeID}
+	}
+
+sharding_rule_stmt:
+	SHARDING RULE any_id
+	{
+		$$ =&ShardingRuleSelector{ID: $3}
+	}
+
+key_range_stmt:
+	KEY RANGE any_id
+	{
+		$$ = &KeyRangeSelector{KeyRangeID: $3}
+	}
+
+split_key_range_stmt:
+	SPLIT key_range_stmt FROM any_id BY any_val
+	{
+		$$ = &SplitKeyRange{KeyRangeID: $2.KeyRangeID, KeyRangeFromID: $4, Border: []byte($6)}
+	}
+
+kill_stmt:
+	KILL kill_statement_type any_val
+	{
+		$$ = &Kill{Cmd: $2, Target: $3}
+	}
+	| KILL CLIENT any_val{
+		$$ = &Kill{Cmd: "client", Target: $3}
+	}
+
+move_key_range_stmt:
+	MOVE key_range_stmt TO any_id
+	{
+		$$ = &MoveKeyRange{KeyRangeID: $2.KeyRangeID, DestShardID: $4}
+	}
+
+unite_key_range_stmt:
+	UNITE key_range_stmt WITH any_id
+	{
+		$$ = &UniteKeyRange{KeyRangeIDL: $2.KeyRangeID, KeyRangeIDR: $4}
+	}
+
+listen_stmt:
+	LISTEN any_val
+	{
+		$$ = &Listen{addr: $2}
+	}
+
+shutdown_stmt:
+	SHUTDOWN
+	{
+		$$ = &Shutdown{}
+	}
+
+// coordinator
+
+register_router_stmt:
+	REGISTER ROUTER any_id ADDRESS any_val
+	{
+		$$ = &RegisterRouter{ID: $3, Addr: $5}
+	}
+
+unregister_router_stmt:
+	UNREGISTER ROUTER any_id
+	{
+		$$ = &UnregisterRouter{ID: $3}
+	} 
+	|
+	UNREGISTER ROUTER ALL
+    {
+        $$ = &UnregisterRouter{ID: `*`}
+    }
+%%
+
diff --git a/yacc/console/reserved_keyword.go b/yacc/console/reserved_keyword.go
index d6b5125..cd62fe7 100644
--- a/yacc/console/reserved_keyword.go
+++ b/yacc/console/reserved_keyword.go
@@ -11,6 +11,7 @@ var reservedWords = map[string]int{
 	"create":     CREATE,
 	"add":        ADD,
 	"key":        KEY,
+	"for":        FOR,
 	"range":      RANGE,
 	"lock":       LOCK,
 	"unlock":     UNLOCK,
@@ -36,6 +37,7 @@ var reservedWords = map[string]int{
 	"hash":       HASH,
 	"function":   FUNCTION,
 	"where":      WHERE,
+	"set":        SET,
 	"or":         OR,
 	"and":        AND,
 	"start":      START,
@@ -43,4 +45,5 @@ var reservedWords = map[string]int{
 	"trace":      TRACE,
 	"messages":   MESSAGES,
 	"client":     CLIENT,
+	"hard":       HARD,
 }
diff --git a/yacc/console/yx_test.go b/yacc/console/yx_test.go
index 8853333..3d3c855 100644
--- a/yacc/console/yx_test.go
+++ b/yacc/console/yx_test.go
@@ -218,6 +218,7 @@ func TestKeyRange(t *testing.T) {
 				Element: &spqrparser.KeyRangeDefinition{
 					ShardID:    "sh1",
 					KeyRangeID: "krid1",
+					Dataspace:  "default",
 					LowerBound: []byte("1"),
 					UpperBound: []byte("10"),
 				},
@@ -231,6 +232,7 @@ func TestKeyRange(t *testing.T) {
 				Element: &spqrparser.KeyRangeDefinition{
 					ShardID:    "sh2",
 					KeyRangeID: "krid2",
+					Dataspace:  "default",
 					LowerBound: []byte("88888888-8888-8888-8888-888888888889"),
 					UpperBound: []byte("FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF"),
 				},
@@ -264,6 +266,7 @@ func TestShardingRule(t *testing.T) {
 				Element: &spqrparser.ShardingRuleDefinition{
 					ID:        "rule1",
 					TableName: "",
+					Dataspace: "default",
 					Entries: []spqrparser.ShardingRuleEntry{
 						{
 							Column: "id",
