syntax = "proto3";

package spqr;

option go_package = "spqr/proto";

import "google/protobuf/empty.proto";
import "protos/tasks.proto";

service KeyRangeService {
  rpc GetKeyRange (GetKeyRangeRequest) returns (KeyRangeReply) {}
  rpc ListKeyRange (ListKeyRangeRequest) returns (KeyRangeReply) {}
  rpc ListAllKeyRanges (google.protobuf.Empty) returns (KeyRangeReply) {}
  rpc LockKeyRange (LockKeyRangeRequest) returns (ModifyReply) {}
  rpc CreateKeyRange(CreateKeyRangeRequest) returns (ModifyReply) {}
  rpc DropKeyRange(DropKeyRangeRequest) returns (ModifyReply) {}
  rpc DropAllKeyRanges(google.protobuf.Empty) returns (DropAllKeyRangesResponse) {}
  rpc UnlockKeyRange (UnlockKeyRangeRequest) returns (ModifyReply) {}
  rpc SplitKeyRange (SplitKeyRangeRequest) returns (ModifyReply) {}
  rpc MergeKeyRange (MergeKeyRangeRequest) returns (ModifyReply) {}
  rpc MoveKeyRange (MoveKeyRangeRequest) returns (ModifyReply) {}
  rpc ResolveKeyRange (ResolveKeyRangeRequest) returns (ResolveKeyRangeReply) {}
  rpc BatchMoveKeyRange (BatchMoveKeyRangeRequest) returns (google.protobuf.Empty) {}
  rpc RedistributeKeyRange (RedistributeKeyRangeRequest) returns (google.protobuf.Empty) {}
  rpc RenameKeyRange (RenameKeyRangeRequest) returns (google.protobuf.Empty) {}
}

enum KeyRangeStatus {
  LOCKED = 0;
  AVAILABLE = 1;
}

message KeyRangeBound {
  repeated bytes values = 1;
}

// key range info is mapped to shard
message KeyRangeInfo {
  KeyRangeBound bound = 1;

  string krid = 2;
  string shardId = 3;
  string distributionId = 4;
}

message ListKeyRangeRequest {
  string distribution = 1;
}

message CreateKeyRangeRequest {
  KeyRangeInfo key_range_info = 1;
}

message SplitKeyRangeRequest {
  string new_id = 1;
  bytes bound = 2;
  string source_id = 3;
  bool split_left = 4;
}

message MergeKeyRangeRequest {
  string base_id = 1;
  string appendage_id = 2;
}

message MoveKeyRangeRequest {
  string id = 1;
  string toShardId = 2;
}

message DropKeyRangeRequest {
  repeated string id = 1;
}

message DropAllKeyRangesResponse {
  repeated KeyRangeInfo key_range = 1;
}

message LockKeyRangeRequest {
  repeated string id = 1;
}

message UnlockKeyRangeRequest {
  repeated string id = 1;
}

message KeyRangeReply {
  repeated KeyRangeInfo key_ranges_info = 1;
}

message ModifyReply {
  string operation_id = 1;
}

message ResolveKeyRangeRequest {
  string bound = 1;
}

message ResolveKeyRangeReply {
  repeated string key_range_d = 1;
}

message GetKeyRangeRequest {
  repeated string ids = 1;
}

enum RedistributeLimitType {
  RedistributeAllKeys = 0;
  RedistributeKeysLimit = 1;
}

message BatchMoveKeyRangeRequest {
  string id = 1;
  string toShardId = 2;
  string toKrId = 3;
  RedistributeLimitType limitType = 4;
  int64 limit = 5;
  int64 batchSize = 6;
  SplitType splitType = 7;
}

message RedistributeKeyRangeRequest {
  string id = 1;
  string shardId = 2;
  int64 batchSize = 3;
}

message RenameKeyRangeRequest{
  string keyRangeId = 1;
  string newKeyRangeId = 2;
}
