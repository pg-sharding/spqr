syntax = "proto3";

package spqr;

option go_package = "spqr/proto";
  
service KeyRangeService {
  rpc GetKeyRange (GetKeyRangeRequest) returns (KeyRangeReply) {}
  rpc ListKeyRange (ListKeyRangeRequest) returns (KeyRangeReply) {}
  rpc ListAllKeyRanges (ListAllKeyRangesRequest) returns (KeyRangeReply) {}
  rpc LockKeyRange (LockKeyRangeRequest) returns (ModifyReply) {}
  rpc CreateKeyRange(CreateKeyRangeRequest) returns (ModifyReply) {}
  rpc DropKeyRange(DropKeyRangeRequest) returns (ModifyReply) {}
  rpc DropAllKeyRanges(DropAllKeyRangesRequest) returns (DropAllKeyRangesResponse) {}
  rpc UnlockKeyRange (UnlockKeyRangeRequest) returns (ModifyReply) {}
  rpc SplitKeyRange (SplitKeyRangeRequest) returns (ModifyReply) {}
  rpc MergeKeyRange (MergeKeyRangeRequest) returns (ModifyReply) {}
  rpc MoveKeyRange (MoveKeyRangeRequest) returns (ModifyReply) {}
  rpc ResolveKeyRange (ResolveKeyRangeRequest) returns (ResolveKeyRangeReply) {}
}

enum KeyRangeStatus {
  LOCKED = 0;
  AVAILABLE = 1;
}

message KeyRangeBound {
  repeated bytes values = 1;
}

// key range info is mapped to shard
message KeyRangeInfo {
  KeyRangeBound bound = 1;
  
  string krid = 2;
  string shardId = 3;
  string distributionId = 4;
}

message ListKeyRangeRequest {
  string distribution = 1;
}

message ListAllKeyRangesRequest { }

message CreateKeyRangeRequest {
  KeyRangeInfo key_range_info = 1;
}

message SplitKeyRangeRequest {
  string new_id = 1;
  bytes bound = 2;
  string source_id = 3;
  bool split_left = 4;
}

message MergeKeyRangeRequest {
  string base_id= 1;
  string appendage_id = 2;
}

message MoveKeyRangeRequest {
  string id = 1;
  string toShardId = 2;
}

message DropKeyRangeRequest {
  repeated string id = 1;
}

message DropAllKeyRangesRequest {
}

message DropAllKeyRangesResponse {
  repeated KeyRangeInfo key_range = 1;
}

message LockKeyRangeRequest {
  repeated string id = 1;
}

message UnlockKeyRangeRequest {
  repeated string id = 1;
}

message KeyRangeReply {
  repeated KeyRangeInfo key_ranges_info = 1;
}

message ModifyReply {
  string operation_id = 1;
}

message ResolveKeyRangeRequest {
  string bound = 1;
}

message ResolveKeyRangeReply {
  repeated string key_range_d = 1;
}

message GetKeyRangeRequest {
  repeated string ids = 1;
}
