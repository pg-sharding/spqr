// Code generated by goyacc -o yacc/console/sql.go -p yy yacc/console/sql.y. DO NOT EDIT.

//line yacc/console/sql.y:3

package spqrparser

import __yyfmt__ "fmt"

//line yacc/console/sql.y:4

//line yacc/console/sql.y:11
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	show              *Show
	kr                *AddKeyRange
	shard             *AddShard
	register_router   *RegisterRouter
	unregister_router *UnregisterRouter
	kill              *Kill
	drop              *Drop
	add               *Add
	dropAll           *DropAll
	lock              *Lock
	shutdown          *Shutdown
	listen            *Listen
	unlock            *Unlock
	split             *SplitKeyRange
	move              *MoveKeyRange
	unite             *UniteKeyRange
	str               string
	byte              byte
	bytes             []byte
	int               int
	bool              bool
}

const STRING = 57346
const COMMAND = 57347
const SHOW = 57348
const KILL = 57349
const POOLS = 57350
const STATS = 57351
const LISTS = 57352
const SERVERS = 57353
const CLIENTS = 57354
const DATABASES = 57355
const SHUTDOWN = 57356
const LISTEN = 57357
const REGISTER = 57358
const UNREGISTER = 57359
const ROUTER = 57360
const ROUTE = 57361
const CREATE = 57362
const ADD = 57363
const DROP = 57364
const LOCK = 57365
const UNLOCK = 57366
const SPLIT = 57367
const MOVE = 57368
const SHARDING = 57369
const COLUMN = 57370
const KEY = 57371
const RANGE = 57372
const DATASPACE = 57373
const SHARDS = 57374
const KEY_RANGES = 57375
const ROUTERS = 57376
const SHARD = 57377
const HOST = 57378
const SHARDING_RULES = 57379
const RULE = 57380
const COLUMNS = 57381
const BY = 57382
const FROM = 57383
const TO = 57384
const WITH = 57385
const UNITE = 57386
const ALL = 57387
const ADDRESS = 57388

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"STRING",
	"COMMAND",
	"SHOW",
	"KILL",
	"POOLS",
	"STATS",
	"LISTS",
	"SERVERS",
	"CLIENTS",
	"DATABASES",
	"SHUTDOWN",
	"LISTEN",
	"REGISTER",
	"UNREGISTER",
	"ROUTER",
	"ROUTE",
	"CREATE",
	"ADD",
	"DROP",
	"LOCK",
	"UNLOCK",
	"SPLIT",
	"MOVE",
	"SHARDING",
	"COLUMN",
	"KEY",
	"RANGE",
	"DATASPACE",
	"SHARDS",
	"KEY_RANGES",
	"ROUTERS",
	"SHARD",
	"HOST",
	"SHARDING_RULES",
	"RULE",
	"COLUMNS",
	"BY",
	"FROM",
	"TO",
	"WITH",
	"UNITE",
	"ALL",
	"ADDRESS",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacc/console/sql.y:415

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 126

var yyAct = [...]int{

	71, 109, 86, 76, 60, 88, 28, 29, 40, 98,
	87, 89, 77, 106, 31, 30, 35, 25, 90, 122,
	36, 23, 24, 37, 38, 32, 33, 117, 105, 104,
	49, 54, 101, 52, 51, 50, 118, 102, 48, 73,
	70, 42, 66, 41, 34, 103, 85, 84, 80, 43,
	79, 94, 92, 75, 53, 55, 56, 78, 74, 57,
	69, 44, 68, 45, 67, 64, 63, 62, 59, 81,
	121, 65, 46, 72, 110, 87, 61, 93, 112, 91,
	108, 95, 96, 97, 89, 83, 77, 99, 100, 39,
	1, 111, 82, 107, 21, 20, 19, 18, 17, 15,
	16, 26, 11, 27, 12, 22, 115, 114, 113, 116,
	5, 4, 3, 8, 7, 6, 9, 10, 14, 119,
	120, 13, 58, 123, 47, 2,
}
var yyPact = [...]int{

	0, -1000, -39, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14, 34, 54, -1000, -1000, 22, 22,
	72, -1000, 38, 37, 36, 53, 11, 35, 33, -1000,
	-1000, 30, 2, 69, 1, 28, 8, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 27, 20, 18, 82, 81, 17, 16, 71,
	80, -25, -1000, 7, 6, -1000, -1000, -1000, 71, 71,
	71, -37, -1000, -1000, 71, 71, -9, -1000, -2, -1000,
	9, -1000, -1000, -1000, -1000, -12, -14, -30, 76, -1000,
	-1000, 70, 74, 72, 71, 69, 71, -1000, -1000, -15,
	-1000, -1000, -1000, -1000, -4, -1000, -1000, 70, 70, 51,
	-1000, -23, 69, -1000,
}
var yyPgo = [...]int{

	0, 125, 124, 122, 121, 118, 117, 116, 115, 114,
	113, 112, 111, 110, 105, 104, 103, 102, 101, 100,
	99, 98, 97, 96, 95, 94, 38, 0, 4, 1,
	2, 3, 93, 5, 92, 91, 90, 89,
}
var yyR1 = [...]int{

	0, 36, 37, 37, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 2, 3, 4, 35, 33, 34, 29,
	30, 27, 28, 17, 12, 14, 13, 11, 15, 6,
	7, 18, 16, 21, 5, 22, 23, 20, 19, 32,
	31, 24, 8, 9, 10, 25,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 11, 3, 6, 6, 1, 4,
	4, 4, 4, 8, 2, 6, 6, 2, 1, 1,
	1, 5, 4, 4, 3, 3,
}
var yyChk = [...]int{

	-1000, -36, -1, -11, -12, -13, -8, -9, -10, -7,
	-6, -17, -15, -4, -5, -20, -19, -21, -22, -23,
	-24, -25, -14, 21, 22, 17, -18, -16, 6, 7,
	15, 14, 25, 26, 44, 16, 20, 23, 24, -37,
	47, 29, 27, 35, 27, 29, 18, -2, -26, 8,
	13, 12, 11, 32, 9, 33, 34, 37, -3, -26,
	-28, 4, 29, 29, 29, 18, 31, 29, 29, 30,
	38, -27, 4, 38, 30, 45, -31, 4, 30, 30,
	30, -31, -34, 4, 30, 30, -30, 4, -33, 4,
	43, -33, 45, -30, 45, -30, -30, -30, 46, -30,
	-30, 41, 39, 36, 41, 42, 43, -32, 4, -29,
	4, -35, 4, -28, -30, -27, -30, 42, 40, -29,
	-29, 19, 42, -27,
}
var yyDef = [...]int{

	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 0, 0, 0, 43, 48, 0, 0,
	0, 58, 0, 0, 0, 0, 0, 0, 0, 1,
	3, 0, 0, 0, 0, 0, 0, 35, 33, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 54, 34,
	57, 42, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 0, 64, 65, 60, 0, 0,
	0, 0, 45, 38, 0, 0, 0, 40, 0, 37,
	0, 49, 63, 50, 62, 0, 0, 0, 0, 51,
	52, 0, 0, 0, 0, 0, 0, 61, 59, 0,
	39, 46, 36, 47, 0, 55, 56, 0, 0, 0,
	53, 0, 0, 44,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 47,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line yacc/console/sql.y:102
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:103
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:108
		{
			setParseTree(yylex, yyDollar[1].add)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:112
		{
			setParseTree(yylex, yyDollar[1].add)
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:116
		{
			setParseTree(yylex, yyDollar[1].add)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:120
		{
			setParseTree(yylex, yyDollar[1].dropAll)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:124
		{
			setParseTree(yylex, yyDollar[1].dropAll)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:128
		{
			setParseTree(yylex, yyDollar[1].dropAll)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:132
		{
			setParseTree(yylex, yyDollar[1].drop)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:136
		{
			setParseTree(yylex, yyDollar[1].drop)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:140
		{
			setParseTree(yylex, yyDollar[1].lock)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:144
		{
			setParseTree(yylex, yyDollar[1].unlock)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:148
		{
			setParseTree(yylex, yyDollar[1].show)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:152
		{
			setParseTree(yylex, yyDollar[1].kill)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:156
		{
			setParseTree(yylex, yyDollar[1].listen)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:160
		{
			setParseTree(yylex, yyDollar[1].shutdown)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:164
		{
			setParseTree(yylex, yyDollar[1].split)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:168
		{
			setParseTree(yylex, yyDollar[1].move)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:172
		{
			setParseTree(yylex, yyDollar[1].unite)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:176
		{
			setParseTree(yylex, yyDollar[1].register_router)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:180
		{
			setParseTree(yylex, yyDollar[1].unregister_router)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:184
		{
			setParseTree(yylex, yyDollar[1].add)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:201
		{
			switch v := string(yyDollar[1].str); v {
			case ShowDatabasesStr, ShowRoutersStr, ShowPoolsStr, ShowShardsStr, ShowKeyRangesStr, ShowShardingRules:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:212
		{
			switch v := string(yyDollar[1].str); v {
			case KillClientsStr:
				yyVAL.str = v
			default:
				yyVAL.str = "unsupp"
			}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line yacc/console/sql.y:224
		{
			yyVAL.show = &Show{Cmd: yyDollar[2].str}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:230
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:236
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:242
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:248
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:254
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:261
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:267
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 44:
		yyDollar = yyS[yypt-11 : yypt+1]
//line yacc/console/sql.y:276
		{
			yyVAL.add = &Add{Element: &AddKeyRange{LowerBound: yyDollar[6].bytes, UpperBound: yyDollar[8].bytes, ShardID: yyDollar[11].str, KeyRangeID: yyDollar[4].str}}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc/console/sql.y:282
		{
			yyVAL.add = &Add{Element: &AddDataspace{ID: yyDollar[3].str}}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line yacc/console/sql.y:294
		{
			yyVAL.add = &Add{Element: &AddShardingRule{ID: yyDollar[4].str, ColNames: []string{yyDollar[6].str}}}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line yacc/console/sql.y:300
		{
			yyVAL.add = &Add{Element: &AddShard{Id: yyDollar[3].str, Hosts: []string{yyDollar[6].str}}}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line yacc/console/sql.y:309
		{
			yyVAL.drop = &Drop{Element: &DropShardingRule{ID: yyDollar[4].str}}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line yacc/console/sql.y:315
		{
			yyVAL.drop = &Drop{Element: &DropKeyRange{KeyRangeID: yyDollar[4].str}}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line yacc/console/sql.y:321
		{
			yyVAL.lock = &Lock{KeyRangeID: yyDollar[4].str}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line yacc/console/sql.y:327
		{
			yyVAL.unlock = &Unlock{KeyRangeID: yyDollar[4].str}
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
//line yacc/console/sql.y:334
		{
			yyVAL.split = &SplitKeyRange{KeyRangeID: yyDollar[4].str, KeyRangeFromID: yyDollar[6].str, Border: yyDollar[8].bytes}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line yacc/console/sql.y:340
		{
			yyVAL.kill = &Kill{Cmd: yyDollar[2].str}
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line yacc/console/sql.y:346
		{
			yyVAL.move = &MoveKeyRange{KeyRangeID: yyDollar[4].str, DestShardID: yyDollar[6].str}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line yacc/console/sql.y:352
		{
			yyVAL.unite = &UniteKeyRange{KeyRangeIDL: yyDollar[4].str, KeyRangeIDR: yyDollar[5].str}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line yacc/console/sql.y:358
		{
			yyVAL.listen = &Listen{addr: yyDollar[2].str}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:364
		{
			yyVAL.shutdown = &Shutdown{}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:372
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line yacc/console/sql.y:378
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
//line yacc/console/sql.y:384
		{
			yyVAL.register_router = &RegisterRouter{ID: yyDollar[3].str, Addr: yyDollar[5].str}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line yacc/console/sql.y:390
		{
			yyVAL.dropAll = &DropAll{Entity: EntityKeyRanges}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line yacc/console/sql.y:397
		{
			yyVAL.dropAll = &DropAll{Entity: EntityShardingRule}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc/console/sql.y:404
		{
			yyVAL.dropAll = &DropAll{Entity: EntityRouters}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line yacc/console/sql.y:410
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: yyDollar[3].str}
		}
	}
	goto yystack /* stack new state and value */
}
