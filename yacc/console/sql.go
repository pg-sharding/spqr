// Code generated by goyacc - DO NOT EDIT.

package spqrparser

import __yyfmt__ "fmt"

import (
	"crypto/rand"
	"encoding/hex"
)

func randomHex(n int) (string, error) {
	bytes := make([]byte, n)
	if _, err := rand.Read(bytes); err != nil {
		return "", err
	}
	return hex.EncodeToString(bytes), nil
}

type yySymType struct {
	yys   int
	str   string
	byte  byte
	bytes []byte
	int   int
	bool  bool
	empty struct{}

	statement Statement
	show      *Show

	drop   *Drop
	create *Create

	kill   *Kill
	lock   *Lock
	unlock *Unlock

	ds            *DataspaceDefinition
	kr            *KeyRangeDefinition
	shard         *ShardDefinition
	sharding_rule *ShardingRuleDefinition

	register_router   *RegisterRouter
	unregister_router *UnregisterRouter

	split *SplitKeyRange
	move  *MoveKeyRange
	unite *UniteKeyRange

	shutdown *Shutdown
	listen   *Listen

	entrieslist []ShardingRuleEntry
	shruleEntry ShardingRuleEntry

	sharding_rule_selector *ShardingRuleSelector
	key_range_selector     *KeyRangeSelector
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault           = 57395
	yyEofCode           = 57344
	ADD                 = 57364
	ADDRESS             = 57393
	ALL                 = 57392
	BACKEND_CONNECTIONS = 57356
	BY                  = 57387
	CLIENT              = 57394
	CLIENTS             = 57354
	COLUMN              = 57372
	COLUMNS             = 57386
	COMMAND             = 57347
	COMPOSE             = 57370
	CREATE              = 57363
	DATABASES           = 57355
	DATASPACE           = 57378
	DROP                = 57365
	FROM                = 57388
	FUNCTION            = 57375
	HASH                = 57374
	HOST                = 57383
	KEY                 = 57376
	KEY_RANGES          = 57380
	KILL                = 57349
	LISTEN              = 57358
	LISTS               = 57352
	LOCK                = 57366
	MOVE                = 57369
	POOLS               = 57350
	RANGE               = 57377
	REGISTER            = 57359
	ROUTE               = 57362
	ROUTER              = 57361
	ROUTERS             = 57381
	RULE                = 57385
	SERVERS             = 57353
	SHARD               = 57382
	SHARDING            = 57371
	SHARDING_RULES      = 57384
	SHARDS              = 57379
	SHOW                = 57348
	SHUTDOWN            = 57357
	SPLIT               = 57368
	STATS               = 57351
	STRING              = 57346
	TABLE               = 57373
	TO                  = 57389
	UNITE               = 57391
	UNLOCK              = 57367
	UNREGISTER          = 57360
	WITH                = 57390
	yyErrCode           = 57345

	yyMaxDepth = 200
	yyTabOfs   = -78
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		57344: 0,  // $end (75x)
		59:    1,  // ';' (72x)
		57346: 2,  // STRING (40x)
		57372: 3,  // COLUMN (16x)
		57386: 4,  // COLUMNS (16x)
		57403: 5,  // internal_id (14x)
		57376: 6,  // KEY (8x)
		57389: 7,  // TO (8x)
		57406: 8,  // key_range_stmt (6x)
		57388: 9,  // FROM (5x)
		57405: 10, // key_range_spec_bound (5x)
		57390: 11, // WITH (5x)
		57374: 12, // HASH (4x)
		57412: 13, // ref_name (4x)
		57419: 14, // sharding_rule_column_clause (4x)
		57421: 15, // sharding_rule_entry (4x)
		57397: 16, // address (3x)
		57392: 17, // ALL (3x)
		57377: 18, // RANGE (3x)
		57362: 19, // ROUTE (3x)
		57371: 20, // SHARDING (3x)
		57373: 21, // TABLE (3x)
		57393: 22, // ADDRESS (2x)
		57356: 23, // BACKEND_CONNECTIONS (2x)
		57387: 24, // BY (2x)
		57394: 25, // CLIENT (2x)
		57354: 26, // CLIENTS (2x)
		57355: 27, // DATABASES (2x)
		57383: 28, // HOST (2x)
		57404: 29, // key_range_define_stmt (2x)
		57380: 30, // KEY_RANGES (2x)
		57350: 31, // POOLS (2x)
		57414: 32, // reserved_keyword (2x)
		57361: 33, // ROUTER (2x)
		57381: 34, // ROUTERS (2x)
		57385: 35, // RULE (2x)
		57353: 36, // SERVERS (2x)
		57382: 37, // SHARD (2x)
		57417: 38, // shard_define_stmt (2x)
		57418: 39, // sharding_rule_argument_list (2x)
		57420: 40, // sharding_rule_define_stmt (2x)
		57424: 41, // sharding_rule_table_clause (2x)
		57384: 42, // SHARDING_RULES (2x)
		57379: 43, // SHARDS (2x)
		57351: 44, // STATS (2x)
		57364: 45, // ADD (1x)
		57396: 46, // add_stmt (1x)
		57398: 47, // any_command (1x)
		57399: 48, // command (1x)
		57363: 49, // CREATE (1x)
		57400: 50, // create_stmt (1x)
		57378: 51, // DATASPACE (1x)
		57401: 52, // dataspace_define_stmt (1x)
		57365: 53, // DROP (1x)
		57402: 54, // drop_stmt (1x)
		57375: 55, // FUNCTION (1x)
		57349: 56, // KILL (1x)
		57407: 57, // kill_statement_type (1x)
		57408: 58, // kill_stmt (1x)
		57358: 59, // LISTEN (1x)
		57409: 60, // listen_stmt (1x)
		57366: 61, // LOCK (1x)
		57410: 62, // lock_stmt (1x)
		57369: 63, // MOVE (1x)
		57411: 64, // move_key_range_stmt (1x)
		57359: 65, // REGISTER (1x)
		57413: 66, // register_router_stmt (1x)
		57415: 67, // router_addr (1x)
		57416: 68, // semicolon_opt (1x)
		57422: 69, // sharding_rule_hash_function_clause (1x)
		57423: 70, // sharding_rule_stmt (1x)
		57348: 71, // SHOW (1x)
		57425: 72, // show_statement_type (1x)
		57426: 73, // show_stmt (1x)
		57357: 74, // SHUTDOWN (1x)
		57427: 75, // shutdown_stmt (1x)
		57368: 76, // SPLIT (1x)
		57428: 77, // split_key_range_stmt (1x)
		57429: 78, // target (1x)
		57391: 79, // UNITE (1x)
		57430: 80, // unite_key_range_stmt (1x)
		57367: 81, // UNLOCK (1x)
		57431: 82, // unlock_stmt (1x)
		57360: 83, // UNREGISTER (1x)
		57432: 84, // unregister_router_stmt (1x)
		57395: 85, // $default (0x)
		57347: 86, // COMMAND (0x)
		57370: 87, // COMPOSE (0x)
		57345: 88, // error (0x)
		57352: 89, // LISTS (0x)
	}

	yySymNames = []string{
		"$end",
		"';'",
		"STRING",
		"COLUMN",
		"COLUMNS",
		"internal_id",
		"KEY",
		"TO",
		"key_range_stmt",
		"FROM",
		"key_range_spec_bound",
		"WITH",
		"HASH",
		"ref_name",
		"sharding_rule_column_clause",
		"sharding_rule_entry",
		"address",
		"ALL",
		"RANGE",
		"ROUTE",
		"SHARDING",
		"TABLE",
		"ADDRESS",
		"BACKEND_CONNECTIONS",
		"BY",
		"CLIENT",
		"CLIENTS",
		"DATABASES",
		"HOST",
		"key_range_define_stmt",
		"KEY_RANGES",
		"POOLS",
		"reserved_keyword",
		"ROUTER",
		"ROUTERS",
		"RULE",
		"SERVERS",
		"SHARD",
		"shard_define_stmt",
		"sharding_rule_argument_list",
		"sharding_rule_define_stmt",
		"sharding_rule_table_clause",
		"SHARDING_RULES",
		"SHARDS",
		"STATS",
		"ADD",
		"add_stmt",
		"any_command",
		"command",
		"CREATE",
		"create_stmt",
		"DATASPACE",
		"dataspace_define_stmt",
		"DROP",
		"drop_stmt",
		"FUNCTION",
		"KILL",
		"kill_statement_type",
		"kill_stmt",
		"LISTEN",
		"listen_stmt",
		"LOCK",
		"lock_stmt",
		"MOVE",
		"move_key_range_stmt",
		"REGISTER",
		"register_router_stmt",
		"router_addr",
		"semicolon_opt",
		"sharding_rule_hash_function_clause",
		"sharding_rule_stmt",
		"SHOW",
		"show_statement_type",
		"show_stmt",
		"SHUTDOWN",
		"shutdown_stmt",
		"SPLIT",
		"split_key_range_stmt",
		"target",
		"UNITE",
		"unite_key_range_stmt",
		"UNLOCK",
		"unlock_stmt",
		"UNREGISTER",
		"unregister_router_stmt",
		"$default",
		"COMMAND",
		"COMPOSE",
		"error",
		"LISTS",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {47, 2},
		2:  {68, 0},
		3:  {68, 1},
		4:  {48, 1},
		5:  {48, 1},
		6:  {48, 1},
		7:  {48, 1},
		8:  {48, 1},
		9:  {48, 1},
		10: {48, 1},
		11: {48, 1},
		12: {48, 1},
		13: {48, 1},
		14: {48, 1},
		15: {48, 1},
		16: {48, 1},
		17: {48, 1},
		18: {32, 1},
		19: {32, 1},
		20: {32, 1},
		21: {32, 1},
		22: {32, 1},
		23: {32, 1},
		24: {32, 1},
		25: {32, 1},
		26: {32, 1},
		27: {32, 1},
		28: {32, 1},
		29: {72, 1},
		30: {57, 1},
		31: {54, 2},
		32: {54, 4},
		33: {54, 2},
		34: {54, 4},
		35: {46, 2},
		36: {46, 2},
		37: {46, 2},
		38: {50, 2},
		39: {50, 2},
		40: {50, 2},
		41: {50, 2},
		42: {73, 2},
		43: {13, 1},
		44: {10, 1},
		45: {5, 1},
		46: {78, 1},
		47: {16, 1},
		48: {62, 2},
		49: {52, 2},
		50: {40, 5},
		51: {40, 4},
		52: {39, 1},
		53: {39, 2},
		54: {15, 2},
		55: {41, 2},
		56: {41, 0},
		57: {14, 2},
		58: {14, 2},
		59: {69, 3},
		60: {69, 0},
		61: {29, 10},
		62: {29, 9},
		63: {38, 5},
		64: {38, 4},
		65: {82, 2},
		66: {70, 3},
		67: {8, 3},
		68: {77, 6},
		69: {58, 3},
		70: {64, 4},
		71: {80, 4},
		72: {60, 2},
		73: {75, 1},
		74: {67, 1},
		75: {66, 5},
		76: {84, 3},
		77: {84, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [142][]uint16{
		// 0
		{45: 96, 81, 79, 80, 97, 82, 53: 95, 83, 56: 102, 58: 87, 105, 88, 99, 84, 103, 91, 107, 93, 71: 98, 73: 86, 106, 89, 101, 90, 79: 104, 92, 100, 85, 108, 94},
		{78},
		{76, 219, 68: 218},
		{74, 74},
		{73, 73},
		// 5
		{72, 72},
		{71, 71},
		{70, 70},
		{69, 69},
		{68, 68},
		// 10
		{67, 67},
		{66, 66},
		{65, 65},
		{64, 64},
		{63, 63},
		// 15
		{62, 62},
		{61, 61},
		{6: 210, 8: 209, 20: 212, 70: 211},
		{6: 160, 20: 159, 29: 207, 37: 161, 208, 40: 206},
		{6: 160, 20: 159, 29: 156, 37: 161, 157, 40: 155, 51: 158, 154},
		// 20
		{23: 139, 25: 138, 131, 130, 30: 135, 129, 152, 34: 136, 36: 132, 42: 137, 133, 134, 72: 153},
		{6: 120, 8: 151},
		{6: 120, 8: 150},
		{6: 120, 8: 144},
		{23: 139, 25: 138, 131, 130, 30: 135, 129, 140, 34: 136, 36: 132, 42: 137, 133, 134, 57: 141},
		// 25
		{6: 120, 8: 126},
		{6: 120, 8: 121},
		{2: 118, 16: 119},
		{5, 5},
		{33: 113},
		// 30
		{33: 109},
		{2: 110, 5: 111, 17: 112},
		{33, 33, 3: 33, 33, 7: 33, 9: 33, 11: 33, 21: 33, 33, 24: 33},
		{2, 2},
		{1, 1},
		// 35
		{2: 110, 5: 114},
		{22: 115},
		{2: 116, 67: 117},
		{4, 4},
		{3, 3},
		// 40
		{31, 31},
		{6, 6},
		{18: 124},
		{11: 122},
		{2: 110, 5: 123},
		// 45
		{7, 7},
		{2: 110, 5: 125},
		{11, 11, 7: 11, 9: 11, 11: 11},
		{7: 127},
		{2: 110, 5: 128},
		// 50
		{8, 8},
		{60, 60, 60},
		{59, 59, 59},
		{58, 58, 58},
		{57, 57, 57},
		// 55
		{56, 56, 56},
		{55, 55, 55},
		{54, 54, 54},
		{53, 53, 53},
		{52, 52, 52},
		// 60
		{51, 51, 51},
		{50, 50, 50},
		{2: 48},
		{2: 142, 78: 143},
		{32, 32},
		// 65
		{9, 9},
		{9: 145},
		{2: 110, 5: 146},
		{24: 147},
		{2: 148, 10: 149},
		// 70
		{34, 34, 7: 34, 19: 34},
		{10, 10},
		{13, 13},
		{30, 30},
		{49, 49},
		// 75
		{36, 36},
		{40, 40},
		{39, 39},
		{38, 38},
		{37, 37},
		// 80
		{2: 110, 5: 205},
		{35: 185},
		{18: 169},
		{2: 110, 5: 162, 11: 163},
		{11: 166},
		// 85
		{28: 164},
		{2: 118, 16: 165},
		{14, 14},
		{28: 167},
		{2: 118, 16: 168},
		// 90
		{15, 15},
		{2: 110, 5: 170, 9: 171},
		{9: 178},
		{2: 148, 10: 172},
		{7: 173},
		// 95
		{2: 148, 10: 174},
		{19: 175},
		{7: 176},
		{2: 110, 5: 177},
		{16, 16},
		// 100
		{2: 148, 10: 179},
		{7: 180},
		{2: 148, 10: 181},
		{19: 182},
		{7: 183},
		// 105
		{2: 110, 5: 184},
		{17, 17},
		{2: 110, 22, 22, 186, 21: 188, 41: 187},
		{3: 22, 22, 21: 188, 41: 203},
		{3: 194, 195, 14: 193, 192, 39: 191},
		// 110
		{2: 189, 13: 190},
		{35, 35, 3: 35, 35, 12: 35},
		{3: 23, 23},
		{27, 27, 3: 194, 195, 14: 193, 202},
		{26, 26, 3: 26, 26},
		// 115
		{18, 18, 3: 18, 18, 12: 199, 69: 198},
		{2: 189, 13: 197},
		{2: 189, 13: 196},
		{20, 20, 3: 20, 20, 12: 20},
		{21, 21, 3: 21, 21, 12: 21},
		// 120
		{24, 24, 3: 24, 24},
		{55: 200},
		{2: 189, 13: 201},
		{19, 19, 3: 19, 19},
		{25, 25, 3: 25, 25},
		// 125
		{3: 194, 195, 14: 193, 192, 39: 204},
		{28, 28, 3: 194, 195, 14: 193, 202},
		{29, 29},
		{43, 43},
		{42, 42},
		// 130
		{41, 41},
		{47, 47},
		{18: 216},
		{45, 45},
		{35: 213},
		// 135
		{2: 110, 5: 215, 17: 214},
		{44, 44},
		{12, 12},
		{2: 110, 5: 125, 17: 217},
		{46, 46},
		// 140
		{77},
		{75},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 88

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 4:
		{
			setParseTree(yylex, yyS[yypt-0].create)
		}
	case 5:
		{
			setParseTree(yylex, yyS[yypt-0].create)
		}
	case 6:
		{
			setParseTree(yylex, yyS[yypt-0].drop)
		}
	case 7:
		{
			setParseTree(yylex, yyS[yypt-0].lock)
		}
	case 8:
		{
			setParseTree(yylex, yyS[yypt-0].unlock)
		}
	case 9:
		{
			setParseTree(yylex, yyS[yypt-0].show)
		}
	case 10:
		{
			setParseTree(yylex, yyS[yypt-0].kill)
		}
	case 11:
		{
			setParseTree(yylex, yyS[yypt-0].listen)
		}
	case 12:
		{
			setParseTree(yylex, yyS[yypt-0].shutdown)
		}
	case 13:
		{
			setParseTree(yylex, yyS[yypt-0].split)
		}
	case 14:
		{
			setParseTree(yylex, yyS[yypt-0].move)
		}
	case 15:
		{
			setParseTree(yylex, yyS[yypt-0].unite)
		}
	case 16:
		{
			setParseTree(yylex, yyS[yypt-0].register_router)
		}
	case 17:
		{
			setParseTree(yylex, yyS[yypt-0].unregister_router)
		}
	case 29:
		{
			switch v := string(yyS[yypt-0].str); v {
			case DatabasesStr, RoutersStr, PoolsStr, ShardsStr, BackendConnectionsStr, KeyRangesStr, ShardingRules, ClientsStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 30:
		{
			switch v := string(yyS[yypt-0].str); v {
			case ClientStr:
				yyVAL.str = v
			default:
				yyVAL.str = "unsupp"
			}
		}
	case 31:
		{
			yyVAL.drop = &Drop{Element: yyS[yypt-0].key_range_selector}
		}
	case 32:
		{
			yyVAL.drop = &Drop{Element: &KeyRangeSelector{KeyRangeID: `*`}}
		}
	case 33:
		{
			yyVAL.drop = &Drop{Element: yyS[yypt-0].sharding_rule_selector}
		}
	case 34:
		{
			yyVAL.drop = &Drop{Element: &ShardingRuleSelector{ID: `*`}}
		}
	case 35:
		{
			yyVAL.create = &Create{Element: yyS[yypt-0].sharding_rule}
		}
	case 36:
		{
			yyVAL.create = &Create{Element: yyS[yypt-0].kr}
		}
	case 37:
		{
			yyVAL.create = &Create{Element: yyS[yypt-0].shard}
		}
	case 38:
		{
			yyVAL.create = &Create{Element: yyS[yypt-0].ds}
		}
	case 39:
		{
			yyVAL.create = &Create{Element: yyS[yypt-0].sharding_rule}
		}
	case 40:
		{
			yyVAL.create = &Create{Element: yyS[yypt-0].kr}
		}
	case 41:
		{
			yyVAL.create = &Create{Element: yyS[yypt-0].shard}
		}
	case 42:
		{
			yyVAL.show = &Show{Cmd: yyS[yypt-0].str}
		}
	case 43:
		{
			yyVAL.str = string(yyS[yypt-0].str)
		}
	case 44:
		{
			yyVAL.bytes = []byte(yyS[yypt-0].str)
		}
	case 45:
		{
			yyVAL.str = string(yyS[yypt-0].str)
		}
	case 46:
		{
			yyVAL.str = string(yyS[yypt-0].str)
		}
	case 47:
		{
			yyVAL.str = string(yyS[yypt-0].str)
		}
	case 48:
		{
			yyVAL.lock = &Lock{KeyRangeID: yyS[yypt-0].key_range_selector.KeyRangeID}
		}
	case 49:
		{
			yyVAL.ds = &DataspaceDefinition{ID: yyS[yypt-0].str}
		}
	case 50:
		{
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: yyS[yypt-2].str, TableName: yyS[yypt-1].str, Entries: yyS[yypt-0].entrieslist}
		}
	case 51:
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: "shrule" + str, TableName: yyS[yypt-1].str, Entries: yyS[yypt-0].entrieslist}
		}
	case 52:
		{
			yyVAL.entrieslist = make([]ShardingRuleEntry, 0)
			yyVAL.entrieslist = append(yyVAL.entrieslist, yyS[yypt-0].shruleEntry)
		}
	case 53:
		{
			yyVAL.entrieslist = append(yyS[yypt-1].entrieslist, yyS[yypt-0].shruleEntry)
		}
	case 54:
		{
			yyVAL.shruleEntry = ShardingRuleEntry{
				Column:       yyS[yypt-1].str,
				HashFunction: yyS[yypt-0].str,
			}
		}
	case 55:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 56:
		{
			yyVAL.str = ""
		}
	case 57:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 58:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 59:
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 60:
		{
			yyVAL.str = ""
		}
	case 61:
		{
			yyVAL.kr = &KeyRangeDefinition{LowerBound: yyS[yypt-5].bytes, UpperBound: yyS[yypt-3].bytes, ShardID: yyS[yypt-0].str, KeyRangeID: yyS[yypt-7].str}
		}
	case 62:
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.kr = &KeyRangeDefinition{LowerBound: yyS[yypt-5].bytes, UpperBound: yyS[yypt-3].bytes, ShardID: yyS[yypt-0].str, KeyRangeID: "kr" + str}
		}
	case 63:
		{
			yyVAL.shard = &ShardDefinition{Id: yyS[yypt-3].str, Hosts: []string{yyS[yypt-0].str}}
		}
	case 64:
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.shard = &ShardDefinition{Id: "shard" + str, Hosts: []string{yyS[yypt-0].str}}
		}
	case 65:
		{
			yyVAL.unlock = &Unlock{KeyRangeID: yyS[yypt-0].key_range_selector.KeyRangeID}
		}
	case 66:
		{
			yyVAL.sharding_rule_selector = &ShardingRuleSelector{ID: yyS[yypt-0].str}
		}
	case 67:
		{
			yyVAL.key_range_selector = &KeyRangeSelector{KeyRangeID: yyS[yypt-0].str}
		}
	case 68:
		{
			yyVAL.split = &SplitKeyRange{KeyRangeID: yyS[yypt-4].key_range_selector.KeyRangeID, KeyRangeFromID: yyS[yypt-2].str, Border: yyS[yypt-0].bytes}
		}
	case 69:
		{
			yyVAL.kill = &Kill{Cmd: yyS[yypt-1].str, Target: yyS[yypt-0].str}
		}
	case 70:
		{
			yyVAL.move = &MoveKeyRange{KeyRangeID: yyS[yypt-2].key_range_selector.KeyRangeID, DestShardID: yyS[yypt-0].str}
		}
	case 71:
		{
			yyVAL.unite = &UniteKeyRange{KeyRangeIDL: yyS[yypt-2].key_range_selector.KeyRangeID, KeyRangeIDR: yyS[yypt-0].str}
		}
	case 72:
		{
			yyVAL.listen = &Listen{addr: yyS[yypt-0].str}
		}
	case 73:
		{
			yyVAL.shutdown = &Shutdown{}
		}
	case 74:
		{
			yyVAL.str = string(yyS[yypt-0].str)
		}
	case 75:
		{
			yyVAL.register_router = &RegisterRouter{ID: yyS[yypt-2].str, Addr: yyS[yypt-0].str}
		}
	case 76:
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: yyS[yypt-0].str}
		}
	case 77:
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: `*`}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
