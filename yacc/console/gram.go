// Code generated by goyacc -o gram.go -p yy gram.y. DO NOT EDIT.

//line gram.y:3
package spqrparser

import __yyfmt__ "fmt"

//line gram.y:3

import (
	"crypto/rand"
	"encoding/binary"
	"encoding/hex"
	"github.com/pg-sharding/spqr/qdb"
	"math"
	"strings"
)

const SIGNED_INT_RANGE_ERROR string = "the Signed Value should be at the range of [-9223372036854775808, 9223372036854775807]."

func randomHex(n int) (string, error) {
	bytes := make([]byte, n)
	if _, err := rand.Read(bytes); err != nil {
		return "", err
	}
	return hex.EncodeToString(bytes), nil
}

//line gram.y:27
type yySymType struct {
	yys          int
	str          string
	strlist      []string
	byte         byte
	bytes        []byte
	integer      int
	uinteger     uint
	uintegerlist []uint
	bool         bool
	empty        struct{}

	set       *Set
	statement Statement
	show      *Show

	drop   *Drop
	create *Create

	kill   *Kill
	lock   *Lock
	unlock *Unlock

	krbound *KeyRangeBound

	qname         *QualifiedName
	ds            *DistributionDefinition
	kr            *KeyRangeDefinition
	shard         *ShardDefinition
	sharding_rule *ShardingRuleDefinition

	register_router   *RegisterRouter
	unregister_router *UnregisterRouter

	split *SplitKeyRange
	move  *MoveKeyRange
	unite *UniteKeyRange

	redistribute *RedistributeKeyRange

	invalidate_cache      *InvalidateCache
	sync_reference_tables *SyncReferenceTables

	shutdown *Shutdown
	listen   *Listen

	trace     *TraceStmt
	stoptrace *StopTraceStmt

	distribution *DistributionDefinition

	alter                *Alter
	alter_distribution   *AlterDistribution
	distributed_relation *DistributedRelation
	alter_default_shard  *AlterDefaultShard

	relations    []*DistributedRelation
	relation     *DistributedRelation
	entrieslist  []ShardingRuleEntry
	dEntrieslist []DistributionKeyEntry

	shruleEntry ShardingRuleEntry

	distrKeyEntry DistributionKeyEntry
	aiEntry       *AutoIncrementEntry

	sharding_rule_selector *ShardingRuleSelector
	key_range_selector     *KeyRangeSelector
	distribution_selector  *DistributionSelector
	aiEntrieslist          []*AutoIncrementEntry

	colref ColumnRef
	where  WhereClauseNode

	order_clause OrderClause
	opt_asc_desc OptAscDesc

	group_clause GroupByClause

	opt_batch_size int

	retryMoveTaskGroup *RetryMoveTaskGroup
}

const IDENT = 57346
const COMMAND = 57347
const SHOW = 57348
const KILL = 57349
const WHERE = 57350
const OR = 57351
const AND = 57352
const TEQ = 57353
const TCOMMA = 57354
const TDOT = 57355
const SCONST = 57356
const ICONST = 57357
const INVALID_ICONST = 57358
const TSEMICOLON = 57359
const TMINUS = 57360
const TPLUS = 57361
const TOPENBR = 57362
const TCLOSEBR = 57363
const SHUTDOWN = 57364
const LISTEN = 57365
const REGISTER = 57366
const UNREGISTER = 57367
const ROUTER = 57368
const ROUTE = 57369
const CREATE = 57370
const ADD = 57371
const DROP = 57372
const LOCK = 57373
const UNLOCK = 57374
const SPLIT = 57375
const MOVE = 57376
const COMPOSE = 57377
const SET = 57378
const CASCADE = 57379
const ATTACH = 57380
const ALTER = 57381
const DETACH = 57382
const REDISTRIBUTE = 57383
const REFERENCE = 57384
const CHECK = 57385
const APPLY = 57386
const SHARDING = 57387
const COLUMN = 57388
const TABLE = 57389
const TABLES = 57390
const HASH = 57391
const FUNCTION = 57392
const KEY = 57393
const RANGE = 57394
const DISTRIBUTION = 57395
const RELATION = 57396
const REPLICATED = 57397
const AUTO = 57398
const INCREMENT = 57399
const SEQUENCE = 57400
const SCHEMA = 57401
const SHARDS = 57402
const KEY_RANGES = 57403
const ROUTERS = 57404
const SHARD = 57405
const HOST = 57406
const SHARDING_RULES = 57407
const RULE = 57408
const COLUMNS = 57409
const VERSION = 57410
const HOSTS = 57411
const SEQUENCES = 57412
const IS_READ_ONLY = 57413
const MOVE_STATS = 57414
const BY = 57415
const FROM = 57416
const TO = 57417
const WITH = 57418
const UNITE = 57419
const ALL = 57420
const ADDRESS = 57421
const FOR = 57422
const CLIENT = 57423
const BATCH = 57424
const SIZE = 57425
const INVALIDATE = 57426
const CACHE = 57427
const SYNC = 57428
const RETRY = 57429
const DISTRIBUTED = 57430
const IN = 57431
const ON = 57432
const DEFAULT = 57433
const IDENTITY = 57434
const MURMUR = 57435
const CITY = 57436
const START = 57437
const STOP = 57438
const TRACE = 57439
const MESSAGES = 57440
const TASK = 57441
const GROUP = 57442
const VARCHAR = 57443
const INTEGER = 57444
const INT = 57445
const TYPES = 57446
const UUID = 57447
const OP = 57448
const ASC = 57449
const DESC = 57450
const ORDER = 57451

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"COMMAND",
	"SHOW",
	"KILL",
	"WHERE",
	"OR",
	"AND",
	"TEQ",
	"TCOMMA",
	"TDOT",
	"SCONST",
	"ICONST",
	"INVALID_ICONST",
	"TSEMICOLON",
	"TMINUS",
	"TPLUS",
	"TOPENBR",
	"TCLOSEBR",
	"SHUTDOWN",
	"LISTEN",
	"REGISTER",
	"UNREGISTER",
	"ROUTER",
	"ROUTE",
	"CREATE",
	"ADD",
	"DROP",
	"LOCK",
	"UNLOCK",
	"SPLIT",
	"MOVE",
	"COMPOSE",
	"SET",
	"CASCADE",
	"ATTACH",
	"ALTER",
	"DETACH",
	"REDISTRIBUTE",
	"REFERENCE",
	"CHECK",
	"APPLY",
	"SHARDING",
	"COLUMN",
	"TABLE",
	"TABLES",
	"HASH",
	"FUNCTION",
	"KEY",
	"RANGE",
	"DISTRIBUTION",
	"RELATION",
	"REPLICATED",
	"AUTO",
	"INCREMENT",
	"SEQUENCE",
	"SCHEMA",
	"SHARDS",
	"KEY_RANGES",
	"ROUTERS",
	"SHARD",
	"HOST",
	"SHARDING_RULES",
	"RULE",
	"COLUMNS",
	"VERSION",
	"HOSTS",
	"SEQUENCES",
	"IS_READ_ONLY",
	"MOVE_STATS",
	"BY",
	"FROM",
	"TO",
	"WITH",
	"UNITE",
	"ALL",
	"ADDRESS",
	"FOR",
	"CLIENT",
	"BATCH",
	"SIZE",
	"INVALIDATE",
	"CACHE",
	"SYNC",
	"RETRY",
	"DISTRIBUTED",
	"IN",
	"ON",
	"DEFAULT",
	"IDENTITY",
	"MURMUR",
	"CITY",
	"START",
	"STOP",
	"TRACE",
	"MESSAGES",
	"TASK",
	"GROUP",
	"VARCHAR",
	"INTEGER",
	"INT",
	"TYPES",
	"UUID",
	"OP",
	"ASC",
	"DESC",
	"ORDER",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:1239

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 369

var yyAct = [...]int{

	180, 254, 303, 271, 132, 257, 217, 215, 300, 179,
	248, 216, 209, 202, 177, 208, 201, 111, 164, 223,
	156, 118, 224, 175, 324, 325, 249, 250, 251, 74,
	252, 199, 68, 108, 194, 176, 123, 150, 66, 166,
	70, 115, 32, 33, 64, 73, 85, 63, 319, 198,
	71, 190, 189, 102, 268, 245, 106, 195, 35, 34,
	40, 41, 163, 99, 26, 25, 29, 30, 31, 36,
	37, 121, 122, 282, 124, 42, 204, 38, 311, 312,
	313, 238, 113, 84, 187, 114, 72, 256, 134, 128,
	160, 103, 139, 314, 103, 140, 141, 205, 103, 121,
	103, 103, 295, 138, 137, 155, 158, 103, 125, 162,
	256, 207, 136, 39, 274, 236, 225, 169, 171, 167,
	43, 214, 45, 44, 81, 161, 173, 174, 169, 117,
	204, 27, 28, 104, 246, 152, 242, 183, 184, 185,
	186, 60, 172, 241, 53, 272, 269, 218, 292, 112,
	54, 205, 52, 196, 181, 182, 109, 151, 206, 320,
	83, 188, 55, 110, 219, 170, 192, 193, 168, 130,
	131, 221, 142, 107, 120, 220, 200, 159, 218, 126,
	79, 87, 53, 291, 98, 127, 110, 62, 54, 80,
	52, 86, 88, 230, 116, 89, 244, 109, 105, 239,
	55, 234, 235, 218, 110, 259, 260, 240, 270, 243,
	76, 258, 289, 288, 287, 255, 103, 253, 157, 154,
	146, 147, 265, 261, 280, 281, 65, 101, 100, 148,
	149, 144, 119, 262, 69, 275, 262, 298, 133, 95,
	94, 276, 283, 278, 227, 51, 284, 285, 293, 229,
	228, 263, 279, 50, 49, 290, 48, 75, 77, 157,
	47, 277, 264, 90, 91, 92, 93, 255, 135, 103,
	301, 304, 59, 305, 222, 294, 297, 97, 296, 87,
	58, 57, 266, 56, 306, 178, 317, 307, 211, 86,
	88, 327, 309, 89, 262, 286, 315, 308, 210, 212,
	129, 328, 213, 103, 232, 273, 316, 227, 165, 321,
	322, 233, 229, 228, 61, 46, 1, 329, 301, 22,
	237, 304, 19, 332, 331, 333, 330, 18, 334, 17,
	16, 15, 14, 12, 13, 8, 9, 323, 197, 267,
	153, 247, 145, 191, 143, 23, 21, 96, 24, 20,
	310, 203, 318, 299, 302, 6, 5, 4, 3, 7,
	11, 10, 82, 78, 67, 2, 326, 231, 226,
}
var yyPact = [...]int{

	36, -1000, 243, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 137, 99, -50, -53, -13,
	159, 159, 120, 79, 275, -1000, 159, 159, 159, 159,
	214, 213, 131, -22, 194, 185, -1000, -1000, -1000, -1000,
	-1000, -1000, 299, 67, 146, 97, -1000, -1000, -1000, -1000,
	150, 95, -1000, 4, -57, -1000, 142, -1000, 63, 195,
	96, 299, -64, 299, 132, -1000, 133, -1000, 292, 292,
	292, -1000, 223, 223, -1000, -1000, -1000, -1000, -1000, 253,
	38, 29, 28, 16, 299, 94, -1000, 191, 299, -1000,
	-62, 109, 173, -1000, 212, 103, 14, 56, 299, -1000,
	-1000, -27, 304, -59, 223, -1000, 90, 87, -1000, -1000,
	195, -1000, -1000, -1000, -1000, 299, 299, 299, -65, 265,
	-65, -65, -1000, -1000, -1000, -1000, 299, 299, 299, 299,
	5, -1000, -1000, -1000, 107, -1000, -39, -40, 95, 95,
	-66, -33, 299, -42, -73, 171, 84, 299, 37, 284,
	52, 275, 91, 299, 122, 261, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -87, 43, 303, 265, 300,
	-1000, -87, -87, 42, -1000, -1, -1000, 275, 304, 80,
	73, 95, -1000, -1000, -1000, 299, -35, -1000, 71, -75,
	84, 30, -1000, 162, 299, 299, -1000, 284, 224, -1000,
	-1000, -1000, -1000, 247, 275, 270, -1000, -36, 89, -1000,
	157, 86, 301, -1000, 41, 299, 265, -1000, -1000, -1000,
	240, 275, -1000, -1000, -1000, -1000, 284, 181, -10, -1000,
	-1000, 299, -1000, -1000, -1000, 299, 299, 283, -1000, 165,
	164, 163, -1000, 30, -1000, -1000, 130, -1000, 98, -1000,
	-1000, 221, 284, 27, -1000, 270, 275, -1000, 177, 299,
	299, -1000, 299, -1000, 299, -1000, 303, -1000, -1000, 282,
	-1000, -1000, 223, -1000, -1000, -1000, -75, -1000, -1000, -1000,
	-1000, 299, -14, 18, -1000, 299, -1000, 270, 275, 274,
	-1000, -47, 147, -1000, 162, -1000, -83, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 287, 7, 270, 299, -1000, 223,
	299, 86, -1000, -1000, -1000, -1000, 7, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 89, 14, 12, 15, 368, 367, 9, 11, 0,
	366, 4, 366, 365, 364, 226, 234, 363, 362, 361,
	360, 359, 358, 357, 356, 355, 18, 256, 254, 253,
	245, 16, 354, 6, 353, 352, 13, 3, 2, 8,
	20, 351, 5, 350, 1, 349, 348, 347, 346, 345,
	344, 343, 342, 17, 341, 340, 7, 339, 10, 21,
	338, 19, 337, 23, 336, 335, 334, 333, 332, 331,
	330, 329, 327, 322, 320, 319, 316, 315, 33, 314,
}
var yyR1 = [...]int{

	0, 76, 77, 77, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 12, 12, 12, 11,
	8, 8, 8, 8, 9, 10, 10, 26, 26, 5,
	5, 5, 6, 6, 7, 2, 2, 2, 1, 1,
	17, 18, 59, 59, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 22, 22, 22, 22, 24,
	24, 25, 45, 47, 47, 47, 47, 47, 32, 32,
	38, 53, 53, 33, 33, 34, 34, 39, 35, 35,
	37, 37, 51, 51, 50, 52, 79, 79, 78, 78,
	57, 57, 57, 23, 23, 23, 23, 23, 46, 62,
	62, 62, 61, 61, 63, 63, 19, 19, 19, 65,
	27, 55, 55, 54, 54, 58, 58, 58, 58, 58,
	58, 58, 60, 60, 28, 28, 31, 31, 36, 40,
	40, 41, 41, 43, 43, 43, 42, 42, 44, 44,
	3, 3, 3, 3, 4, 4, 29, 29, 30, 30,
	56, 56, 64, 14, 15, 16, 68, 20, 20, 69,
	70, 70, 70, 74, 74, 71, 67, 66, 48, 49,
	49, 72, 73, 73, 75,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 0, 2,
	1, 1, 1, 0, 2, 4, 2, 4, 3, 4,
	3, 3, 3, 4, 4, 2, 2, 2, 2, 4,
	4, 3, 2, 2, 4, 2, 5, 4, 3, 1,
	2, 7, 4, 3, 0, 3, 1, 2, 2, 0,
	2, 0, 1, 2, 2, 2, 1, 0, 1, 1,
	2, 3, 0, 2, 2, 2, 2, 6, 5, 1,
	1, 0, 4, 0, 3, 0, 5, 5, 5, 2,
	4, 3, 0, 3, 1, 1, 2, 1, 1, 2,
	2, 1, 3, 0, 6, 5, 1, 2, 2, 2,
	0, 2, 2, 1, 1, 1, 3, 0, 3, 0,
	1, 1, 1, 2, 1, 3, 9, 8, 5, 4,
	1, 3, 2, 3, 3, 2, 6, 3, 3, 4,
	5, 6, 6, 3, 0, 4, 2, 1, 2, 5,
	6, 5, 3, 3, 4,
}
var yyChk = [...]int{

	-1000, -76, -13, -22, -23, -24, -25, -21, -65, -64,
	-19, -20, -67, -66, -68, -69, -70, -71, -72, -73,
	-45, -48, -75, -49, -46, 29, 28, 95, 96, 30,
	31, 32, 6, 7, 23, 22, 33, 34, 41, 77,
	24, 25, 39, 84, 87, 86, -77, 17, -27, -28,
	-29, -30, 53, 45, 51, 63, -27, -28, -29, -30,
	42, -79, 88, 97, 97, -15, 51, -14, 45, -16,
	53, 63, 99, 58, 42, -15, 51, -15, -17, 60,
	69, 4, -18, 81, 4, -8, 14, 4, 15, 18,
	-15, -15, -15, -15, 26, 26, -47, -16, 53, 85,
	34, 42, -9, 4, 66, 52, -9, 76, -78, 47,
	54, -53, 54, 78, 81, 98, 52, 66, -59, 37,
	78, -9, -9, 100, -9, -78, 47, 52, -1, 8,
	-1, -1, -11, 15, -11, 15, 74, 75, 75, 76,
	-9, -9, 78, -50, 40, -52, 29, 30, 38, 39,
	99, 48, -78, -55, 46, -9, -40, 47, -9, 74,
	76, 69, -9, 89, -26, 4, 98, -11, 78, -9,
	78, -9, -59, -9, -9, -63, 100, -2, 20, -7,
	-9, -63, -63, -9, -9, -9, -9, 79, 54, 91,
	91, -51, -53, -53, 100, 90, -9, -60, 91, 104,
	-40, -31, -36, -41, 46, 67, -9, 74, -4, -3,
	14, 4, 15, 18, 69, -56, -8, -33, 56, -9,
	53, -33, 13, -61, 109, 73, -5, 4, 10, 9,
	-2, -6, 4, 11, -61, -61, 73, -74, 82, -8,
	-26, 63, 63, -53, -9, 90, 63, -54, -58, 101,
	102, 103, 105, -31, -44, -36, 80, -42, 49, -9,
	-9, -4, 12, 27, 15, -56, 12, -57, 90, 57,
	51, -37, 59, 4, 73, -7, -2, 21, -8, -4,
	43, 44, 83, -9, -9, -9, 12, 49, 49, 49,
	-44, 53, 50, 27, -3, 75, -8, -56, 60, -34,
	-39, -9, -32, -38, -9, -9, -7, -11, -58, -9,
	-43, 92, 93, 94, 75, -9, -56, 12, -35, 95,
	12, -33, -42, -62, 107, 108, -10, 4, 14, -44,
	-39, -11, -38, -37, -44,
}
var yyDef = [...]int{

	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 0, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 3, 65, 66,
	67, 68, 0, 0, 0, 0, 103, 104, 105, 106,
	0, 0, 96, 0, 0, 54, 0, 56, 0, 53,
	0, 0, 0, 0, 0, 119, 0, 162, 48, 48,
	48, 50, 0, 0, 51, 176, 30, 31, 32, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 178,
	0, 0, 122, 34, 140, 0, 0, 0, 0, 98,
	99, 0, 0, 0, 0, 71, 0, 0, 58, 52,
	53, 165, 60, 61, 62, 0, 0, 0, 115, 0,
	115, 115, 167, 29, 168, 33, 0, 0, 0, 0,
	0, 182, 183, 73, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 140, 0, 0, 0, 0,
	0, 0, 84, 0, 84, 37, 69, 70, 55, 164,
	57, 163, 59, 63, 64, 113, 0, 49, 0, 0,
	44, 113, 113, 0, 169, 174, 175, 0, 0, 0,
	0, 94, 92, 95, 184, 0, 0, 120, 0, 0,
	0, 149, 136, 147, 0, 0, 139, 0, 0, 154,
	150, 151, 152, 0, 0, 159, 160, 102, 0, 108,
	0, 91, 0, 116, 0, 0, 0, 39, 40, 41,
	0, 0, 42, 43, 117, 118, 0, 170, 0, 181,
	74, 0, 77, 93, 179, 0, 0, 121, 124, 125,
	127, 128, 131, 149, 135, 137, 0, 138, 0, 141,
	142, 0, 0, 0, 153, 158, 0, 107, 0, 0,
	0, 82, 0, 38, 0, 114, 47, 45, 46, 166,
	171, 172, 0, 76, 180, 132, 0, 126, 129, 130,
	134, 0, 0, 0, 155, 0, 161, 100, 0, 83,
	86, 89, 84, 79, 147, 90, 111, 173, 123, 148,
	146, 143, 144, 145, 0, 149, 101, 0, 87, 0,
	0, 91, 80, 112, 109, 110, 149, 35, 36, 157,
	85, 88, 78, 81, 156,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:277
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:278
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:283
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:287
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:291
		{
			setParseTree(yylex, yyDollar[1].trace)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:295
		{
			setParseTree(yylex, yyDollar[1].stoptrace)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:299
		{
			setParseTree(yylex, yyDollar[1].drop)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:303
		{
			setParseTree(yylex, yyDollar[1].lock)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:307
		{
			setParseTree(yylex, yyDollar[1].unlock)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:311
		{
			setParseTree(yylex, yyDollar[1].show)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:315
		{
			setParseTree(yylex, yyDollar[1].kill)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:319
		{
			setParseTree(yylex, yyDollar[1].listen)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:323
		{
			setParseTree(yylex, yyDollar[1].shutdown)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:327
		{
			setParseTree(yylex, yyDollar[1].split)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:331
		{
			setParseTree(yylex, yyDollar[1].move)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:335
		{
			setParseTree(yylex, yyDollar[1].redistribute)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:339
		{
			setParseTree(yylex, yyDollar[1].unite)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:343
		{
			setParseTree(yylex, yyDollar[1].register_router)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:347
		{
			setParseTree(yylex, yyDollar[1].unregister_router)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:351
		{
			setParseTree(yylex, yyDollar[1].alter)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:355
		{
			setParseTree(yylex, yyDollar[1].invalidate_cache)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:359
		{
			setParseTree(yylex, yyDollar[1].retryMoveTaskGroup)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:363
		{
			setParseTree(yylex, yyDollar[1].sync_reference_tables)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:367
		{
			setParseTree(yylex, yyDollar[1].alter)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:372
		{
			if yyDollar[1].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				yyVAL.integer = int(yyDollar[1].uinteger)
			}
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:379
		{
			if yyDollar[2].uinteger > uint(-math.MinInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				yyVAL.integer = int(-yyDollar[2].uinteger)
			}
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:386
		{
			if yyDollar[2].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				yyVAL.integer = int(yyDollar[2].uinteger)
			}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:396
		{
			yyVAL.uinteger = uint(yyDollar[1].uinteger)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:401
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:405
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:407
		{
			if yyDollar[1].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(yyDollar[1].uinteger))
				yyVAL.str = string(buf)
			}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:416
		{
			if yyDollar[2].uinteger > uint(-math.MinInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(-yyDollar[2].uinteger))
				yyVAL.str = string(buf)
			}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:428
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:434
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:437
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:443
		{
			yyVAL.qname = &QualifiedName{Name: yyDollar[1].str}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:447
		{
			yyVAL.qname = &QualifiedName{Name: yyDollar[3].str, SchemaName: yyDollar[1].str}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:453
		{
			yyVAL.str = yyDollar[1].str
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:455
		{
			yyVAL.str = "AND"
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:457
		{
			yyVAL.str = "OR"
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:462
		{
			yyVAL.str = yyDollar[1].str
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:464
		{
			yyVAL.str = "="
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:470
		{
			yyVAL.colref = ColumnRef{
				ColName: yyDollar[1].str,
			}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:478
		{
			yyVAL.where = yyDollar[2].where
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:481
		{
			yyVAL.where = WhereClauseLeaf{
				ColRef: yyDollar[1].colref,
				Op:     yyDollar[2].str,
				Value:  yyDollar[3].str,
			}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:489
		{
			yyVAL.where = WhereClauseOp{
				Op:    yyDollar[2].str,
				Left:  yyDollar[1].where,
				Right: yyDollar[3].where,
			}
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:499
		{
			yyVAL.where = WhereClauseEmpty{}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:503
		{
			yyVAL.where = yyDollar[2].where
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:510
		{
			switch v := strings.ToLower(string(yyDollar[1].str)); v {
			case DatabasesStr, RoutersStr, PoolsStr, InstanceStr, ShardsStr, BackendConnectionsStr, KeyRangesStr, ShardingRules, ClientsStr, StatusStr, DistributionsStr, CoordinatorAddrStr, VersionStr, RelationsStr, ReferenceRelationsStr, TaskGroupStr, PreparedStatementsStr, QuantilesStr, SequencesStr, IsReadOnlyStr, MoveStatsStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:521
		{
			switch v := string(yyDollar[1].str); v {
			case ClientStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:531
		{
			yyVAL.bool = true
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:531
		{
			yyVAL.bool = false
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:535
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].key_range_selector}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:539
		{
			yyVAL.drop = &Drop{Element: &KeyRangeSelector{KeyRangeID: `*`}}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:543
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].sharding_rule_selector}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:547
		{
			yyVAL.drop = &Drop{Element: &ShardingRuleSelector{ID: `*`}}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:551
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].distribution_selector, CascadeDelete: yyDollar[3].bool}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:555
		{
			yyVAL.drop = &Drop{Element: &DistributionSelector{ID: `*`}, CascadeDelete: yyDollar[4].bool}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:559
		{
			yyVAL.drop = &Drop{Element: &ShardSelector{ID: yyDollar[3].str}}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:563
		{
			yyVAL.drop = &Drop{Element: &TaskGroupSelector{}}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:567
		{
			yyVAL.drop = &Drop{Element: &SequenceSelector{Name: yyDollar[3].str}}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:571
		{
			yyVAL.drop = &Drop{
				Element: &ReferenceRelationSelector{
					ID: yyDollar[4].str,
				},
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:579
		{
			yyVAL.drop = &Drop{
				Element: &ReferenceRelationSelector{
					ID: yyDollar[4].str,
				},
			}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:590
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:595
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:600
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:604
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:610
		{
			yyVAL.trace = &TraceStmt{All: true}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:613
		{
			yyVAL.trace = &TraceStmt{
				Client: yyDollar[4].uinteger,
			}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:621
		{
			yyVAL.stoptrace = &StopTraceStmt{}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:627
		{
			yyVAL.alter = &Alter{Element: yyDollar[2].alter_distribution}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:633
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AttachRelation{
					Distribution: yyDollar[1].distribution_selector,
					Relations:    yyDollar[2].relations,
				},
			}
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:642
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &DetachRelation{
					Distribution: yyDollar[1].distribution_selector,
					RelationName: yyDollar[4].qname,
				},
			}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:651
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AlterRelation{
					Distribution: yyDollar[1].distribution_selector,
					Relation:     yyDollar[2].distributed_relation,
				},
			}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:660
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AlterDefaultShard{
					Distribution: yyDollar[1].distribution_selector,
					Shard:        yyDollar[5].str,
				},
			}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:669
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &DropDefaultShard{Distribution: yyDollar[1].distribution_selector},
			}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:678
		{
			yyVAL.dEntrieslist = append(yyDollar[1].dEntrieslist, yyDollar[3].distrKeyEntry)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:680
		{
			yyVAL.dEntrieslist = []DistributionKeyEntry{
				yyDollar[1].distrKeyEntry,
			}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:690
		{
			yyVAL.distrKeyEntry = DistributionKeyEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 81:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:699
		{
			if len(yyDollar[2].qname.SchemaName) > 0 && len(yyDollar[7].str) > 0 {
				yylex.Error("it is forbidden to use both a qualified relation name and the keyword SCHEMA")
				return 1
			} else if len(yyDollar[2].qname.SchemaName) > 0 {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.Name,
					DistributionKey:      yyDollar[5].dEntrieslist,
					AutoIncrementEntries: yyDollar[6].aiEntrieslist,
					SchemaName:           yyDollar[2].qname.SchemaName,
				}
			} else {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.Name,
					DistributionKey:      yyDollar[5].dEntrieslist,
					AutoIncrementEntries: yyDollar[6].aiEntrieslist,
					SchemaName:           yyDollar[7].str,
				}
			}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:720
		{
			if len(yyDollar[2].qname.SchemaName) > 0 && len(yyDollar[4].str) > 0 {
				yylex.Error("it is forbidden to use both a qualified relation name and the keyword SCHEMA")
				return 1
			} else if len(yyDollar[2].qname.SchemaName) > 0 {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.Name,
					ReplicatedRelation:   true,
					AutoIncrementEntries: yyDollar[3].aiEntrieslist,
					SchemaName:           yyDollar[2].qname.SchemaName,
				}
			} else {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.Name,
					ReplicatedRelation:   true,
					AutoIncrementEntries: yyDollar[3].aiEntrieslist,
					SchemaName:           yyDollar[4].str,
				}
			}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:742
		{
			yyVAL.aiEntrieslist = yyDollar[3].aiEntrieslist
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:744
		{
			yyVAL.aiEntrieslist = nil
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:750
		{
			yyVAL.aiEntrieslist = append(yyDollar[1].aiEntrieslist, yyDollar[3].aiEntry)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:752
		{
			yyVAL.aiEntrieslist = []*AutoIncrementEntry{
				yyDollar[1].aiEntry,
			}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:760
		{
			yyVAL.aiEntry = &AutoIncrementEntry{
				Column: yyDollar[1].str,
				Start:  uint64(yyDollar[2].uinteger),
			}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:769
		{
			yyVAL.uinteger = yyDollar[2].uinteger
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:771
		{
			yyVAL.uinteger = 0
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:776
		{
			yyVAL.str = yyDollar[2].str
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:778
		{
			yyVAL.str = ""
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:783
		{
			yyVAL.relations = []*DistributedRelation{yyDollar[1].distributed_relation}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:785
		{
			yyVAL.relations = append(yyDollar[1].relations, yyDollar[2].distributed_relation)
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:790
		{
			yyVAL.relations = yyDollar[2].relations
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:795
		{
			yyVAL.distributed_relation = yyDollar[2].distributed_relation
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:800
		{
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:803
		{
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:803
		{
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:807
		{
			yyVAL.strlist = yyDollar[2].strlist
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:808
		{
			yyVAL.strlist = yyDollar[3].strlist
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:808
		{
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:812
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:817
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:822
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:827
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:832
		{
			yyVAL.create = &Create{
				Element: &ReferenceRelationDefinition{
					TableName:            yyDollar[4].str,
					AutoIncrementEntries: yyDollar[5].aiEntrieslist,
					ShardIds:             yyDollar[6].strlist,
				},
			}
		}
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:844
		{
			yyVAL.alter = &Alter{
				Element: &AlterDistribution{
					Element: &AttachRelation{
						Distribution: &DistributionSelector{ID: yyDollar[5].str},
						Relations:    []*DistributedRelation{yyDollar[3].distributed_relation},
					},
				},
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:856
		{
			yyVAL.opt_asc_desc = &SortByAsc{}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:857
		{
			yyVAL.opt_asc_desc = &SortByDesc{}
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:858
		{
			yyVAL.opt_asc_desc = &SortByDefault{}
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:862
		{
			yyVAL.order_clause = &Order{Col: yyDollar[3].colref, OptAscDesc: yyDollar[4].opt_asc_desc}
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:865
		{
			yyVAL.order_clause = OrderClause(nil)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:870
		{
			yyVAL.group_clause = GroupBy{Col: yyDollar[3].colref}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:873
		{
			yyVAL.group_clause = GroupByClauseEmpty{}
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:878
		{
			yyVAL.show = &Show{Cmd: yyDollar[2].str, Where: yyDollar[3].where, GroupBy: yyDollar[4].group_clause, Order: yyDollar[5].order_clause}
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:880
		{
			yyVAL.show = &Show{Cmd: ShardsStr, Where: yyDollar[3].where, GroupBy: yyDollar[4].group_clause, Order: yyDollar[5].order_clause}
		}
	case 118:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:882
		{
			yyVAL.show = &Show{Cmd: HostsStr, Where: yyDollar[3].where, GroupBy: yyDollar[4].group_clause, Order: yyDollar[5].order_clause}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:888
		{
			yyVAL.lock = &Lock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:896
		{
			yyVAL.ds = &DistributionDefinition{
				ID:           yyDollar[2].str,
				ColTypes:     yyDollar[3].strlist,
				DefaultShard: yyDollar[4].str,
			}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:905
		{
			yyVAL.strlist = yyDollar[3].strlist
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:907
		{
			/* empty column types should be prohibited */
			yyVAL.strlist = nil
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:913
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:915
		{
			yyVAL.strlist = []string{
				yyDollar[1].str,
			}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:922
		{
			yyVAL.str = qdb.ColumnTypeVarchar
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:924
		{
			yyVAL.str = qdb.ColumnTypeVarcharHashed
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:926
		{
			yyVAL.str = qdb.ColumnTypeInteger
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:928
		{
			yyVAL.str = qdb.ColumnTypeInteger
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:930
		{
			yyVAL.str = qdb.ColumnTypeUinteger
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:932
		{
			yyVAL.str = qdb.ColumnTypeUinteger
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:934
		{
			yyVAL.str = qdb.ColumnTypeUUID
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:939
		{
			yyVAL.str = yyDollar[3].str
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:941
		{
			yyVAL.str = ""
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:947
		{
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: yyDollar[3].str, TableName: yyDollar[4].str, Entries: yyDollar[5].entrieslist, Distribution: yyDollar[6].str}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:952
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: "shrule" + str, TableName: yyDollar[3].str, Entries: yyDollar[4].entrieslist, Distribution: yyDollar[5].str}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:961
		{
			yyVAL.entrieslist = make([]ShardingRuleEntry, 0)
			yyVAL.entrieslist = append(yyVAL.entrieslist, yyDollar[1].shruleEntry)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:967
		{
			yyVAL.entrieslist = append(yyDollar[1].entrieslist, yyDollar[2].shruleEntry)
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:973
		{
			yyVAL.shruleEntry = ShardingRuleEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:982
		{
			yyVAL.str = yyDollar[2].str
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:985
		{
			yyVAL.str = ""
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:989
		{
			yyVAL.str = yyDollar[2].str
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:994
		{
			yyVAL.str = yyDollar[2].str
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1000
		{
			yyVAL.str = "identity"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1002
		{
			yyVAL.str = "murmur"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1004
		{
			yyVAL.str = "city"
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1010
		{
			yyVAL.str = yyDollar[3].str
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:1012
		{
			yyVAL.str = ""
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1017
		{
			yyVAL.str = yyDollar[3].str
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:1019
		{
			yyVAL.str = "default"
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1025
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1029
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1031
		{
			if yyDollar[1].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(yyDollar[1].uinteger))
				yyVAL.bytes = buf
			}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1040
		{
			if yyDollar[2].uinteger > uint(-math.MinInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(-yyDollar[2].uinteger))
				yyVAL.bytes = buf
			}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1052
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: [][]byte{
					yyDollar[1].bytes,
				},
			}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1059
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: append(yyDollar[1].krbound.Pivots, yyDollar[3].bytes),
			}
		}
	case 156:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:1068
		{
			yyVAL.kr = &KeyRangeDefinition{
				KeyRangeID:   yyDollar[3].str,
				LowerBound:   yyDollar[5].krbound,
				ShardID:      yyDollar[8].str,
				Distribution: yyDollar[9].str,
			}
		}
	case 157:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:1077
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.kr = &KeyRangeDefinition{
				LowerBound:   yyDollar[4].krbound,
				ShardID:      yyDollar[7].str,
				Distribution: yyDollar[8].str,
				KeyRangeID:   "kr" + str,
			}
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1092
		{
			yyVAL.shard = &ShardDefinition{Id: yyDollar[2].str, Hosts: yyDollar[5].strlist}
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1097
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.shard = &ShardDefinition{Id: "shard" + str, Hosts: yyDollar[4].strlist}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1107
		{
			yyVAL.strlist = []string{yyDollar[1].str}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1112
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1118
		{
			yyVAL.unlock = &Unlock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1124
		{
			yyVAL.sharding_rule_selector = &ShardingRuleSelector{ID: yyDollar[3].str}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1130
		{
			yyVAL.key_range_selector = &KeyRangeSelector{KeyRangeID: yyDollar[3].str}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1136
		{
			yyVAL.distribution_selector = &DistributionSelector{ID: yyDollar[2].str}
		}
	case 166:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1142
		{
			yyVAL.split = &SplitKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeFromID: yyDollar[4].str, Border: yyDollar[6].krbound}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1148
		{
			yyVAL.kill = &Kill{Cmd: yyDollar[2].str, Target: yyDollar[3].uinteger}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1151
		{
			yyVAL.kill = &Kill{Cmd: "client", Target: yyDollar[3].uinteger}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1157
		{
			yyVAL.move = &MoveKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str}
		}
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1163
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Check: true, Apply: true}
		}
	case 171:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1165
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Check: true}
		}
	case 172:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1167
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Apply: true}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1171
		{
			yyVAL.opt_batch_size = int(yyDollar[3].uinteger)
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:1172
		{
			yyVAL.opt_batch_size = -1
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1176
		{
			yyVAL.unite = &UniteKeyRange{KeyRangeIDL: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeIDR: yyDollar[4].str}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1182
		{
			yyVAL.listen = &Listen{addr: yyDollar[2].str}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1188
		{
			yyVAL.shutdown = &Shutdown{}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1194
		{
			yyVAL.invalidate_cache = &InvalidateCache{}
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1200
		{
			yyVAL.sync_reference_tables = &SyncReferenceTables{
				ShardID:          yyDollar[5].str,
				RelationSelector: "*",
			}
		}
	case 180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1206
		{
			yyVAL.sync_reference_tables = &SyncReferenceTables{
				ShardID:          yyDollar[6].str,
				RelationSelector: yyDollar[4].str,
			}
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1217
		{
			yyVAL.register_router = &RegisterRouter{ID: yyDollar[3].str, Addr: yyDollar[5].str}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1223
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: yyDollar[3].str}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1228
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: `*`}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1236
		{
			yyVAL.retryMoveTaskGroup = &RetryMoveTaskGroup{}
		}
	}
	goto yystack /* stack new state and value */
}
