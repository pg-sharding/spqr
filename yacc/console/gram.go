// Code generated by goyacc -o gram.go -p yy gram.y. DO NOT EDIT.

//line gram.y:3
package spqrparser

import __yyfmt__ "fmt"

//line gram.y:3

import (
	"crypto/rand"
	"encoding/binary"
	"encoding/hex"
	"github.com/pg-sharding/spqr/qdb"
	"github.com/pg-sharding/spqr/router/rfqn"
	"math"
	"strings"
)

const SIGNED_INT_RANGE_ERROR string = "the Signed Value should be at the range of [-9223372036854775808, 9223372036854775807]."

func randomHex(n int) (string, error) {
	bytes := make([]byte, n)
	if _, err := rand.Read(bytes); err != nil {
		return "", err
	}
	return hex.EncodeToString(bytes), nil
}

//line gram.y:28
type yySymType struct {
	yys          int
	str          string
	strlist      []string
	byte         byte
	bytes        []byte
	integer      int
	uinteger     uint
	uintegerlist []uint
	bool         bool
	empty        struct{}

	set       *Set
	statement Statement
	show      *Show

	drop   *Drop
	create *Create

	kill   *Kill
	lock   *Lock
	unlock *Unlock

	krbound *KeyRangeBound

	qname         *rfqn.RelationFQN
	ds            *DistributionDefinition
	kr            *KeyRangeDefinition
	shard         *ShardDefinition
	sharding_rule *ShardingRuleDefinition

	register_router   *RegisterRouter
	unregister_router *UnregisterRouter

	split *SplitKeyRange
	move  *MoveKeyRange
	unite *UniteKeyRange

	redistribute *RedistributeKeyRange

	invalidate            *Invalidate
	sync_reference_tables *SyncReferenceTables

	shutdown *Shutdown
	listen   *Listen

	trace     *TraceStmt
	stoptrace *StopTraceStmt

	distribution *DistributionDefinition

	alter                *Alter
	alter_distribution   *AlterDistribution
	distributed_relation *DistributedRelation
	alter_default_shard  *AlterDefaultShard

	relations    []*DistributedRelation
	relation     *DistributedRelation
	entrieslist  []ShardingRuleEntry
	dEntrieslist []DistributionKeyEntry

	shruleEntry ShardingRuleEntry

	distrKeyEntry DistributionKeyEntry
	aiEntry       *AutoIncrementEntry

	sharding_rule_selector *ShardingRuleSelector
	key_range_selector     *KeyRangeSelector
	distribution_selector  *DistributionSelector
	aiEntrieslist          []*AutoIncrementEntry

	colref     ColumnRef
	colreflist []ColumnRef
	where      WhereClauseNode

	order_clause OrderClause
	opt_asc_desc OptAscDesc

	group_clause GroupByClause

	retryMoveTaskGroup *RetryMoveTaskGroup

	typedColRef TypedColRef
	routingExpr []TypedColRef
}

const IDENT = 57346
const COMMAND = 57347
const SHOW = 57348
const KILL = 57349
const WHERE = 57350
const OR = 57351
const AND = 57352
const TEQ = 57353
const TCOMMA = 57354
const TDOT = 57355
const SCONST = 57356
const ICONST = 57357
const INVALID_ICONST = 57358
const TSEMICOLON = 57359
const TMINUS = 57360
const TPLUS = 57361
const TOPENBR = 57362
const TCLOSEBR = 57363
const TOPENSQBR = 57364
const TCLOSESQBR = 57365
const SHUTDOWN = 57366
const LISTEN = 57367
const REGISTER = 57368
const UNREGISTER = 57369
const ROUTER = 57370
const ROUTE = 57371
const CREATE = 57372
const ADD = 57373
const DROP = 57374
const LOCK = 57375
const UNLOCK = 57376
const SPLIT = 57377
const MOVE = 57378
const COMPOSE = 57379
const SET = 57380
const CASCADE = 57381
const ATTACH = 57382
const ALTER = 57383
const DETACH = 57384
const REDISTRIBUTE = 57385
const REFERENCE = 57386
const CHECK = 57387
const APPLY = 57388
const SHARDING = 57389
const COLUMN = 57390
const TABLE = 57391
const TABLES = 57392
const RELATIONS = 57393
const BACKENDS = 57394
const HASH = 57395
const FUNCTION = 57396
const KEY = 57397
const RANGE = 57398
const DISTRIBUTION = 57399
const RELATION = 57400
const REPLICATED = 57401
const AUTO = 57402
const INCREMENT = 57403
const SEQUENCE = 57404
const SCHEMA = 57405
const SHARDS = 57406
const KEY_RANGES = 57407
const ROUTERS = 57408
const SHARD = 57409
const HOST = 57410
const SHARDING_RULES = 57411
const RULE = 57412
const COLUMNS = 57413
const VERSION = 57414
const HOSTS = 57415
const SEQUENCES = 57416
const IS_READ_ONLY = 57417
const MOVE_STATS = 57418
const BY = 57419
const FROM = 57420
const TO = 57421
const WITH = 57422
const UNITE = 57423
const ALL = 57424
const ADDRESS = 57425
const FOR = 57426
const CLIENT = 57427
const BATCH = 57428
const SIZE = 57429
const INVALIDATE = 57430
const CACHE = 57431
const SYNC = 57432
const RETRY = 57433
const DISTRIBUTED = 57434
const IN = 57435
const ON = 57436
const DEFAULT = 57437
const IDENTITY = 57438
const MURMUR = 57439
const CITY = 57440
const START = 57441
const STOP = 57442
const TRACE = 57443
const MESSAGES = 57444
const TASK = 57445
const GROUP = 57446
const VARCHAR = 57447
const INTEGER = 57448
const INT = 57449
const TYPES = 57450
const UUID = 57451
const OP = 57452
const ASC = 57453
const DESC = 57454
const ORDER = 57455

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"COMMAND",
	"SHOW",
	"KILL",
	"WHERE",
	"OR",
	"AND",
	"TEQ",
	"TCOMMA",
	"TDOT",
	"SCONST",
	"ICONST",
	"INVALID_ICONST",
	"TSEMICOLON",
	"TMINUS",
	"TPLUS",
	"TOPENBR",
	"TCLOSEBR",
	"TOPENSQBR",
	"TCLOSESQBR",
	"SHUTDOWN",
	"LISTEN",
	"REGISTER",
	"UNREGISTER",
	"ROUTER",
	"ROUTE",
	"CREATE",
	"ADD",
	"DROP",
	"LOCK",
	"UNLOCK",
	"SPLIT",
	"MOVE",
	"COMPOSE",
	"SET",
	"CASCADE",
	"ATTACH",
	"ALTER",
	"DETACH",
	"REDISTRIBUTE",
	"REFERENCE",
	"CHECK",
	"APPLY",
	"SHARDING",
	"COLUMN",
	"TABLE",
	"TABLES",
	"RELATIONS",
	"BACKENDS",
	"HASH",
	"FUNCTION",
	"KEY",
	"RANGE",
	"DISTRIBUTION",
	"RELATION",
	"REPLICATED",
	"AUTO",
	"INCREMENT",
	"SEQUENCE",
	"SCHEMA",
	"SHARDS",
	"KEY_RANGES",
	"ROUTERS",
	"SHARD",
	"HOST",
	"SHARDING_RULES",
	"RULE",
	"COLUMNS",
	"VERSION",
	"HOSTS",
	"SEQUENCES",
	"IS_READ_ONLY",
	"MOVE_STATS",
	"BY",
	"FROM",
	"TO",
	"WITH",
	"UNITE",
	"ALL",
	"ADDRESS",
	"FOR",
	"CLIENT",
	"BATCH",
	"SIZE",
	"INVALIDATE",
	"CACHE",
	"SYNC",
	"RETRY",
	"DISTRIBUTED",
	"IN",
	"ON",
	"DEFAULT",
	"IDENTITY",
	"MURMUR",
	"CITY",
	"START",
	"STOP",
	"TRACE",
	"MESSAGES",
	"TASK",
	"GROUP",
	"VARCHAR",
	"INTEGER",
	"INT",
	"TYPES",
	"UUID",
	"OP",
	"ASC",
	"DESC",
	"ORDER",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:1273

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 433

var yyAct = [...]int16{
	185, 333, 250, 184, 330, 165, 275, 132, 310, 218,
	220, 278, 258, 212, 274, 219, 182, 205, 211, 168,
	204, 114, 158, 121, 336, 337, 233, 232, 228, 251,
	252, 253, 237, 254, 233, 232, 202, 197, 287, 111,
	181, 74, 126, 150, 68, 171, 118, 64, 105, 63,
	85, 327, 66, 104, 70, 201, 109, 193, 106, 73,
	279, 280, 281, 192, 71, 270, 207, 60, 166, 247,
	53, 124, 125, 198, 127, 149, 101, 167, 54, 292,
	52, 240, 116, 105, 105, 117, 190, 100, 105, 208,
	55, 105, 162, 106, 106, 139, 140, 105, 106, 124,
	72, 106, 166, 79, 120, 210, 138, 106, 157, 160,
	322, 167, 164, 99, 128, 62, 105, 305, 137, 136,
	174, 176, 217, 135, 283, 172, 106, 231, 238, 179,
	174, 236, 229, 163, 207, 231, 186, 187, 188, 189,
	279, 280, 281, 152, 107, 87, 331, 177, 248, 178,
	80, 271, 244, 199, 313, 86, 88, 208, 243, 89,
	209, 175, 173, 82, 221, 112, 141, 110, 223, 195,
	196, 53, 81, 115, 113, 123, 112, 153, 154, 54,
	203, 52, 225, 191, 129, 113, 222, 98, 119, 108,
	161, 55, 273, 76, 302, 159, 260, 299, 298, 246,
	234, 297, 221, 156, 103, 308, 241, 105, 261, 262,
	256, 242, 290, 291, 122, 69, 245, 106, 102, 224,
	264, 264, 257, 272, 255, 95, 276, 267, 65, 263,
	145, 146, 94, 285, 348, 51, 50, 303, 265, 147,
	148, 143, 49, 48, 293, 349, 316, 286, 294, 295,
	346, 288, 159, 47, 105, 133, 266, 289, 97, 75,
	77, 300, 59, 58, 106, 90, 91, 92, 93, 57,
	56, 340, 311, 257, 276, 134, 105, 226, 304, 131,
	307, 341, 268, 87, 306, 314, 106, 317, 312, 315,
	325, 214, 183, 86, 88, 264, 318, 89, 169, 320,
	319, 213, 215, 296, 282, 216, 323, 84, 170, 301,
	151, 61, 46, 321, 276, 1, 22, 334, 324, 332,
	329, 239, 338, 328, 19, 18, 311, 17, 16, 342,
	15, 14, 347, 345, 343, 344, 12, 350, 32, 33,
	13, 8, 9, 180, 335, 351, 227, 200, 269, 334,
	352, 155, 249, 144, 194, 142, 35, 34, 40, 41,
	23, 21, 26, 25, 29, 30, 31, 36, 37, 96,
	24, 20, 259, 42, 206, 38, 277, 326, 309, 6,
	5, 4, 3, 7, 11, 10, 83, 78, 67, 2,
	339, 284, 235, 230, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 39, 0, 0, 0, 0, 0, 0,
	43, 0, 45, 44, 0, 0, 0, 0, 0, 0,
	0, 27, 28,
}

var yyPact = [...]int16{
	332, -1000, 236, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 124, 23, -52, -54, -3,
	138, 138, 99, 303, 279, -1000, 138, 138, 138, 138,
	204, 197, 130, 24, 182, 160, -1000, -1000, -1000, -1000,
	-1000, -1000, 250, 74, 133, 87, -1000, -1000, -1000, -1000,
	116, 115, -1000, 0, -56, -1000, 132, -1000, 34, 175,
	93, 250, -62, 250, 116, -1000, 128, -1000, 271, -1000,
	-1000, -1000, -1000, 240, -1000, -1000, -1000, -1000, -1000, 260,
	45, 40, 39, 26, 250, 84, -1000, 199, 250, -1000,
	-14, -1000, -60, 127, 155, -1000, -1000, 203, 112, 12,
	60, 250, -1000, -1000, -16, 294, -57, 240, -1000, 80,
	79, -1000, -1000, 175, -1000, 175, -1000, -1000, 250, 250,
	-64, 272, -1000, -1000, -1000, 250, 250, 250, 250, 3,
	-1000, -1000, -1000, 125, -1000, -32, -38, 115, 115, -1000,
	-67, -21, 250, -1000, -1000, -40, -72, 146, 86, 250,
	27, 287, 49, 279, 104, -1000, 129, 250, 162, 264,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-85, 55, 25, 272, 21, -1000, 51, -1000, -5, -1000,
	279, 294, 91, 85, 115, -1000, -1000, -1000, 250, -25,
	-1000, 81, -76, 86, 18, -1000, 143, 250, 250, -1000,
	287, 209, -1000, -1000, -1000, -1000, 241, 279, 270, -1000,
	-29, 90, 250, -1000, 137, 44, 300, -1000, 47, 250,
	272, -1000, -1000, -1000, 17, 279, -1000, -1000, 287, 167,
	-8, -1000, -1000, 250, -1000, -1000, -1000, 250, 250, 291,
	-1000, 148, 145, 144, -1000, 18, -1000, -1000, -1000, -1000,
	140, -1000, -1000, 208, 287, 38, -1000, 270, 279, -1000,
	141, 250, -1000, 44, 142, -1000, 143, -1000, 224, -1000,
	-1000, -1000, -1000, 250, 284, -1000, 25, -1000, -1000, 283,
	-1000, -1000, 240, -1000, -1000, -1000, -76, -1000, -1000, -1000,
	-1000, -36, -1000, 31, -1000, 250, -1000, 270, 279, 278,
	-1000, -48, 142, 44, 83, -1000, 250, -87, 250, -1000,
	-1000, -1000, 267, -16, 270, 250, -1000, 240, 83, -1000,
	229, 250, 222, -1000, -76, -1000, -1000, -1000, -1000, -16,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 250, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 394, 16, 13, 18, 393, 392, 3, 391, 15,
	0, 390, 7, 389, 388, 228, 215, 387, 386, 385,
	384, 383, 382, 381, 380, 379, 19, 243, 242, 236,
	235, 20, 14, 10, 378, 377, 17, 4, 5, 6,
	376, 8, 22, 374, 12, 372, 11, 371, 370, 369,
	361, 360, 355, 354, 353, 21, 352, 351, 9, 348,
	2, 23, 347, 346, 344, 343, 342, 341, 340, 336,
	331, 330, 328, 327, 325, 324, 321, 1, 319, 316,
	315, 312, 39, 311, 310, 309,
}

var yyR1 = [...]int8{
	0, 80, 81, 81, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 12, 9, 9, 9,
	9, 10, 10, 11, 11, 26, 26, 26, 5, 5,
	5, 6, 6, 7, 8, 8, 2, 2, 2, 1,
	1, 17, 17, 17, 17, 18, 61, 61, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 22, 22,
	22, 22, 24, 24, 25, 47, 49, 49, 49, 49,
	49, 32, 32, 77, 78, 78, 40, 39, 39, 55,
	55, 33, 33, 34, 34, 41, 35, 35, 37, 37,
	53, 53, 52, 54, 83, 83, 82, 82, 84, 84,
	59, 59, 59, 23, 23, 23, 23, 23, 38, 38,
	38, 48, 64, 64, 64, 63, 63, 65, 65, 19,
	67, 27, 57, 57, 56, 56, 60, 60, 60, 60,
	60, 60, 60, 62, 62, 28, 28, 31, 31, 36,
	42, 42, 43, 43, 46, 46, 46, 85, 85, 45,
	44, 44, 3, 3, 3, 3, 4, 4, 29, 29,
	30, 30, 58, 58, 66, 14, 15, 16, 70, 20,
	71, 72, 72, 72, 76, 76, 73, 69, 68, 50,
	50, 50, 51, 51, 74, 75, 75, 79,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 3, 3, 0,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 4,
	2, 4, 3, 4, 4, 3, 3, 4, 2, 2,
	2, 2, 4, 4, 3, 2, 2, 4, 2, 5,
	4, 3, 1, 2, 1, 3, 4, 2, 1, 7,
	7, 3, 0, 3, 1, 2, 2, 0, 2, 0,
	1, 2, 2, 2, 1, 0, 1, 1, 1, 1,
	2, 3, 0, 2, 2, 2, 2, 6, 3, 2,
	0, 4, 1, 1, 0, 4, 0, 3, 0, 5,
	2, 4, 3, 0, 3, 1, 1, 2, 1, 1,
	2, 2, 1, 3, 0, 6, 5, 1, 2, 2,
	2, 0, 2, 2, 1, 1, 1, 1, 0, 3,
	1, 0, 1, 1, 1, 2, 1, 3, 9, 8,
	5, 4, 1, 3, 2, 3, 3, 2, 6, 3,
	4, 5, 6, 6, 3, 0, 4, 2, 1, 2,
	3, 2, 5, 6, 5, 3, 3, 4,
}

var yyChk = [...]int16{
	-1000, -80, -13, -22, -23, -24, -25, -21, -67, -66,
	-19, -20, -69, -68, -70, -71, -72, -73, -74, -75,
	-47, -50, -79, -51, -48, 31, 30, 99, 100, 32,
	33, 34, 6, 7, 25, 24, 35, 36, 43, 81,
	26, 27, 41, 88, 91, 90, -81, 17, -27, -28,
	-29, -30, 57, 47, 55, 67, -27, -28, -29, -30,
	44, -83, 92, 101, 101, -15, 55, -14, 47, -16,
	57, 67, 103, 62, 44, -15, 55, -15, -17, 4,
	51, 73, 64, -18, 4, -9, 14, 4, 15, 18,
	-15, -15, -15, -15, 28, 28, -49, -16, 57, 89,
	63, 52, 36, 44, -10, 4, 14, 70, 56, -10,
	80, -82, 49, 58, -55, 58, 82, 85, 102, 56,
	70, -61, 39, 82, -10, -10, 104, -10, -82, 56,
	-1, 8, -12, 15, 15, 78, 79, 79, 80, -10,
	-10, 82, -52, 42, -54, 31, 32, 40, 41, 89,
	103, -84, -82, 50, 51, -57, 48, -10, -42, 49,
	-10, 78, 80, 73, -10, -38, 84, 93, -26, 4,
	14, 102, -12, 82, -10, 82, -10, -61, -61, -10,
	-65, 104, -2, 20, -7, -10, -10, -10, -10, -10,
	83, 58, 95, 95, -53, -55, -55, 104, 94, -10,
	-62, 95, 108, -42, -31, -36, -43, 48, 71, -10,
	78, -4, -3, 14, 4, 15, 18, 73, -58, -9,
	-33, 60, 57, -10, 57, 20, 13, -63, 113, 77,
	-5, 110, 10, 9, -2, -6, 110, 11, 77, -76,
	86, -9, -26, 67, 67, -55, -10, 94, 67, -56,
	-60, 105, 106, 107, 109, -31, -38, -36, -44, -45,
	53, -10, -10, -4, 12, 29, 15, -58, 12, -59,
	94, 61, -10, 55, -32, -39, -10, -40, -46, 96,
	97, 98, 4, 77, -8, -7, -2, 21, -9, -4,
	45, 46, 87, -10, -10, -10, 12, 53, 53, 53,
	-38, -85, 54, 29, -3, 79, -9, -58, 64, -34,
	-41, -10, -32, 12, -33, -44, 22, -7, 12, -12,
	-60, -46, 79, -10, -58, 12, -35, 99, -33, -39,
	-37, 63, -78, -77, -10, -64, 111, 112, -7, -11,
	4, 14, -38, -41, -12, -37, 21, -10, 12, 23,
	-60, -38, -77,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 3, 68, 69,
	70, 71, 0, 0, 0, 0, 113, 114, 115, 116,
	0, 0, 104, 0, 0, 58, 0, 60, 0, 57,
	0, 0, 0, 0, 0, 130, 0, 174, 49, 51,
	52, 53, 54, 0, 55, 187, 27, 28, 29, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 0, 189,
	0, 191, 0, 0, 133, 31, 32, 151, 0, 0,
	0, 0, 106, 107, 120, 0, 0, 0, 74, 0,
	0, 62, 56, 57, 177, 57, 65, 66, 0, 0,
	128, 0, 179, 26, 30, 0, 0, 0, 0, 0,
	195, 196, 76, 0, 78, 0, 0, 0, 0, 190,
	0, 0, 0, 108, 109, 144, 0, 151, 0, 0,
	0, 0, 0, 0, 92, 121, 0, 0, 0, 35,
	36, 72, 73, 59, 176, 61, 175, 63, 64, 67,
	126, 0, 50, 0, 0, 43, 0, 180, 185, 186,
	0, 0, 0, 0, 102, 100, 103, 197, 0, 0,
	131, 0, 0, 0, 120, 147, 161, 0, 0, 150,
	0, 0, 166, 162, 163, 164, 0, 0, 171, 172,
	112, 0, 0, 119, 0, 0, 0, 129, 0, 0,
	0, 38, 39, 40, 0, 0, 41, 42, 0, 181,
	0, 194, 77, 0, 80, 101, 192, 0, 0, 132,
	135, 136, 138, 139, 142, 120, 146, 148, 149, 160,
	158, 152, 153, 0, 0, 0, 165, 170, 0, 117,
	0, 0, 118, 0, 92, 82, 161, 88, 0, 154,
	155, 156, 37, 0, 127, 45, 48, 46, 47, 178,
	182, 183, 0, 79, 193, 143, 0, 137, 140, 141,
	145, 0, 157, 0, 167, 0, 173, 110, 0, 91,
	94, 97, 92, 0, 99, 87, 0, 124, 0, 184,
	134, 159, 0, 120, 111, 0, 95, 0, 99, 81,
	0, 0, 0, 84, 0, 125, 122, 123, 44, 120,
	33, 34, 169, 93, 96, 89, 90, 98, 0, 86,
	83, 168, 85,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:283
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:284
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:289
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:293
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:297
		{
			setParseTree(yylex, yyDollar[1].trace)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:301
		{
			setParseTree(yylex, yyDollar[1].stoptrace)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:305
		{
			setParseTree(yylex, yyDollar[1].drop)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:309
		{
			setParseTree(yylex, yyDollar[1].lock)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:313
		{
			setParseTree(yylex, yyDollar[1].unlock)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:317
		{
			setParseTree(yylex, yyDollar[1].show)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:321
		{
			setParseTree(yylex, yyDollar[1].kill)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:325
		{
			setParseTree(yylex, yyDollar[1].listen)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:329
		{
			setParseTree(yylex, yyDollar[1].shutdown)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:333
		{
			setParseTree(yylex, yyDollar[1].split)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:337
		{
			setParseTree(yylex, yyDollar[1].move)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:341
		{
			setParseTree(yylex, yyDollar[1].redistribute)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:345
		{
			setParseTree(yylex, yyDollar[1].unite)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:349
		{
			setParseTree(yylex, yyDollar[1].register_router)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:353
		{
			setParseTree(yylex, yyDollar[1].unregister_router)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:357
		{
			setParseTree(yylex, yyDollar[1].alter)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:361
		{
			setParseTree(yylex, yyDollar[1].invalidate)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:365
		{
			setParseTree(yylex, yyDollar[1].retryMoveTaskGroup)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:369
		{
			setParseTree(yylex, yyDollar[1].sync_reference_tables)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:373
		{
			setParseTree(yylex, yyDollar[1].alter)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:378
		{
			yyVAL.uinteger = uint(yyDollar[1].uinteger)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:383
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:387
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:389
		{
			if yyDollar[1].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(yyDollar[1].uinteger))
				yyVAL.str = string(buf)
			}
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:398
		{
			if yyDollar[2].uinteger > uint(-math.MinInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(-yyDollar[2].uinteger))
				yyVAL.str = string(buf)
			}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:410
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:413
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:419
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:422
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:428
		{
			yyVAL.qname = &rfqn.RelationFQN{RelationName: yyDollar[1].str}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:432
		{
			yyVAL.qname = &rfqn.RelationFQN{RelationName: yyDollar[1].str}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:436
		{
			yyVAL.qname = &rfqn.RelationFQN{RelationName: yyDollar[3].str, SchemaName: yyDollar[1].str}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:442
		{
			yyVAL.str = yyDollar[1].str
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:444
		{
			yyVAL.str = "AND"
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:446
		{
			yyVAL.str = "OR"
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:451
		{
			yyVAL.str = yyDollar[1].str
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:453
		{
			yyVAL.str = "="
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:459
		{
			yyVAL.colref = ColumnRef{
				ColName: yyDollar[1].str,
			}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:467
		{
			yyVAL.colreflist = append(yyDollar[1].colreflist, yyDollar[3].colref)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:469
		{
			yyVAL.colreflist = []ColumnRef{
				yyDollar[1].colref,
			}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:477
		{
			yyVAL.where = yyDollar[2].where
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:480
		{
			yyVAL.where = WhereClauseLeaf{
				ColRef: yyDollar[1].colref,
				Op:     yyDollar[2].str,
				Value:  yyDollar[3].str,
			}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:488
		{
			yyVAL.where = WhereClauseOp{
				Op:    yyDollar[2].str,
				Left:  yyDollar[1].where,
				Right: yyDollar[3].where,
			}
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:498
		{
			yyVAL.where = WhereClauseEmpty{}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:502
		{
			yyVAL.where = yyDollar[2].where
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:509
		{
			switch v := strings.ToLower(string(yyDollar[1].str)); v {
			case DatabasesStr, RoutersStr, PoolsStr, InstanceStr, ShardsStr, BackendConnectionsStr, KeyRangesStr, ShardingRules, ClientsStr, StatusStr, DistributionsStr, CoordinatorAddrStr, VersionStr, ReferenceRelationsStr, TaskGroupStr, PreparedStatementsStr, QuantilesStr, SequencesStr, IsReadOnlyStr, MoveStatsStr, TsaCacheStr, Users:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:516
		{
			yyVAL.str = yyDollar[1].str
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:518
		{
			yyVAL.str = yyDollar[1].str
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:520
		{
			yyVAL.str = yyDollar[1].str
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:526
		{
			switch v := string(yyDollar[1].str); v {
			case ClientStr, BackendStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:536
		{
			yyVAL.bool = true
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:536
		{
			yyVAL.bool = false
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:540
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].key_range_selector}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:544
		{
			yyVAL.drop = &Drop{Element: &KeyRangeSelector{KeyRangeID: `*`}}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:548
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].sharding_rule_selector}
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:552
		{
			yyVAL.drop = &Drop{Element: &ShardingRuleSelector{ID: `*`}}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:556
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].distribution_selector, CascadeDelete: yyDollar[3].bool}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:560
		{
			yyVAL.drop = &Drop{Element: &DistributionSelector{ID: `*`}, CascadeDelete: yyDollar[4].bool}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:564
		{
			yyVAL.drop = &Drop{Element: &ShardSelector{ID: yyDollar[3].str}, CascadeDelete: yyDollar[4].bool}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:568
		{
			yyVAL.drop = &Drop{Element: &TaskGroupSelector{}}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:572
		{
			yyVAL.drop = &Drop{Element: &SequenceSelector{Name: yyDollar[3].str}}
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:576
		{
			yyVAL.drop = &Drop{
				Element: &ReferenceRelationSelector{
					ID: yyDollar[4].str,
				},
			}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:587
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:592
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:597
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:601
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:607
		{
			yyVAL.trace = &TraceStmt{All: true}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:610
		{
			yyVAL.trace = &TraceStmt{
				Client: yyDollar[4].uinteger,
			}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:618
		{
			yyVAL.stoptrace = &StopTraceStmt{}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:624
		{
			yyVAL.alter = &Alter{Element: yyDollar[2].alter_distribution}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:630
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AttachRelation{
					Distribution: yyDollar[1].distribution_selector,
					Relations:    yyDollar[2].relations,
				},
			}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:639
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &DetachRelation{
					Distribution: yyDollar[1].distribution_selector,
					RelationName: yyDollar[4].qname,
				},
			}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:648
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AlterRelation{
					Distribution: yyDollar[1].distribution_selector,
					Relation:     yyDollar[2].distributed_relation,
				},
			}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:657
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AlterDefaultShard{
					Distribution: yyDollar[1].distribution_selector,
					Shard:        yyDollar[5].str,
				},
			}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:666
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &DropDefaultShard{Distribution: yyDollar[1].distribution_selector},
			}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:675
		{
			yyVAL.dEntrieslist = append(yyDollar[1].dEntrieslist, yyDollar[3].distrKeyEntry)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:677
		{
			yyVAL.dEntrieslist = []DistributionKeyEntry{
				yyDollar[1].distrKeyEntry,
			}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:684
		{
			yyVAL.typedColRef = TypedColRef{
				Column: yyDollar[1].str,
				Type:   yyDollar[2].str,
			}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:693
		{
			yyVAL.routingExpr = []TypedColRef{yyDollar[1].typedColRef}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:695
		{
			yyVAL.routingExpr = append(yyDollar[1].routingExpr, yyDollar[3].typedColRef)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:700
		{
			yyVAL.distrKeyEntry = DistributionKeyEntry{
				HashFunction: yyDollar[1].str,
				Expr:         yyDollar[3].routingExpr,
			}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:709
		{
			yyVAL.distrKeyEntry = DistributionKeyEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:714
		{
			yyVAL.distrKeyEntry = yyDollar[1].distrKeyEntry
		}
	case 89:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:720
		{
			if len(yyDollar[2].qname.SchemaName) > 0 && len(yyDollar[7].str) > 0 {
				yylex.Error("it is forbidden to use both a qualified relation name and the keyword SCHEMA")
				return 1
			} else if len(yyDollar[2].qname.SchemaName) > 0 {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.RelationName,
					DistributionKey:      yyDollar[5].dEntrieslist,
					AutoIncrementEntries: yyDollar[6].aiEntrieslist,
					SchemaName:           yyDollar[2].qname.SchemaName,
				}
			} else {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.RelationName,
					DistributionKey:      yyDollar[5].dEntrieslist,
					AutoIncrementEntries: yyDollar[6].aiEntrieslist,
					SchemaName:           yyDollar[7].str,
				}
			}
		}
	case 90:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:741
		{
			if len(yyDollar[2].qname.SchemaName) > 0 && len(yyDollar[7].str) > 0 {
				yylex.Error("it is forbidden to use both a qualified relation name and the keyword SCHEMA")
				return 1
			} else if len(yyDollar[2].qname.SchemaName) > 0 {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.RelationName,
					DistributionKey:      yyDollar[4].dEntrieslist,
					AutoIncrementEntries: yyDollar[5].aiEntrieslist,
					SchemaName:           yyDollar[2].qname.SchemaName,
				}
			} else {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.RelationName,
					DistributionKey:      yyDollar[4].dEntrieslist,
					AutoIncrementEntries: yyDollar[5].aiEntrieslist,
					SchemaName:           yyDollar[6].str,
				}
			}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:763
		{
			yyVAL.aiEntrieslist = yyDollar[3].aiEntrieslist
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:765
		{
			yyVAL.aiEntrieslist = nil
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:771
		{
			yyVAL.aiEntrieslist = append(yyDollar[1].aiEntrieslist, yyDollar[3].aiEntry)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:773
		{
			yyVAL.aiEntrieslist = []*AutoIncrementEntry{
				yyDollar[1].aiEntry,
			}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:781
		{
			yyVAL.aiEntry = &AutoIncrementEntry{
				Column: yyDollar[1].str,
				Start:  uint64(yyDollar[2].uinteger),
			}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:790
		{
			yyVAL.uinteger = yyDollar[2].uinteger
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:792
		{
			yyVAL.uinteger = 0
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:797
		{
			yyVAL.str = yyDollar[2].str
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:799
		{
			yyVAL.str = ""
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:804
		{
			yyVAL.relations = []*DistributedRelation{yyDollar[1].distributed_relation}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:806
		{
			yyVAL.relations = append(yyDollar[1].relations, yyDollar[2].distributed_relation)
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:811
		{
			yyVAL.relations = yyDollar[2].relations
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:816
		{
			yyVAL.distributed_relation = yyDollar[2].distributed_relation
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:821
		{
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:824
		{
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:824
		{
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:827
		{
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:827
		{
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:831
		{
			yyVAL.strlist = yyDollar[2].strlist
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:832
		{
			yyVAL.strlist = yyDollar[3].strlist
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:832
		{
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:836
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:841
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:846
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:851
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:856
		{
			yyVAL.create = &Create{
				Element: &ReferenceRelationDefinition{
					TableName:            yyDollar[4].str,
					AutoIncrementEntries: yyDollar[5].aiEntrieslist,
					ShardIds:             yyDollar[6].strlist,
				},
			}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:867
		{
			yyVAL.distribution_selector = &DistributionSelector{ID: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:870
		{
			yyVAL.distribution_selector = &DistributionSelector{ID: yyDollar[2].str}
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:872
		{
			yyVAL.distribution_selector = &DistributionSelector{ID: "default"}
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:878
		{
			yyVAL.alter = &Alter{
				Element: &AlterDistribution{
					Element: &AttachRelation{
						Distribution: yyDollar[4].distribution_selector,
						Relations:    []*DistributedRelation{yyDollar[3].distributed_relation},
					},
				},
			}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:890
		{
			yyVAL.opt_asc_desc = &SortByAsc{}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:891
		{
			yyVAL.opt_asc_desc = &SortByDesc{}
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:892
		{
			yyVAL.opt_asc_desc = &SortByDefault{}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:896
		{
			yyVAL.order_clause = &Order{Col: yyDollar[3].colref, OptAscDesc: yyDollar[4].opt_asc_desc}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:899
		{
			yyVAL.order_clause = OrderClause(nil)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:904
		{
			yyVAL.group_clause = GroupBy{Col: yyDollar[3].colreflist}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:907
		{
			yyVAL.group_clause = GroupByClauseEmpty{}
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:912
		{
			yyVAL.show = &Show{Cmd: yyDollar[2].str, Where: yyDollar[3].where, GroupBy: yyDollar[4].group_clause, Order: yyDollar[5].order_clause}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:918
		{
			yyVAL.lock = &Lock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:926
		{
			yyVAL.ds = &DistributionDefinition{
				ID:           yyDollar[2].str,
				ColTypes:     yyDollar[3].strlist,
				DefaultShard: yyDollar[4].str,
			}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:935
		{
			yyVAL.strlist = yyDollar[3].strlist
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:937
		{
			/* empty column types should be prohibited */
			yyVAL.strlist = nil
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:943
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:945
		{
			yyVAL.strlist = []string{
				yyDollar[1].str,
			}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:952
		{
			yyVAL.str = qdb.ColumnTypeVarchar
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:954
		{
			yyVAL.str = qdb.ColumnTypeVarcharHashed
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:956
		{
			yyVAL.str = qdb.ColumnTypeInteger
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:958
		{
			yyVAL.str = qdb.ColumnTypeInteger
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:960
		{
			yyVAL.str = qdb.ColumnTypeUinteger
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:962
		{
			yyVAL.str = qdb.ColumnTypeUinteger
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:964
		{
			yyVAL.str = qdb.ColumnTypeUUID
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:969
		{
			yyVAL.str = yyDollar[3].str
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:971
		{
			yyVAL.str = ""
		}
	case 145:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:977
		{
		}
	case 146:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:981
		{
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:985
		{
			yyVAL.entrieslist = make([]ShardingRuleEntry, 0)
			yyVAL.entrieslist = append(yyVAL.entrieslist, yyDollar[1].shruleEntry)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:991
		{
			yyVAL.entrieslist = append(yyDollar[1].entrieslist, yyDollar[2].shruleEntry)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:997
		{
			yyVAL.shruleEntry = ShardingRuleEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1006
		{
			yyVAL.str = yyDollar[2].str
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:1009
		{
			yyVAL.str = ""
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1013
		{
			yyVAL.str = yyDollar[2].str
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1018
		{
			yyVAL.str = yyDollar[2].str
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1024
		{
			yyVAL.str = "identity"
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1026
		{
			yyVAL.str = "murmur"
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1028
		{
			yyVAL.str = "city"
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1033
		{
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:1033
		{
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1037
		{
			yyVAL.str = yyDollar[3].str
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1042
		{
			yyVAL.str = yyDollar[1].str
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:1044
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1050
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1054
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1056
		{
			if yyDollar[1].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(yyDollar[1].uinteger))
				yyVAL.bytes = buf
			}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1065
		{
			if yyDollar[2].uinteger > uint(-math.MinInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(-yyDollar[2].uinteger))
				yyVAL.bytes = buf
			}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1077
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: [][]byte{
					yyDollar[1].bytes,
				},
			}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1084
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: append(yyDollar[1].krbound.Pivots, yyDollar[3].bytes),
			}
		}
	case 168:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:1093
		{
			yyVAL.kr = &KeyRangeDefinition{
				KeyRangeID:   yyDollar[3].str,
				LowerBound:   yyDollar[5].krbound,
				ShardID:      yyDollar[8].str,
				Distribution: yyDollar[9].distribution_selector,
			}
		}
	case 169:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:1102
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.kr = &KeyRangeDefinition{
				LowerBound:   yyDollar[4].krbound,
				ShardID:      yyDollar[7].str,
				Distribution: yyDollar[8].distribution_selector,
				KeyRangeID:   "kr" + str,
			}
		}
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1117
		{
			yyVAL.shard = &ShardDefinition{Id: yyDollar[2].str, Hosts: yyDollar[5].strlist}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1122
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.shard = &ShardDefinition{Id: "shard" + str, Hosts: yyDollar[4].strlist}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1132
		{
			yyVAL.strlist = []string{yyDollar[1].str}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1137
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1143
		{
			yyVAL.unlock = &Unlock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1149
		{
			yyVAL.sharding_rule_selector = &ShardingRuleSelector{ID: yyDollar[3].str}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1155
		{
			yyVAL.key_range_selector = &KeyRangeSelector{KeyRangeID: yyDollar[3].str}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1161
		{
			yyVAL.distribution_selector = &DistributionSelector{ID: yyDollar[2].str}
		}
	case 178:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1167
		{
			yyVAL.split = &SplitKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeFromID: yyDollar[4].str, Border: yyDollar[6].krbound}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1173
		{
			yyVAL.kill = &Kill{Cmd: yyDollar[2].str, Target: yyDollar[3].uinteger}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1179
		{
			yyVAL.move = &MoveKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str}
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1185
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].integer, Check: true, Apply: true}
		}
	case 182:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1187
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].integer, Check: true}
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1189
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].integer, Apply: true}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1193
		{
			yyVAL.integer = int(yyDollar[3].uinteger)
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:1194
		{
			yyVAL.integer = -1
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1198
		{
			yyVAL.unite = &UniteKeyRange{KeyRangeIDL: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeIDR: yyDollar[4].str}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1204
		{
			yyVAL.listen = &Listen{addr: yyDollar[2].str}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1210
		{
			yyVAL.shutdown = &Shutdown{}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1216
		{
			yyVAL.invalidate = &Invalidate{
				Target: SchemaCacheInvalidateTarget,
			}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1221
		{
			yyVAL.invalidate = &Invalidate{
				Target: SchemaCacheInvalidateTarget,
			}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1226
		{
			yyVAL.invalidate = &Invalidate{
				Target: BackendConnectionsInvalidateTarget,
			}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1234
		{
			yyVAL.sync_reference_tables = &SyncReferenceTables{
				ShardID:          yyDollar[5].str,
				RelationSelector: "*",
			}
		}
	case 193:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1240
		{
			yyVAL.sync_reference_tables = &SyncReferenceTables{
				ShardID:          yyDollar[6].str,
				RelationSelector: yyDollar[4].str,
			}
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1251
		{
			yyVAL.register_router = &RegisterRouter{ID: yyDollar[3].str, Addr: yyDollar[5].str}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1257
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: yyDollar[3].str}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1262
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: `*`}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1270
		{
			yyVAL.retryMoveTaskGroup = &RetryMoveTaskGroup{}
		}
	}
	goto yystack /* stack new state and value */
}
