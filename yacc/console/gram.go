// Code generated by goyacc -o gram.go -p yy gram.y. DO NOT EDIT.

//line gram.y:3
package spqrparser

import __yyfmt__ "fmt"

//line gram.y:3

import (
	"crypto/rand"
	"encoding/binary"
	"encoding/hex"
	"strconv"
	"strings"
)

func randomHex(n int) (string, error) {
	bytes := make([]byte, n)
	if _, err := rand.Read(bytes); err != nil {
		return "", err
	}
	return hex.EncodeToString(bytes), nil
}

//line gram.y:25
type yySymType struct {
	yys      int
	str      string
	strlist  []string
	byte     byte
	bytes    []byte
	integer  int
	uinteger uint
	bool     bool
	empty    struct{}

	set       *Set
	statement Statement
	show      *Show

	drop   *Drop
	create *Create

	kill   *Kill
	lock   *Lock
	unlock *Unlock

	krbound *KeyRangeBound

	ds            *DistributionDefinition
	kr            *KeyRangeDefinition
	shard         *ShardDefinition
	sharding_rule *ShardingRuleDefinition

	register_router   *RegisterRouter
	unregister_router *UnregisterRouter

	split *SplitKeyRange
	move  *MoveKeyRange
	unite *UniteKeyRange

	redistribute *RedistributeKeyRange

	invalidate_cache *InvalidateCache

	shutdown *Shutdown
	listen   *Listen

	trace     *TraceStmt
	stoptrace *StopTraceStmt

	distribution *DistributionDefinition

	alter                *Alter
	alter_distribution   *AlterDistribution
	distributed_relation *DistributedRelation

	relations    []*DistributedRelation
	entrieslist  []ShardingRuleEntry
	dEntrieslist []DistributionKeyEntry

	shruleEntry ShardingRuleEntry

	distrKeyEntry DistributionKeyEntry

	sharding_rule_selector *ShardingRuleSelector
	key_range_selector     *KeyRangeSelector
	distribution_selector  *DistributionSelector

	colref ColumnRef
	where  WhereClauseNode

	order_clause OrderClause
	opt_asc_desc OptAscDesc

	group_clause GroupByClause

	opt_batch_size int
}

const IDENT = 57346
const COMMAND = 57347
const SHOW = 57348
const KILL = 57349
const WHERE = 57350
const OR = 57351
const AND = 57352
const TEQ = 57353
const TCOMMA = 57354
const SCONST = 57355
const ICONST = 57356
const TSEMICOLON = 57357
const TOPENBR = 57358
const TCLOSEBR = 57359
const SHUTDOWN = 57360
const LISTEN = 57361
const REGISTER = 57362
const UNREGISTER = 57363
const ROUTER = 57364
const ROUTE = 57365
const CREATE = 57366
const ADD = 57367
const DROP = 57368
const LOCK = 57369
const UNLOCK = 57370
const SPLIT = 57371
const MOVE = 57372
const COMPOSE = 57373
const SET = 57374
const CASCADE = 57375
const ATTACH = 57376
const ALTER = 57377
const DETACH = 57378
const REDISTRIBUTE = 57379
const REFERENCE = 57380
const CHECK = 57381
const APPLY = 57382
const SHARDING = 57383
const COLUMN = 57384
const TABLE = 57385
const HASH = 57386
const FUNCTION = 57387
const KEY = 57388
const RANGE = 57389
const DISTRIBUTION = 57390
const RELATION = 57391
const REPLICATED = 57392
const SHARDS = 57393
const KEY_RANGES = 57394
const ROUTERS = 57395
const SHARD = 57396
const HOST = 57397
const SHARDING_RULES = 57398
const RULE = 57399
const COLUMNS = 57400
const VERSION = 57401
const HOSTS = 57402
const BY = 57403
const FROM = 57404
const TO = 57405
const WITH = 57406
const UNITE = 57407
const ALL = 57408
const ADDRESS = 57409
const FOR = 57410
const CLIENT = 57411
const BATCH = 57412
const SIZE = 57413
const INVALIDATE = 57414
const CACHE = 57415
const IDENTITY = 57416
const MURMUR = 57417
const CITY = 57418
const START = 57419
const STOP = 57420
const TRACE = 57421
const MESSAGES = 57422
const TASK = 57423
const GROUP = 57424
const VARCHAR = 57425
const INTEGER = 57426
const INT = 57427
const TYPES = 57428
const OP = 57429
const ASC = 57430
const DESC = 57431
const ORDER = 57432

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"COMMAND",
	"SHOW",
	"KILL",
	"WHERE",
	"OR",
	"AND",
	"TEQ",
	"TCOMMA",
	"SCONST",
	"ICONST",
	"TSEMICOLON",
	"TOPENBR",
	"TCLOSEBR",
	"SHUTDOWN",
	"LISTEN",
	"REGISTER",
	"UNREGISTER",
	"ROUTER",
	"ROUTE",
	"CREATE",
	"ADD",
	"DROP",
	"LOCK",
	"UNLOCK",
	"SPLIT",
	"MOVE",
	"COMPOSE",
	"SET",
	"CASCADE",
	"ATTACH",
	"ALTER",
	"DETACH",
	"REDISTRIBUTE",
	"REFERENCE",
	"CHECK",
	"APPLY",
	"SHARDING",
	"COLUMN",
	"TABLE",
	"HASH",
	"FUNCTION",
	"KEY",
	"RANGE",
	"DISTRIBUTION",
	"RELATION",
	"REPLICATED",
	"SHARDS",
	"KEY_RANGES",
	"ROUTERS",
	"SHARD",
	"HOST",
	"SHARDING_RULES",
	"RULE",
	"COLUMNS",
	"VERSION",
	"HOSTS",
	"BY",
	"FROM",
	"TO",
	"WITH",
	"UNITE",
	"ALL",
	"ADDRESS",
	"FOR",
	"CLIENT",
	"BATCH",
	"SIZE",
	"INVALIDATE",
	"CACHE",
	"IDENTITY",
	"MURMUR",
	"CITY",
	"START",
	"STOP",
	"TRACE",
	"MESSAGES",
	"TASK",
	"GROUP",
	"VARCHAR",
	"INTEGER",
	"INT",
	"TYPES",
	"OP",
	"ASC",
	"DESC",
	"ORDER",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:945

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 318

var yyAct = [...]uint8{
	148, 199, 247, 169, 202, 170, 194, 147, 168, 161,
	167, 173, 145, 160, 129, 156, 103, 244, 245, 158,
	176, 195, 196, 197, 62, 144, 108, 136, 100, 60,
	58, 64, 57, 67, 89, 76, 219, 65, 238, 239,
	240, 163, 188, 98, 75, 153, 99, 201, 90, 133,
	91, 91, 95, 91, 91, 119, 241, 164, 230, 118,
	117, 91, 166, 116, 66, 106, 107, 201, 91, 211,
	186, 177, 172, 134, 163, 102, 93, 157, 154, 113,
	115, 88, 226, 67, 220, 120, 121, 109, 110, 106,
	164, 92, 101, 227, 128, 131, 91, 234, 135, 94,
	69, 49, 139, 141, 130, 137, 50, 203, 47, 74,
	48, 139, 140, 138, 51, 122, 105, 149, 150, 151,
	152, 96, 142, 224, 56, 223, 132, 49, 222, 63,
	97, 165, 50, 127, 47, 130, 48, 125, 174, 124,
	51, 217, 218, 159, 104, 207, 59, 85, 46, 207,
	84, 91, 251, 42, 45, 190, 228, 189, 192, 182,
	208, 207, 44, 146, 204, 205, 43, 114, 210, 87,
	200, 191, 55, 198, 68, 70, 174, 206, 54, 221,
	80, 81, 82, 83, 209, 212, 53, 215, 179, 78,
	52, 213, 91, 181, 180, 78, 184, 216, 77, 79,
	225, 214, 112, 185, 77, 171, 179, 72, 200, 41,
	1, 181, 180, 187, 231, 19, 229, 18, 17, 232,
	16, 15, 14, 12, 13, 233, 8, 236, 235, 9,
	143, 242, 243, 175, 126, 248, 193, 155, 123, 21,
	86, 20, 249, 237, 250, 29, 30, 162, 246, 6,
	5, 253, 248, 252, 254, 4, 3, 32, 31, 37,
	38, 7, 11, 23, 22, 26, 27, 28, 33, 34,
	10, 73, 71, 61, 39, 2, 35, 183, 178, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 0, 0, 0, 0, 0,
	0, 40, 0, 0, 0, 0, 24, 25,
}

var yyPact = [...]int16{
	239, -1000, 138, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 60, 86, -47, -49, -17, 54, 54, 203,
	40, 185, -1000, 54, 54, 54, 54, 128, 125, 33,
	-39, -1000, -1000, -1000, -1000, -1000, -1000, 188, 43, 19,
	52, 57, -1000, -1000, -1000, -1000, 87, -23, -52, -1000,
	45, -1000, 18, 111, 50, 188, -56, 39, -1000, 41,
	-1000, 194, -1000, 153, 153, -1000, -1000, -1000, -1000, -1000,
	1, -3, -4, -9, 188, 49, -1000, 103, 188, -1000,
	91, -1000, -1000, 92, 64, -15, 13, 188, -53, 153,
	-1000, 47, 46, -1000, -1000, 111, -1000, -1000, -1000, -1000,
	188, -57, 147, -1000, -1000, -1000, 188, 188, 188, 188,
	-22, -1000, -1000, -1000, 29, 28, -1000, -67, 61, 32,
	188, 0, 191, 12, 185, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -70, 10, 202, 147, 192, -1000, 9,
	-1000, -28, -1000, 185, 188, 28, -1000, 188, -62, 32,
	-1, -1000, 63, 188, 188, -1000, 191, 137, -1000, -1000,
	-1000, -1000, 185, 156, -1000, -1000, 8, 188, 147, -1000,
	-1000, -1000, 184, 185, -1000, -1000, 191, 102, -35, -1000,
	-1000, -1000, 36, 167, -1000, 84, 81, 79, -1, -1000,
	-1000, 34, -1000, 48, -1000, -1000, 133, 191, -5, 156,
	185, 188, -1000, 202, -1000, -1000, 149, -1000, -1000, 153,
	51, -62, -1000, -1000, -1000, -1000, 188, -36, -7, -1000,
	188, -1000, -71, -1000, 188, -1000, -1000, -1000, -1000, -1000,
	-1000, 188, -21, -1000, -1000, -1000, 140, -1000, 63, -21,
	-1000, 188, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 279, 12, 8, 10, 278, 277, 7, 3, 0,
	5, 275, 273, 146, 129, 272, 271, 270, 262, 261,
	256, 255, 250, 249, 166, 162, 154, 148, 13, 248,
	9, 2, 14, 247, 4, 243, 1, 241, 240, 239,
	238, 237, 15, 236, 234, 11, 6, 16, 233, 232,
	230, 229, 226, 224, 223, 222, 221, 220, 218, 217,
	215, 213, 210, 209,
}

var yyR1 = [...]int8{
	0, 62, 63, 63, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 10, 8, 8, 8, 9, 5, 5,
	5, 6, 6, 7, 2, 2, 2, 1, 1, 15,
	16, 47, 47, 19, 19, 19, 19, 19, 19, 19,
	19, 20, 20, 20, 20, 22, 22, 23, 37, 38,
	38, 29, 29, 31, 42, 42, 41, 41, 40, 21,
	21, 21, 21, 21, 49, 49, 49, 48, 48, 50,
	50, 17, 52, 24, 24, 44, 44, 43, 43, 46,
	46, 46, 46, 46, 46, 25, 25, 28, 28, 30,
	32, 32, 33, 33, 35, 35, 35, 34, 34, 36,
	36, 3, 3, 4, 4, 26, 26, 27, 27, 45,
	45, 51, 12, 13, 14, 14, 55, 18, 18, 56,
	57, 57, 57, 61, 61, 58, 54, 53, 39, 59,
	60, 60,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 0, 2, 1,
	1, 1, 0, 2, 4, 2, 4, 3, 4, 3,
	3, 2, 2, 2, 2, 4, 4, 3, 2, 2,
	4, 3, 1, 2, 5, 2, 1, 2, 2, 2,
	2, 2, 2, 4, 1, 1, 0, 4, 0, 3,
	0, 5, 2, 3, 2, 3, 0, 3, 1, 1,
	2, 1, 1, 2, 2, 6, 5, 1, 2, 2,
	2, 0, 2, 2, 1, 1, 1, 3, 0, 3,
	0, 1, 1, 1, 3, 9, 8, 5, 4, 1,
	3, 2, 3, 3, 2, 2, 6, 3, 3, 4,
	5, 6, 6, 3, 0, 4, 2, 1, 2, 5,
	3, 3,
}

var yyChk = [...]int16{
	-1000, -62, -11, -20, -21, -22, -23, -19, -52, -51,
	-17, -18, -54, -53, -55, -56, -57, -58, -59, -60,
	-37, -39, 25, 24, 77, 78, 26, 27, 28, 6,
	7, 19, 18, 29, 30, 37, 65, 20, 21, 35,
	72, -63, 15, -24, -25, -26, -27, 48, 50, 41,
	46, 54, -24, -25, -26, -27, 38, 79, 79, -13,
	46, -12, 41, -14, 48, 54, 81, 50, -13, 46,
	-13, -15, 4, -16, 69, 4, -8, 13, 4, 14,
	-13, -13, -13, -13, 22, 22, -38, -14, 48, 73,
	-9, 4, 48, 57, 47, -9, 64, 43, 66, 69,
	80, 47, 57, -47, 33, 66, -9, -9, 82, 48,
	47, -1, 8, -10, 14, -10, 62, 63, 63, 64,
	-9, -9, 66, -40, 36, 34, -44, 42, -9, -32,
	43, -9, 62, 64, 60, -9, 80, -10, 66, -9,
	66, -9, -47, -50, 82, -2, 16, -7, -9, -9,
	-9, -9, -9, 67, 49, -41, -42, 49, 86, -32,
	-28, -30, -33, 42, 58, -9, 62, -4, -3, -8,
	-10, 14, 60, -45, -8, -48, 90, 61, -5, 4,
	10, 9, -2, -6, 4, 11, 61, -61, 70, -8,
	-9, -42, -9, -43, -46, 83, 84, 85, -28, -36,
	-30, 68, -34, 44, -9, -9, -4, 12, 23, -45,
	12, 61, -7, -2, 17, -8, -4, 39, 40, 71,
	48, 12, 44, 44, 44, -36, 48, 45, 23, -3,
	63, -8, -7, -10, 46, -46, -9, -35, 74, 75,
	76, 63, -9, -49, 88, 89, -29, -31, -9, -9,
	-36, 12, -34, -36, -31,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 3, 51, 52, 53, 54, 0, 0, 0,
	0, 0, 69, 70, 71, 72, 0, 0, 0, 43,
	0, 45, 0, 42, 0, 0, 0, 0, 82, 0,
	121, 37, 39, 0, 0, 40, 136, 24, 25, 26,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 138,
	86, 27, 84, 101, 0, 0, 0, 0, 0, 0,
	57, 0, 0, 47, 41, 42, 124, 49, 50, 125,
	0, 80, 0, 127, 23, 128, 0, 0, 0, 0,
	0, 140, 141, 59, 0, 0, 83, 0, 101, 0,
	0, 0, 0, 0, 0, 73, 55, 56, 44, 123,
	46, 122, 48, 78, 0, 38, 0, 0, 33, 0,
	129, 134, 135, 0, 0, 68, 66, 0, 0, 0,
	110, 97, 108, 0, 0, 100, 0, 0, 113, 111,
	112, 23, 0, 118, 119, 81, 0, 0, 0, 28,
	29, 30, 0, 0, 31, 32, 0, 130, 0, 139,
	60, 67, 65, 85, 88, 89, 91, 92, 110, 96,
	98, 0, 99, 0, 102, 103, 0, 0, 0, 117,
	0, 0, 79, 36, 34, 35, 126, 131, 132, 0,
	0, 0, 90, 93, 94, 95, 0, 0, 0, 114,
	0, 120, 76, 133, 0, 87, 109, 107, 104, 105,
	106, 0, 110, 77, 74, 75, 64, 62, 108, 110,
	116, 0, 63, 115, 61,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:243
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:244
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:249
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:253
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:257
		{
			setParseTree(yylex, yyDollar[1].trace)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:261
		{
			setParseTree(yylex, yyDollar[1].stoptrace)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:265
		{
			setParseTree(yylex, yyDollar[1].drop)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:269
		{
			setParseTree(yylex, yyDollar[1].lock)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:273
		{
			setParseTree(yylex, yyDollar[1].unlock)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:277
		{
			setParseTree(yylex, yyDollar[1].show)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:281
		{
			setParseTree(yylex, yyDollar[1].kill)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:285
		{
			setParseTree(yylex, yyDollar[1].listen)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:289
		{
			setParseTree(yylex, yyDollar[1].shutdown)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:293
		{
			setParseTree(yylex, yyDollar[1].split)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:297
		{
			setParseTree(yylex, yyDollar[1].move)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:301
		{
			setParseTree(yylex, yyDollar[1].redistribute)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:305
		{
			setParseTree(yylex, yyDollar[1].unite)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:309
		{
			setParseTree(yylex, yyDollar[1].register_router)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:313
		{
			setParseTree(yylex, yyDollar[1].unregister_router)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:317
		{
			setParseTree(yylex, yyDollar[1].alter)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:321
		{
			setParseTree(yylex, yyDollar[1].invalidate_cache)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:326
		{
			yyVAL.uinteger = uint(yyDollar[1].uinteger)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:331
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:335
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:337
		{
			yyVAL.str = strconv.Itoa(int(yyDollar[1].uinteger))
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:342
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:348
		{
			yyVAL.str = yyDollar[1].str
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:350
		{
			yyVAL.str = "AND"
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:352
		{
			yyVAL.str = "OR"
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:357
		{
			yyVAL.str = yyDollar[1].str
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:359
		{
			yyVAL.str = "="
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:365
		{
			yyVAL.colref = ColumnRef{
				ColName: yyDollar[1].str,
			}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:373
		{
			yyVAL.where = yyDollar[2].where
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:376
		{
			yyVAL.where = WhereClauseLeaf{
				ColRef: yyDollar[1].colref,
				Op:     yyDollar[2].str,
				Value:  yyDollar[3].str,
			}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:384
		{
			yyVAL.where = WhereClauseOp{
				Op:    yyDollar[2].str,
				Left:  yyDollar[1].where,
				Right: yyDollar[3].where,
			}
		}
	case 37:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:394
		{
			yyVAL.where = WhereClauseEmpty{}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:398
		{
			yyVAL.where = yyDollar[2].where
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:405
		{
			switch v := strings.ToLower(string(yyDollar[1].str)); v {
			case DatabasesStr, RoutersStr, PoolsStr, InstanceStr, ShardsStr, BackendConnectionsStr, KeyRangesStr, ShardingRules, ClientsStr, StatusStr, DistributionsStr, VersionStr, RelationsStr, TaskGroupStr, PreparedStatementsStr, QuantilesStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:416
		{
			switch v := string(yyDollar[1].str); v {
			case ClientStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:426
		{
			yyVAL.bool = true
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:426
		{
			yyVAL.bool = false
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:430
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].key_range_selector}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:434
		{
			yyVAL.drop = &Drop{Element: &KeyRangeSelector{KeyRangeID: `*`}}
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:438
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].sharding_rule_selector}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:442
		{
			yyVAL.drop = &Drop{Element: &ShardingRuleSelector{ID: `*`}}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:446
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].distribution_selector, CascadeDelete: yyDollar[3].bool}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:450
		{
			yyVAL.drop = &Drop{Element: &DistributionSelector{ID: `*`}, CascadeDelete: yyDollar[4].bool}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:454
		{
			yyVAL.drop = &Drop{Element: &ShardSelector{ID: yyDollar[3].str}}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:458
		{
			yyVAL.drop = &Drop{Element: &TaskGroupSelector{}}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:465
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:470
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:475
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:479
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:485
		{
			yyVAL.trace = &TraceStmt{All: true}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:488
		{
			yyVAL.trace = &TraceStmt{
				Client: yyDollar[4].uinteger,
			}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:496
		{
			yyVAL.stoptrace = &StopTraceStmt{}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:502
		{
			yyVAL.alter = &Alter{Element: yyDollar[2].alter_distribution}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:508
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AttachRelation{
					Distribution: yyDollar[1].distribution_selector,
					Relations:    yyDollar[2].relations,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:517
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &DetachRelation{
					Distribution: yyDollar[1].distribution_selector,
					RelationName: yyDollar[4].str,
				},
			}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:529
		{
			yyVAL.dEntrieslist = append(yyDollar[1].dEntrieslist, yyDollar[3].distrKeyEntry)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:531
		{
			yyVAL.dEntrieslist = []DistributionKeyEntry{
				yyDollar[1].distrKeyEntry,
			}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:541
		{
			yyVAL.distrKeyEntry = DistributionKeyEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:550
		{
			yyVAL.distributed_relation = &DistributedRelation{
				Name:            yyDollar[2].str,
				DistributionKey: yyDollar[5].dEntrieslist,
			}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:557
		{
			yyVAL.distributed_relation = &DistributedRelation{
				Name:               yyDollar[2].str,
				ReplicatedRelation: true,
			}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:567
		{
			yyVAL.relations = []*DistributedRelation{yyDollar[1].distributed_relation}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:569
		{
			yyVAL.relations = append(yyDollar[1].relations, yyDollar[2].distributed_relation)
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:574
		{
			yyVAL.relations = yyDollar[2].relations
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:580
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:585
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:590
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:595
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:600
		{
			yyVAL.create = &Create{
				Element: &ReferenceRelationDefinition{
					TableName: yyDollar[4].str,
				},
			}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:609
		{
			yyVAL.opt_asc_desc = &SortByAsc{}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:610
		{
			yyVAL.opt_asc_desc = &SortByDesc{}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:611
		{
			yyVAL.opt_asc_desc = &SortByDefault{}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:615
		{
			yyVAL.order_clause = &Order{Col: yyDollar[3].colref, OptAscDesc: yyDollar[4].opt_asc_desc}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:618
		{
			yyVAL.order_clause = OrderClause(nil)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:623
		{
			yyVAL.group_clause = GroupBy{Col: yyDollar[3].colref}
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:626
		{
			yyVAL.group_clause = GroupByClauseEmpty{}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:631
		{
			yyVAL.show = &Show{Cmd: yyDollar[2].str, Where: yyDollar[3].where, GroupBy: yyDollar[4].group_clause, Order: yyDollar[5].order_clause}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:636
		{
			yyVAL.lock = &Lock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:644
		{
			yyVAL.ds = &DistributionDefinition{
				ID:       yyDollar[2].str,
				ColTypes: yyDollar[3].strlist,
			}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:651
		{
			yyVAL.ds = &DistributionDefinition{
				Replicated: true,
			}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:659
		{
			yyVAL.strlist = yyDollar[3].strlist
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:661
		{
			/* empty column types should be prohibited */
			yyVAL.strlist = nil
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:667
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:669
		{
			yyVAL.strlist = []string{
				yyDollar[1].str,
			}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:676
		{
			yyVAL.str = "varchar"
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:678
		{
			yyVAL.str = "varchar hashed"
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:680
		{
			yyVAL.str = "integer"
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:682
		{
			yyVAL.str = "integer"
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:684
		{
			yyVAL.str = "uinteger"
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:686
		{
			yyVAL.str = "uinteger"
		}
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:692
		{
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: yyDollar[3].str, TableName: yyDollar[4].str, Entries: yyDollar[5].entrieslist, Distribution: yyDollar[6].str}
		}
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:697
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: "shrule" + str, TableName: yyDollar[3].str, Entries: yyDollar[4].entrieslist, Distribution: yyDollar[5].str}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:706
		{
			yyVAL.entrieslist = make([]ShardingRuleEntry, 0)
			yyVAL.entrieslist = append(yyVAL.entrieslist, yyDollar[1].shruleEntry)
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:712
		{
			yyVAL.entrieslist = append(yyDollar[1].entrieslist, yyDollar[2].shruleEntry)
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:718
		{
			yyVAL.shruleEntry = ShardingRuleEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:727
		{
			yyVAL.str = yyDollar[2].str
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:730
		{
			yyVAL.str = ""
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:734
		{
			yyVAL.str = yyDollar[2].str
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:739
		{
			yyVAL.str = yyDollar[2].str
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:745
		{
			yyVAL.str = "identity"
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:747
		{
			yyVAL.str = "murmur"
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:749
		{
			yyVAL.str = "city"
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:755
		{
			yyVAL.str = yyDollar[3].str
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:757
		{
			yyVAL.str = ""
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:762
		{
			yyVAL.str = yyDollar[3].str
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:764
		{
			yyVAL.str = "default"
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:769
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:772
		{
			buf := make([]byte, 8)
			binary.PutVarint(buf, int64(yyDollar[1].uinteger))
			yyVAL.bytes = buf
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:779
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: [][]byte{
					yyDollar[1].bytes,
				},
			}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:786
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: append(yyDollar[1].krbound.Pivots, yyDollar[3].bytes),
			}
		}
	case 115:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:795
		{
			yyVAL.kr = &KeyRangeDefinition{
				KeyRangeID:   yyDollar[3].str,
				LowerBound:   yyDollar[5].krbound,
				ShardID:      yyDollar[8].str,
				Distribution: yyDollar[9].str,
			}
		}
	case 116:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:804
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.kr = &KeyRangeDefinition{
				LowerBound:   yyDollar[4].krbound,
				ShardID:      yyDollar[7].str,
				Distribution: yyDollar[8].str,
				KeyRangeID:   "kr" + str,
			}
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:819
		{
			yyVAL.shard = &ShardDefinition{Id: yyDollar[2].str, Hosts: yyDollar[5].strlist}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:824
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.shard = &ShardDefinition{Id: "shard" + str, Hosts: yyDollar[4].strlist}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:834
		{
			yyVAL.strlist = []string{yyDollar[1].str}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:839
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:845
		{
			yyVAL.unlock = &Unlock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:851
		{
			yyVAL.sharding_rule_selector = &ShardingRuleSelector{ID: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:857
		{
			yyVAL.key_range_selector = &KeyRangeSelector{KeyRangeID: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:863
		{
			yyVAL.distribution_selector = &DistributionSelector{ID: yyDollar[2].str, Replicated: false}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:865
		{
			yyVAL.distribution_selector = &DistributionSelector{Replicated: true}
		}
	case 126:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:871
		{
			yyVAL.split = &SplitKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeFromID: yyDollar[4].str, Border: yyDollar[6].krbound}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:877
		{
			yyVAL.kill = &Kill{Cmd: yyDollar[2].str, Target: yyDollar[3].uinteger}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:880
		{
			yyVAL.kill = &Kill{Cmd: "client", Target: yyDollar[3].uinteger}
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:886
		{
			yyVAL.move = &MoveKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str}
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:892
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Check: true, Apply: true}
		}
	case 131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:894
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Check: true}
		}
	case 132:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:896
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Apply: true}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:900
		{
			yyVAL.opt_batch_size = int(yyDollar[3].uinteger)
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:901
		{
			yyVAL.opt_batch_size = -1
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:905
		{
			yyVAL.unite = &UniteKeyRange{KeyRangeIDL: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeIDR: yyDollar[4].str}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:911
		{
			yyVAL.listen = &Listen{addr: yyDollar[2].str}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:917
		{
			yyVAL.shutdown = &Shutdown{}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:923
		{
			yyVAL.invalidate_cache = &InvalidateCache{}
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:931
		{
			yyVAL.register_router = &RegisterRouter{ID: yyDollar[3].str, Addr: yyDollar[5].str}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:937
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: yyDollar[3].str}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:942
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: `*`}
		}
	}
	goto yystack /* stack new state and value */
}
