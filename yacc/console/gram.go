// Code generated by goyacc -o gram.go -p yy gram.y. DO NOT EDIT.

//line gram.y:3
package spqrparser

import __yyfmt__ "fmt"

//line gram.y:3

import (
	"crypto/rand"
	"encoding/hex"
	"strconv"
	"strings"
)

func randomHex(n int) (string, error) {
	bytes := make([]byte, n)
	if _, err := rand.Read(bytes); err != nil {
		return "", err
	}
	return hex.EncodeToString(bytes), nil
}

//line gram.y:24
type yySymType struct {
	yys      int
	str      string
	byte     byte
	bytes    []byte
	integer  int
	uinteger uint
	bool     bool
	empty    struct{}

	set       *Set
	statement Statement
	show      *Show

	drop   *Drop
	create *Create

	kill   *Kill
	lock   *Lock
	unlock *Unlock

	ds            *DataspaceDefinition
	kr            *KeyRangeDefinition
	shard         *ShardDefinition
	sharding_rule *ShardingRuleDefinition

	register_router   *RegisterRouter
	unregister_router *UnregisterRouter

	split *SplitKeyRange
	move  *MoveKeyRange
	unite *UniteKeyRange

	shutdown *Shutdown
	listen   *Listen

	trace     *TraceStmt
	stoptrace *StopTraceStmt

	entrieslist []ShardingRuleEntry
	shruleEntry ShardingRuleEntry

	sharding_rule_selector *ShardingRuleSelector
	key_range_selector     *KeyRangeSelector
	dataspace_selector     *DataspaceSelector

	colref ColumnRef
	where  WhereClauseNode
}

const IDENT = 57346
const COMMAND = 57347
const SHOW = 57348
const KILL = 57349
const WHERE = 57350
const OR = 57351
const AND = 57352
const TEQ = 57353
const SCONST = 57354
const ICONST = 57355
const TSEMICOLON = 57356
const TOPENBR = 57357
const TCLOSEBR = 57358
const SHUTDOWN = 57359
const LISTEN = 57360
const REGISTER = 57361
const UNREGISTER = 57362
const ROUTER = 57363
const ROUTE = 57364
const CREATE = 57365
const ADD = 57366
const DROP = 57367
const LOCK = 57368
const UNLOCK = 57369
const SPLIT = 57370
const MOVE = 57371
const COMPOSE = 57372
const SET = 57373
const CASCADE = 57374
const SHARDING = 57375
const COLUMN = 57376
const TABLE = 57377
const HASH = 57378
const FUNCTION = 57379
const KEY = 57380
const RANGE = 57381
const DATASPACE = 57382
const SHARDS = 57383
const KEY_RANGES = 57384
const ROUTERS = 57385
const SHARD = 57386
const HOST = 57387
const SHARDING_RULES = 57388
const RULE = 57389
const COLUMNS = 57390
const VERSION = 57391
const BY = 57392
const FROM = 57393
const TO = 57394
const WITH = 57395
const UNITE = 57396
const ALL = 57397
const ADDRESS = 57398
const FOR = 57399
const CLIENT = 57400
const IDENTITY = 57401
const MURMUR = 57402
const CITY = 57403
const START = 57404
const STOP = 57405
const TRACE = 57406
const MESSAGES = 57407
const OP = 57408

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"COMMAND",
	"SHOW",
	"KILL",
	"WHERE",
	"OR",
	"AND",
	"TEQ",
	"SCONST",
	"ICONST",
	"TSEMICOLON",
	"TOPENBR",
	"TCLOSEBR",
	"SHUTDOWN",
	"LISTEN",
	"REGISTER",
	"UNREGISTER",
	"ROUTER",
	"ROUTE",
	"CREATE",
	"ADD",
	"DROP",
	"LOCK",
	"UNLOCK",
	"SPLIT",
	"MOVE",
	"COMPOSE",
	"SET",
	"CASCADE",
	"SHARDING",
	"COLUMN",
	"TABLE",
	"HASH",
	"FUNCTION",
	"KEY",
	"RANGE",
	"DATASPACE",
	"SHARDS",
	"KEY_RANGES",
	"ROUTERS",
	"SHARD",
	"HOST",
	"SHARDING_RULES",
	"RULE",
	"COLUMNS",
	"VERSION",
	"BY",
	"FROM",
	"TO",
	"WITH",
	"UNITE",
	"ALL",
	"ADDRESS",
	"FOR",
	"CLIENT",
	"IDENTITY",
	"MURMUR",
	"CITY",
	"START",
	"STOP",
	"TRACE",
	"MESSAGES",
	"OP",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:673

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 215

var yyAct = [...]int{

	119, 147, 68, 116, 103, 126, 93, 125, 28, 29,
	109, 84, 52, 51, 172, 173, 174, 67, 128, 31,
	30, 35, 36, 149, 123, 21, 20, 25, 26, 27,
	32, 33, 129, 24, 82, 77, 107, 83, 77, 98,
	186, 149, 77, 77, 76, 77, 185, 80, 184, 183,
	167, 166, 157, 156, 77, 97, 34, 131, 96, 144,
	89, 86, 78, 128, 22, 23, 134, 108, 164, 165,
	43, 66, 90, 95, 85, 99, 100, 129, 57, 102,
	105, 79, 61, 55, 81, 59, 112, 114, 180, 113,
	110, 112, 179, 111, 101, 44, 88, 120, 121, 122,
	45, 106, 43, 151, 104, 130, 46, 124, 54, 132,
	115, 135, 87, 133, 77, 182, 181, 178, 177, 75,
	74, 140, 38, 92, 39, 94, 145, 77, 42, 152,
	153, 148, 146, 41, 154, 60, 62, 158, 155, 40,
	159, 71, 72, 73, 161, 104, 47, 162, 163, 53,
	50, 137, 148, 64, 70, 49, 139, 138, 70, 168,
	77, 48, 69, 160, 169, 170, 69, 94, 37, 175,
	137, 117, 142, 1, 176, 139, 138, 19, 18, 143,
	17, 16, 15, 13, 187, 188, 189, 190, 14, 191,
	192, 193, 194, 9, 10, 171, 150, 127, 6, 5,
	4, 3, 8, 12, 11, 7, 65, 63, 58, 56,
	2, 118, 141, 136, 91,
}
var yyPact = [...]int{

	2, -1000, 108, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	62, 62, -51, -52, 30, 45, 44, 44, 149, 13,
	150, -1000, 44, 44, 44, 99, 98, -1000, -1000, -1000,
	-1000, -1000, -1000, 123, 15, 42, 31, -1000, -1000, -1000,
	-1000, -21, -54, -1000, -1000, 35, -1000, 14, 80, 41,
	-1000, 33, -1000, 115, -1000, 112, 112, -1000, -1000, -1000,
	-1000, 7, 3, -14, 123, 39, -1000, -1000, 110, 50,
	-17, 22, -55, 112, -1000, 38, 34, -1000, 78, -1000,
	123, -1000, 156, -1000, -1000, -1000, 123, 123, 123, -32,
	-1000, -1000, 69, 29, 123, 6, 154, 21, 150, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 166, 156, 168, -1000,
	9, -1000, -1000, 150, 29, -16, -1000, 67, 123, 123,
	-1000, 154, 1, 0, 150, -1000, 156, -1000, -1000, -1000,
	147, 150, -1000, -1000, 150, -1000, -16, -1000, -1000, 28,
	-1000, 32, -1000, -1000, -1, -2, 150, 112, -1000, 166,
	-1000, -1000, -1000, -1000, 123, -45, 150, 112, 96, 95,
	-1000, -1000, -1000, 56, 52, 94, 93, -3, -4, -1000,
	-1000, -6, -12, 123, 123, 123, 123, -34, -34, -34,
	-34, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 214, 3, 213, 212, 211, 2, 0, 6, 210,
	209, 108, 208, 207, 206, 205, 204, 203, 202, 201,
	200, 199, 198, 124, 139, 133, 128, 7, 5, 4,
	197, 196, 195, 1, 194, 193, 188, 183, 182, 181,
	180, 178, 177, 173, 168,
}
var yyR1 = [...]int{

	0, 43, 44, 44, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 8, 6, 6, 7, 3, 3, 3, 4, 4,
	5, 2, 2, 2, 1, 1, 13, 14, 15, 18,
	18, 18, 18, 18, 18, 18, 18, 19, 19, 19,
	19, 21, 21, 22, 20, 20, 20, 20, 16, 35,
	23, 24, 24, 27, 27, 28, 29, 29, 30, 30,
	32, 32, 32, 31, 31, 33, 33, 25, 25, 25,
	25, 26, 26, 34, 10, 11, 12, 38, 17, 17,
	39, 40, 37, 36, 41, 42, 42,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 0, 2, 1, 1, 2, 2,
	4, 2, 4, 2, 3, 3, 4, 2, 2, 2,
	2, 4, 4, 3, 2, 2, 2, 2, 3, 2,
	2, 6, 5, 1, 2, 2, 2, 0, 2, 2,
	1, 2, 2, 3, 0, 3, 0, 11, 11, 10,
	10, 5, 4, 2, 3, 3, 2, 6, 3, 3,
	4, 4, 2, 1, 5, 3, 3,
}
var yyChk = [...]int{

	-1000, -43, -9, -19, -20, -21, -22, -15, -18, -35,
	-34, -16, -17, -37, -36, -38, -39, -40, -41, -42,
	24, 23, 62, 63, 31, 25, 26, 27, 6, 7,
	18, 17, 28, 29, 54, 19, 20, -44, 14, -23,
	-24, -25, -26, 40, 33, 38, 44, -23, -24, -25,
	-26, 64, 64, -23, -11, 38, -10, 33, -12, 40,
	-11, 38, -11, -13, 4, -14, 58, 4, -6, 12,
	4, -11, -11, -11, 21, 21, -7, 4, 47, 39,
	-7, 53, 55, 58, 65, 39, 47, 32, 55, -7,
	39, -1, 8, -8, 13, -8, 51, 52, 53, -7,
	-7, 55, -7, -29, 35, -7, 51, 53, 45, 65,
	-8, 55, -7, 55, -7, 32, -2, 15, -5, -7,
	-7, -7, -7, 56, -29, -27, -28, -30, 34, 48,
	-7, 51, -6, -8, 45, -6, -3, 4, 10, 9,
	-2, -4, 4, 11, 50, -6, -27, -33, -28, 57,
	-31, 36, -7, -7, -6, -8, 52, 52, -6, -2,
	16, -6, -6, -33, 40, 37, 52, 52, -6, -8,
	-7, -32, 59, 60, 61, -6, -8, 22, 22, 36,
	36, 22, 22, 52, 52, 52, 52, -7, -7, -7,
	-7, -33, -33, -33, -33,
}
var yyDef = [...]int{

	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 1, 3, 47,
	48, 49, 50, 0, 0, 0, 0, 54, 55, 56,
	57, 0, 0, 38, 39, 0, 41, 0, 43, 0,
	59, 0, 83, 34, 36, 0, 0, 37, 92, 22,
	23, 0, 0, 0, 0, 0, 60, 24, 67, 0,
	0, 0, 0, 0, 53, 0, 0, 45, 44, 86,
	0, 58, 0, 88, 21, 89, 0, 0, 0, 0,
	95, 96, 67, 0, 0, 0, 0, 0, 0, 51,
	52, 40, 85, 42, 84, 46, 35, 0, 0, 30,
	0, 90, 91, 0, 0, 76, 63, 74, 0, 0,
	66, 0, 0, 0, 0, 82, 0, 25, 26, 27,
	0, 0, 28, 29, 0, 94, 76, 62, 64, 0,
	65, 0, 68, 69, 0, 0, 0, 0, 81, 33,
	31, 32, 87, 61, 0, 0, 0, 0, 0, 0,
	75, 73, 70, 0, 0, 0, 0, 0, 0, 71,
	72, 0, 0, 0, 0, 0, 0, 76, 76, 76,
	76, 79, 80, 77, 78,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:179
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:180
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:185
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:189
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:193
		{
			setParseTree(yylex, yyDollar[1].trace)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:197
		{
			setParseTree(yylex, yyDollar[1].stoptrace)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:201
		{
			setParseTree(yylex, yyDollar[1].set)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:205
		{
			setParseTree(yylex, yyDollar[1].drop)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:209
		{
			setParseTree(yylex, yyDollar[1].lock)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:213
		{
			setParseTree(yylex, yyDollar[1].unlock)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:217
		{
			setParseTree(yylex, yyDollar[1].show)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:221
		{
			setParseTree(yylex, yyDollar[1].kill)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:225
		{
			setParseTree(yylex, yyDollar[1].listen)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:229
		{
			setParseTree(yylex, yyDollar[1].shutdown)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:233
		{
			setParseTree(yylex, yyDollar[1].split)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:237
		{
			setParseTree(yylex, yyDollar[1].move)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:241
		{
			setParseTree(yylex, yyDollar[1].unite)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:245
		{
			setParseTree(yylex, yyDollar[1].register_router)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:249
		{
			setParseTree(yylex, yyDollar[1].unregister_router)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:254
		{
			yyVAL.uinteger = uint(yyDollar[1].uinteger)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:259
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:263
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:268
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:274
		{
			yyVAL.str = yyDollar[1].str
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:276
		{
			yyVAL.str = "AND"
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:278
		{
			yyVAL.str = "OR"
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:283
		{
			yyVAL.str = yyDollar[1].str
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:285
		{
			yyVAL.str = "="
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:291
		{
			yyVAL.colref = ColumnRef{
				ColName: yyDollar[1].str,
			}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:299
		{
			yyVAL.where = yyDollar[2].where
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:302
		{
			yyVAL.where = WhereClauseLeaf{
				ColRef: yyDollar[1].colref,
				Op:     yyDollar[2].str,
				Value:  yyDollar[3].str,
			}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:310
		{
			yyVAL.where = WhereClauseOp{
				Op:    yyDollar[2].str,
				Left:  yyDollar[1].where,
				Right: yyDollar[3].where,
			}
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:320
		{
			yyVAL.where = WhereClauseEmpty{}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:324
		{
			yyVAL.where = yyDollar[2].where
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:331
		{
			switch v := strings.ToLower(string(yyDollar[1].str)); v {
			case DatabasesStr, RoutersStr, PoolsStr, ShardsStr, BackendConnectionsStr, KeyRangesStr, ShardingRules, ClientsStr, StatusStr, DataspacesStr, VersionStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:342
		{
			switch v := string(yyDollar[1].str); v {
			case ClientStr:
				yyVAL.str = v
			default:
				yyVAL.str = "unsupp"
			}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:353
		{
			yyVAL.set = &Set{Element: yyDollar[2].ds}
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:360
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].key_range_selector}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:364
		{
			yyVAL.drop = &Drop{Element: &KeyRangeSelector{KeyRangeID: `*`}}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:368
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].sharding_rule_selector}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:372
		{
			yyVAL.drop = &Drop{Element: &ShardingRuleSelector{ID: `*`}}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:376
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].dataspace_selector, CascadeDelete: false}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:380
		{
			yyVAL.drop = &Drop{Element: &DataspaceSelector{ID: `*`}, CascadeDelete: false}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:384
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].dataspace_selector, CascadeDelete: true}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:388
		{
			yyVAL.drop = &Drop{Element: &DataspaceSelector{ID: `*`}, CascadeDelete: true}
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:394
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:399
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:404
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:408
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:415
		{
			yyVAL.trace = &TraceStmt{All: true}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:418
		{
			yyVAL.trace = &TraceStmt{
				Client: yyDollar[4].uinteger,
			}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:426
		{
			yyVAL.stoptrace = &StopTraceStmt{}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:433
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:438
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:443
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:447
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:454
		{
			yyVAL.show = &Show{Cmd: yyDollar[2].str, Where: yyDollar[3].where}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:460
		{
			yyVAL.lock = &Lock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:468
		{
			yyVAL.ds = &DataspaceDefinition{ID: yyDollar[2].str}
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:474
		{
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: yyDollar[3].str, TableName: yyDollar[4].str, Entries: yyDollar[5].entrieslist, Dataspace: yyDollar[6].str}
		}
	case 62:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:479
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: "shrule" + str, TableName: yyDollar[3].str, Entries: yyDollar[4].entrieslist, Dataspace: yyDollar[5].str}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:488
		{
			yyVAL.entrieslist = make([]ShardingRuleEntry, 0)
			yyVAL.entrieslist = append(yyVAL.entrieslist, yyDollar[1].shruleEntry)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:494
		{
			yyVAL.entrieslist = append(yyDollar[1].entrieslist, yyDollar[2].shruleEntry)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:500
		{
			yyVAL.shruleEntry = ShardingRuleEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:509
		{
			yyVAL.str = yyDollar[2].str
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:512
		{
			yyVAL.str = ""
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:516
		{
			yyVAL.str = yyDollar[2].str
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:521
		{
			yyVAL.str = yyDollar[2].str
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:527
		{
			yyVAL.str = "identity"
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:529
		{
			yyVAL.str = "murmur"
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:531
		{
			yyVAL.str = "city"
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:537
		{
			yyVAL.str = yyDollar[3].str
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:540
		{
			yyVAL.str = ""
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:543
		{
			yyVAL.str = yyDollar[3].str
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:546
		{
			yyVAL.str = "default"
		}
	case 77:
		yyDollar = yyS[yypt-11 : yypt+1]
//line gram.y:551
		{
			yyVAL.kr = &KeyRangeDefinition{LowerBound: []byte(yyDollar[5].str), UpperBound: []byte(yyDollar[7].str), ShardID: yyDollar[10].str, KeyRangeID: yyDollar[3].str, Dataspace: yyDollar[11].str}
		}
	case 78:
		yyDollar = yyS[yypt-11 : yypt+1]
//line gram.y:555
		{
			yyVAL.kr = &KeyRangeDefinition{LowerBound: []byte(strconv.FormatUint(uint64(yyDollar[5].uinteger), 10)), UpperBound: []byte(strconv.FormatUint(uint64(yyDollar[7].uinteger), 10)), ShardID: yyDollar[10].str, KeyRangeID: yyDollar[3].str, Dataspace: yyDollar[11].str}
		}
	case 79:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:559
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.kr = &KeyRangeDefinition{LowerBound: []byte(yyDollar[4].str), UpperBound: []byte(yyDollar[6].str), ShardID: yyDollar[9].str, KeyRangeID: "kr" + str, Dataspace: yyDollar[10].str}
		}
	case 80:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:567
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.kr = &KeyRangeDefinition{LowerBound: []byte(strconv.FormatUint(uint64(yyDollar[4].uinteger), 10)), UpperBound: []byte(strconv.FormatUint(uint64(yyDollar[6].uinteger), 10)), ShardID: yyDollar[9].str, KeyRangeID: "kr" + str, Dataspace: yyDollar[10].str}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:578
		{
			yyVAL.shard = &ShardDefinition{Id: yyDollar[2].str, Hosts: []string{yyDollar[5].str}}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:583
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.shard = &ShardDefinition{Id: "shard" + str, Hosts: []string{yyDollar[4].str}}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:594
		{
			yyVAL.unlock = &Unlock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:600
		{
			yyVAL.sharding_rule_selector = &ShardingRuleSelector{ID: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:606
		{
			yyVAL.key_range_selector = &KeyRangeSelector{KeyRangeID: yyDollar[3].str}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:612
		{
			yyVAL.dataspace_selector = &DataspaceSelector{ID: yyDollar[2].str}
		}
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:618
		{
			yyVAL.split = &SplitKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeFromID: yyDollar[4].str, Border: []byte(yyDollar[6].str)}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:624
		{
			yyVAL.kill = &Kill{Cmd: yyDollar[2].str, Target: yyDollar[3].uinteger}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:627
		{
			yyVAL.kill = &Kill{Cmd: "client", Target: yyDollar[3].uinteger}
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:633
		{
			yyVAL.move = &MoveKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:639
		{
			yyVAL.unite = &UniteKeyRange{KeyRangeIDL: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeIDR: yyDollar[4].str}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:645
		{
			yyVAL.listen = &Listen{addr: yyDollar[2].str}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:651
		{
			yyVAL.shutdown = &Shutdown{}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:659
		{
			yyVAL.register_router = &RegisterRouter{ID: yyDollar[3].str, Addr: yyDollar[5].str}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:665
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: yyDollar[3].str}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:670
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: `*`}
		}
	}
	goto yystack /* stack new state and value */
}
