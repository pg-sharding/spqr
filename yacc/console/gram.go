// Code generated by goyacc -o gram.go -p yy gram.y. DO NOT EDIT.

//line gram.y:3
package spqrparser

import __yyfmt__ "fmt"

//line gram.y:3

import (
	"crypto/rand"
	"encoding/binary"
	"encoding/hex"
	"math"
	"strings"
)

const SIGNED_INT_RANGE_ERROR string = "the Signed Value should be at the range of [-9223372036854775808, 9223372036854775807]."

func randomHex(n int) (string, error) {
	bytes := make([]byte, n)
	if _, err := rand.Read(bytes); err != nil {
		return "", err
	}
	return hex.EncodeToString(bytes), nil
}

//line gram.y:26
type yySymType struct {
	yys          int
	str          string
	strlist      []string
	byte         byte
	bytes        []byte
	integer      int
	uinteger     uint
	uintegerlist []uint
	bool         bool
	empty        struct{}

	set       *Set
	statement Statement
	show      *Show

	drop   *Drop
	create *Create

	kill   *Kill
	lock   *Lock
	unlock *Unlock

	krbound *KeyRangeBound

	qname         *QualifiedName
	ds            *DistributionDefinition
	kr            *KeyRangeDefinition
	shard         *ShardDefinition
	sharding_rule *ShardingRuleDefinition

	register_router   *RegisterRouter
	unregister_router *UnregisterRouter

	split *SplitKeyRange
	move  *MoveKeyRange
	unite *UniteKeyRange

	redistribute *RedistributeKeyRange

	invalidate_cache      *InvalidateCache
	sync_reference_tables *SyncReferenceTables

	shutdown *Shutdown
	listen   *Listen

	trace     *TraceStmt
	stoptrace *StopTraceStmt

	distribution *DistributionDefinition

	alter                *Alter
	alter_distribution   *AlterDistribution
	distributed_relation *DistributedRelation

	relations    []*DistributedRelation
	relation     *DistributedRelation
	entrieslist  []ShardingRuleEntry
	dEntrieslist []DistributionKeyEntry

	shruleEntry ShardingRuleEntry

	distrKeyEntry DistributionKeyEntry
	aiEntry       *AutoIncrementEntry

	sharding_rule_selector *ShardingRuleSelector
	key_range_selector     *KeyRangeSelector
	distribution_selector  *DistributionSelector
	aiEntrieslist          []*AutoIncrementEntry

	colref ColumnRef
	where  WhereClauseNode

	order_clause OrderClause
	opt_asc_desc OptAscDesc

	group_clause GroupByClause

	opt_batch_size int

	retryMoveTaskGroup *RetryMoveTaskGroup
}

const IDENT = 57346
const COMMAND = 57347
const SHOW = 57348
const KILL = 57349
const WHERE = 57350
const OR = 57351
const AND = 57352
const TEQ = 57353
const TCOMMA = 57354
const TDOT = 57355
const SCONST = 57356
const ICONST = 57357
const INVALID_ICONST = 57358
const TSEMICOLON = 57359
const TMINUS = 57360
const TPLUS = 57361
const TOPENBR = 57362
const TCLOSEBR = 57363
const SHUTDOWN = 57364
const LISTEN = 57365
const REGISTER = 57366
const UNREGISTER = 57367
const ROUTER = 57368
const ROUTE = 57369
const CREATE = 57370
const ADD = 57371
const DROP = 57372
const LOCK = 57373
const UNLOCK = 57374
const SPLIT = 57375
const MOVE = 57376
const COMPOSE = 57377
const SET = 57378
const CASCADE = 57379
const ATTACH = 57380
const ALTER = 57381
const DETACH = 57382
const REDISTRIBUTE = 57383
const REFERENCE = 57384
const CHECK = 57385
const APPLY = 57386
const SHARDING = 57387
const COLUMN = 57388
const TABLE = 57389
const TABLES = 57390
const HASH = 57391
const FUNCTION = 57392
const KEY = 57393
const RANGE = 57394
const DISTRIBUTION = 57395
const RELATION = 57396
const REPLICATED = 57397
const AUTO = 57398
const INCREMENT = 57399
const SEQUENCE = 57400
const SCHEMA = 57401
const SHARDS = 57402
const KEY_RANGES = 57403
const ROUTERS = 57404
const SHARD = 57405
const HOST = 57406
const SHARDING_RULES = 57407
const RULE = 57408
const COLUMNS = 57409
const VERSION = 57410
const HOSTS = 57411
const SEQUENCES = 57412
const IS_READ_ONLY = 57413
const MOVE_STATS = 57414
const BY = 57415
const FROM = 57416
const TO = 57417
const WITH = 57418
const UNITE = 57419
const ALL = 57420
const ADDRESS = 57421
const FOR = 57422
const CLIENT = 57423
const BATCH = 57424
const SIZE = 57425
const INVALIDATE = 57426
const CACHE = 57427
const SYNC = 57428
const RETRY = 57429
const DISTRIBUTED = 57430
const IN = 57431
const ON = 57432
const IDENTITY = 57433
const MURMUR = 57434
const CITY = 57435
const START = 57436
const STOP = 57437
const TRACE = 57438
const MESSAGES = 57439
const TASK = 57440
const GROUP = 57441
const VARCHAR = 57442
const INTEGER = 57443
const INT = 57444
const TYPES = 57445
const UUID = 57446
const OP = 57447
const ASC = 57448
const DESC = 57449
const ORDER = 57450

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"COMMAND",
	"SHOW",
	"KILL",
	"WHERE",
	"OR",
	"AND",
	"TEQ",
	"TCOMMA",
	"TDOT",
	"SCONST",
	"ICONST",
	"INVALID_ICONST",
	"TSEMICOLON",
	"TMINUS",
	"TPLUS",
	"TOPENBR",
	"TCLOSEBR",
	"SHUTDOWN",
	"LISTEN",
	"REGISTER",
	"UNREGISTER",
	"ROUTER",
	"ROUTE",
	"CREATE",
	"ADD",
	"DROP",
	"LOCK",
	"UNLOCK",
	"SPLIT",
	"MOVE",
	"COMPOSE",
	"SET",
	"CASCADE",
	"ATTACH",
	"ALTER",
	"DETACH",
	"REDISTRIBUTE",
	"REFERENCE",
	"CHECK",
	"APPLY",
	"SHARDING",
	"COLUMN",
	"TABLE",
	"TABLES",
	"HASH",
	"FUNCTION",
	"KEY",
	"RANGE",
	"DISTRIBUTION",
	"RELATION",
	"REPLICATED",
	"AUTO",
	"INCREMENT",
	"SEQUENCE",
	"SCHEMA",
	"SHARDS",
	"KEY_RANGES",
	"ROUTERS",
	"SHARD",
	"HOST",
	"SHARDING_RULES",
	"RULE",
	"COLUMNS",
	"VERSION",
	"HOSTS",
	"SEQUENCES",
	"IS_READ_ONLY",
	"MOVE_STATS",
	"BY",
	"FROM",
	"TO",
	"WITH",
	"UNITE",
	"ALL",
	"ADDRESS",
	"FOR",
	"CLIENT",
	"BATCH",
	"SIZE",
	"INVALIDATE",
	"CACHE",
	"SYNC",
	"RETRY",
	"DISTRIBUTED",
	"IN",
	"ON",
	"IDENTITY",
	"MURMUR",
	"CITY",
	"START",
	"STOP",
	"TRACE",
	"MESSAGES",
	"TASK",
	"GROUP",
	"VARCHAR",
	"INTEGER",
	"INT",
	"TYPES",
	"UUID",
	"OP",
	"ASC",
	"DESC",
	"ORDER",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:1191

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 345

var yyAct = [...]int16{
	175, 237, 283, 254, 130, 240, 206, 204, 280, 174,
	231, 205, 198, 191, 172, 197, 190, 110, 151, 212,
	170, 117, 304, 305, 188, 213, 232, 233, 234, 74,
	235, 186, 68, 171, 122, 146, 161, 114, 66, 64,
	70, 63, 32, 33, 299, 73, 84, 291, 292, 293,
	71, 251, 158, 101, 98, 265, 105, 226, 35, 34,
	40, 41, 193, 83, 26, 25, 29, 30, 31, 36,
	37, 120, 121, 112, 123, 42, 113, 38, 239, 181,
	127, 102, 102, 194, 102, 72, 155, 132, 60, 102,
	102, 53, 107, 137, 138, 139, 239, 54, 120, 52,
	294, 275, 102, 136, 150, 153, 135, 196, 157, 55,
	116, 134, 257, 39, 224, 214, 164, 166, 162, 203,
	43, 156, 45, 44, 103, 168, 169, 164, 193, 80,
	27, 28, 255, 300, 62, 177, 178, 179, 180, 53,
	82, 167, 111, 209, 252, 54, 207, 52, 187, 194,
	176, 207, 271, 195, 182, 165, 163, 55, 140, 208,
	129, 106, 184, 185, 119, 86, 210, 124, 97, 189,
	126, 125, 154, 108, 115, 85, 87, 207, 109, 88,
	109, 104, 253, 228, 76, 79, 272, 241, 219, 269,
	268, 267, 102, 227, 242, 243, 223, 147, 152, 149,
	100, 229, 263, 264, 238, 65, 236, 118, 69, 94,
	99, 248, 244, 144, 145, 142, 245, 93, 245, 51,
	50, 278, 49, 102, 258, 48, 47, 131, 247, 133,
	259, 273, 261, 246, 211, 152, 75, 77, 270, 173,
	262, 249, 89, 90, 91, 92, 59, 58, 297, 57,
	238, 96, 56, 281, 284, 86, 285, 216, 274, 277,
	245, 276, 218, 217, 266, 85, 87, 286, 200, 88,
	287, 128, 289, 102, 260, 216, 295, 288, 199, 201,
	218, 217, 202, 256, 221, 160, 296, 61, 46, 301,
	302, 222, 1, 22, 225, 306, 19, 307, 281, 18,
	17, 284, 16, 310, 309, 311, 308, 15, 312, 14,
	12, 13, 8, 9, 303, 250, 148, 230, 143, 183,
	141, 23, 21, 95, 24, 20, 290, 192, 298, 279,
	282, 159, 6, 5, 4, 3, 7, 11, 10, 81,
	78, 67, 2, 220, 215,
}

var yyPact = [...]int16{
	36, -1000, 209, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 94, 46, -55, -57, -13,
	133, 133, 125, 59, 251, -1000, 133, 133, 133, 133,
	191, 183, 115, -31, 176, 158, -1000, -1000, -1000, -1000,
	-1000, -1000, 269, 58, 129, 85, -1000, -1000, -1000, -1000,
	126, 88, -1000, -5, -60, -1000, 122, -1000, 44, 170,
	86, 269, -65, 269, 124, -1000, 118, -1000, 263, 263,
	-1000, 212, 212, -1000, -1000, -1000, -1000, -1000, 214, 37,
	31, 28, 17, 269, 80, -1000, 175, 269, -1000, -63,
	149, 153, -1000, 188, 98, 10, 52, 269, -1000, -1000,
	-37, 281, -61, 212, -1000, 78, 77, -1000, -1000, 170,
	-1000, -1000, -1000, -1000, 269, 269, 269, -66, 219, -66,
	-1000, -1000, -1000, -1000, 269, 269, 269, 269, 0, -1000,
	-1000, -1000, 100, -1000, 88, 88, -68, 269, -1000, -79,
	151, 82, 269, 33, 264, 50, 251, 95, 269, 90,
	221, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-83, 42, 271, 219, 280, -1000, -83, 41, -1000, -25,
	-1000, 251, 269, 88, -1000, -1000, -1000, -1000, -74, 82,
	16, -1000, 138, 269, 269, -1000, 264, 206, -1000, -1000,
	-1000, -1000, 213, 251, 229, -1000, -39, 87, -1000, 131,
	73, 279, -1000, 39, 269, 219, -1000, -1000, -1000, 253,
	251, -1000, -1000, -1000, 264, 159, -28, -1000, -1000, -1000,
	252, -1000, 142, 141, 140, -1000, 16, -1000, -1000, 99,
	-1000, 136, -1000, -1000, 204, 264, 26, -1000, 229, 251,
	-1000, 161, 269, 269, -1000, 269, -1000, 269, -1000, 271,
	-1000, -1000, 248, -1000, -1000, 212, -74, -1000, -1000, -1000,
	-1000, 269, -44, 25, -1000, 269, -1000, 229, 251, 236,
	-1000, -50, 121, -1000, 138, -1000, -84, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 269, -2, 229, 269, -1000, 212,
	269, 73, -1000, -1000, -1000, -1000, -2, -1000, -1000, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 80, 14, 12, 15, 344, 343, 9, 11, 0,
	4, 343, 342, 341, 205, 208, 340, 339, 338, 337,
	336, 335, 334, 333, 332, 331, 225, 222, 220, 219,
	16, 330, 6, 329, 328, 13, 3, 2, 8, 18,
	327, 5, 326, 1, 325, 324, 323, 322, 321, 320,
	319, 318, 17, 317, 316, 7, 315, 10, 21, 19,
	314, 20, 313, 312, 311, 310, 309, 307, 302, 300,
	299, 296, 294, 293, 292, 288, 92, 287,
}

var yyR1 = [...]int8{
	0, 74, 75, 75, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 11, 11, 11, 10,
	8, 8, 8, 8, 9, 25, 25, 5, 5, 5,
	6, 6, 7, 2, 2, 2, 1, 1, 16, 17,
	58, 58, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 21, 21, 21, 21, 23, 23, 24,
	44, 46, 46, 46, 31, 31, 37, 52, 52, 32,
	32, 33, 33, 38, 34, 34, 36, 36, 50, 50,
	49, 51, 77, 77, 76, 76, 56, 56, 56, 22,
	22, 22, 22, 22, 45, 60, 60, 60, 59, 59,
	61, 61, 18, 18, 63, 26, 54, 54, 53, 53,
	57, 57, 57, 57, 57, 57, 57, 27, 27, 30,
	30, 35, 39, 39, 40, 40, 42, 42, 42, 41,
	41, 43, 43, 3, 3, 3, 3, 4, 4, 28,
	28, 29, 29, 55, 55, 62, 13, 14, 15, 66,
	19, 19, 67, 68, 68, 68, 72, 72, 69, 65,
	64, 47, 48, 70, 71, 71, 73,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 2, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 0, 2, 1, 1,
	1, 0, 2, 4, 2, 4, 3, 4, 3, 3,
	3, 4, 4, 2, 2, 2, 2, 4, 4, 3,
	2, 2, 4, 2, 3, 1, 2, 7, 4, 3,
	0, 3, 1, 2, 2, 0, 2, 0, 1, 2,
	2, 2, 1, 0, 1, 1, 2, 3, 0, 2,
	2, 2, 2, 6, 5, 1, 1, 0, 4, 0,
	3, 0, 5, 5, 2, 3, 3, 0, 3, 1,
	1, 2, 1, 1, 2, 2, 1, 6, 5, 1,
	2, 2, 2, 0, 2, 2, 1, 1, 1, 3,
	0, 3, 0, 1, 1, 1, 2, 1, 3, 9,
	8, 5, 4, 1, 3, 2, 3, 3, 2, 6,
	3, 3, 4, 5, 6, 6, 3, 0, 4, 2,
	1, 2, 4, 5, 3, 3, 4,
}

var yyChk = [...]int16{
	-1000, -74, -12, -21, -22, -23, -24, -20, -63, -62,
	-18, -19, -65, -64, -66, -67, -68, -69, -70, -71,
	-44, -47, -73, -48, -45, 29, 28, 94, 95, 30,
	31, 32, 6, 7, 23, 22, 33, 34, 41, 77,
	24, 25, 39, 84, 87, 86, -75, 17, -26, -27,
	-28, -29, 53, 45, 51, 63, -26, -27, -28, -29,
	42, -77, 88, 96, 96, -14, 51, -13, 45, -15,
	53, 63, 98, 58, 42, -14, 51, -14, -16, 60,
	4, -17, 81, 4, -8, 14, 4, 15, 18, -14,
	-14, -14, -14, 26, 26, -46, -15, 53, 85, 34,
	42, -9, 4, 66, 52, -9, 76, -76, 47, 54,
	-52, 54, 78, 81, 97, 52, 66, -58, 37, 78,
	-9, -9, 99, -9, -76, 47, 52, -1, 8, -1,
	-10, 15, -10, 15, 74, 75, 75, 76, -9, -9,
	78, -49, 40, -51, 38, 39, 98, 48, -54, 46,
	-9, -39, 47, -9, 74, 76, 69, -9, 89, -25,
	4, 97, -10, 78, -9, 78, -9, -58, -9, -9,
	-61, 99, -2, 20, -7, -9, -61, -9, -9, -9,
	-9, 79, 54, -50, -52, -52, 99, -9, 103, -39,
	-30, -35, -40, 46, 67, -9, 74, -4, -3, 14,
	4, 15, 18, 69, -55, -8, -32, 56, -9, 53,
	-32, 13, -59, 108, 73, -5, 4, 10, 9, -2,
	-6, 4, 11, -59, 73, -72, 82, -8, -9, -52,
	-53, -57, 100, 101, 102, 104, -30, -43, -35, 80,
	-41, 49, -9, -9, -4, 12, 27, 15, -55, 12,
	-56, 90, 57, 51, -36, 59, 4, 73, -7, -2,
	21, -8, -4, 43, 44, 83, 12, 49, 49, 49,
	-43, 53, 50, 27, -3, 75, -8, -55, 60, -33,
	-38, -9, -31, -37, -9, -9, -7, -10, -57, -9,
	-42, 91, 92, 93, 75, -9, -55, 12, -34, 94,
	12, -32, -41, -60, 106, 107, -9, -43, -38, -10,
	-37, -36, -43,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 170, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 3, 63, 64,
	65, 66, 0, 0, 0, 0, 99, 100, 101, 102,
	0, 0, 92, 0, 0, 52, 0, 54, 0, 51,
	0, 0, 0, 0, 0, 114, 0, 155, 46, 46,
	48, 0, 0, 49, 169, 30, 31, 32, 0, 0,
	0, 0, 0, 0, 0, 70, 0, 0, 171, 0,
	0, 117, 34, 133, 0, 0, 0, 0, 94, 95,
	0, 0, 0, 0, 69, 0, 0, 56, 50, 51,
	158, 58, 59, 60, 0, 0, 0, 111, 0, 111,
	160, 29, 161, 33, 0, 0, 0, 0, 0, 174,
	175, 71, 0, 73, 0, 0, 0, 0, 115, 0,
	133, 0, 0, 0, 0, 0, 0, 80, 0, 80,
	35, 67, 68, 53, 157, 55, 156, 57, 61, 62,
	109, 0, 47, 0, 0, 42, 109, 0, 162, 167,
	168, 0, 0, 90, 88, 91, 176, 172, 0, 0,
	142, 129, 140, 0, 0, 132, 0, 0, 147, 143,
	144, 145, 0, 0, 152, 153, 98, 0, 104, 0,
	87, 0, 112, 0, 0, 0, 37, 38, 39, 0,
	0, 40, 41, 113, 0, 163, 0, 173, 72, 89,
	116, 119, 120, 122, 123, 126, 142, 128, 130, 0,
	131, 0, 134, 135, 0, 0, 0, 146, 151, 0,
	103, 0, 0, 0, 78, 0, 36, 0, 110, 45,
	43, 44, 159, 164, 165, 0, 0, 121, 124, 125,
	127, 0, 0, 0, 148, 0, 154, 96, 0, 79,
	82, 85, 80, 75, 140, 86, 107, 166, 118, 141,
	139, 136, 137, 138, 0, 142, 97, 0, 83, 0,
	0, 87, 76, 108, 105, 106, 142, 150, 81, 84,
	74, 77, 149,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:273
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:274
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:279
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:283
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:287
		{
			setParseTree(yylex, yyDollar[1].trace)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:291
		{
			setParseTree(yylex, yyDollar[1].stoptrace)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:295
		{
			setParseTree(yylex, yyDollar[1].drop)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:299
		{
			setParseTree(yylex, yyDollar[1].lock)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:303
		{
			setParseTree(yylex, yyDollar[1].unlock)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:307
		{
			setParseTree(yylex, yyDollar[1].show)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:311
		{
			setParseTree(yylex, yyDollar[1].kill)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:315
		{
			setParseTree(yylex, yyDollar[1].listen)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:319
		{
			setParseTree(yylex, yyDollar[1].shutdown)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:323
		{
			setParseTree(yylex, yyDollar[1].split)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:327
		{
			setParseTree(yylex, yyDollar[1].move)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:331
		{
			setParseTree(yylex, yyDollar[1].redistribute)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:335
		{
			setParseTree(yylex, yyDollar[1].unite)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:339
		{
			setParseTree(yylex, yyDollar[1].register_router)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:343
		{
			setParseTree(yylex, yyDollar[1].unregister_router)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:347
		{
			setParseTree(yylex, yyDollar[1].alter)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:351
		{
			setParseTree(yylex, yyDollar[1].invalidate_cache)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:355
		{
			setParseTree(yylex, yyDollar[1].retryMoveTaskGroup)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:359
		{
			setParseTree(yylex, yyDollar[1].sync_reference_tables)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:363
		{
			setParseTree(yylex, yyDollar[1].alter)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:368
		{
			if yyDollar[1].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				yyVAL.integer = int(yyDollar[1].uinteger)
			}
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:375
		{
			if yyDollar[2].uinteger > uint(-math.MinInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				yyVAL.integer = int(-yyDollar[2].uinteger)
			}
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:382
		{
			if yyDollar[2].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				yyVAL.integer = int(yyDollar[2].uinteger)
			}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:392
		{
			yyVAL.uinteger = uint(yyDollar[1].uinteger)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:397
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:401
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:403
		{
			if yyDollar[1].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(yyDollar[1].uinteger))
				yyVAL.str = string(buf)
			}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:412
		{
			if yyDollar[2].uinteger > uint(-math.MinInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(-yyDollar[2].uinteger))
				yyVAL.str = string(buf)
			}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:424
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:430
		{
			yyVAL.qname = &QualifiedName{Name: yyDollar[1].str}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:434
		{
			yyVAL.qname = &QualifiedName{Name: yyDollar[3].str, SchemaName: yyDollar[1].str}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:440
		{
			yyVAL.str = yyDollar[1].str
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:442
		{
			yyVAL.str = "AND"
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:444
		{
			yyVAL.str = "OR"
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:449
		{
			yyVAL.str = yyDollar[1].str
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:451
		{
			yyVAL.str = "="
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:457
		{
			yyVAL.colref = ColumnRef{
				ColName: yyDollar[1].str,
			}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:465
		{
			yyVAL.where = yyDollar[2].where
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:468
		{
			yyVAL.where = WhereClauseLeaf{
				ColRef: yyDollar[1].colref,
				Op:     yyDollar[2].str,
				Value:  yyDollar[3].str,
			}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:476
		{
			yyVAL.where = WhereClauseOp{
				Op:    yyDollar[2].str,
				Left:  yyDollar[1].where,
				Right: yyDollar[3].where,
			}
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:486
		{
			yyVAL.where = WhereClauseEmpty{}
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:490
		{
			yyVAL.where = yyDollar[2].where
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:497
		{
			switch v := strings.ToLower(string(yyDollar[1].str)); v {
			case DatabasesStr, RoutersStr, PoolsStr, InstanceStr, ShardsStr, BackendConnectionsStr, KeyRangesStr, ShardingRules, ClientsStr, StatusStr, DistributionsStr, VersionStr, RelationsStr, ReferenceRelationsStr, TaskGroupStr, PreparedStatementsStr, QuantilesStr, SequencesStr, IsReadOnlyStr, MoveStatsStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:508
		{
			switch v := string(yyDollar[1].str); v {
			case ClientStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:518
		{
			yyVAL.bool = true
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:518
		{
			yyVAL.bool = false
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:522
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].key_range_selector}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:526
		{
			yyVAL.drop = &Drop{Element: &KeyRangeSelector{KeyRangeID: `*`}}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:530
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].sharding_rule_selector}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:534
		{
			yyVAL.drop = &Drop{Element: &ShardingRuleSelector{ID: `*`}}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:538
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].distribution_selector, CascadeDelete: yyDollar[3].bool}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:542
		{
			yyVAL.drop = &Drop{Element: &DistributionSelector{ID: `*`}, CascadeDelete: yyDollar[4].bool}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:546
		{
			yyVAL.drop = &Drop{Element: &ShardSelector{ID: yyDollar[3].str}}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:550
		{
			yyVAL.drop = &Drop{Element: &TaskGroupSelector{}}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:554
		{
			yyVAL.drop = &Drop{Element: &SequenceSelector{Name: yyDollar[3].str}}
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:558
		{
			yyVAL.drop = &Drop{
				Element: &ReferenceRelationSelector{
					ID: yyDollar[4].str,
				},
			}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:566
		{
			yyVAL.drop = &Drop{
				Element: &ReferenceRelationSelector{
					ID: yyDollar[4].str,
				},
			}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:577
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:582
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:587
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:591
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:597
		{
			yyVAL.trace = &TraceStmt{All: true}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:600
		{
			yyVAL.trace = &TraceStmt{
				Client: yyDollar[4].uinteger,
			}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:608
		{
			yyVAL.stoptrace = &StopTraceStmt{}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:614
		{
			yyVAL.alter = &Alter{Element: yyDollar[2].alter_distribution}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:620
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AttachRelation{
					Distribution: yyDollar[1].distribution_selector,
					Relations:    yyDollar[2].relations,
				},
			}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:629
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &DetachRelation{
					Distribution: yyDollar[1].distribution_selector,
					RelationName: yyDollar[4].str,
				},
			}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:638
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AlterRelation{
					Distribution: yyDollar[1].distribution_selector,
					Relation:     yyDollar[2].distributed_relation,
				},
			}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:650
		{
			yyVAL.dEntrieslist = append(yyDollar[1].dEntrieslist, yyDollar[3].distrKeyEntry)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:652
		{
			yyVAL.dEntrieslist = []DistributionKeyEntry{
				yyDollar[1].distrKeyEntry,
			}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:662
		{
			yyVAL.distrKeyEntry = DistributionKeyEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 77:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:671
		{
			if len(yyDollar[2].qname.SchemaName) > 0 && len(yyDollar[7].str) > 0 {
				yylex.Error("it is forbidden to use both a qualified relation name and the keyword SCHEMA")
				return 1
			} else if len(yyDollar[2].qname.SchemaName) > 0 {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.Name,
					DistributionKey:      yyDollar[5].dEntrieslist,
					AutoIncrementEntries: yyDollar[6].aiEntrieslist,
					SchemaName:           yyDollar[2].qname.SchemaName,
				}
			} else {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.Name,
					DistributionKey:      yyDollar[5].dEntrieslist,
					AutoIncrementEntries: yyDollar[6].aiEntrieslist,
					SchemaName:           yyDollar[7].str,
				}
			}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:692
		{
			if len(yyDollar[2].qname.SchemaName) > 0 && len(yyDollar[4].str) > 0 {
				yylex.Error("it is forbidden to use both a qualified relation name and the keyword SCHEMA")
				return 1
			} else if len(yyDollar[2].qname.SchemaName) > 0 {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.Name,
					ReplicatedRelation:   true,
					AutoIncrementEntries: yyDollar[3].aiEntrieslist,
					SchemaName:           yyDollar[2].qname.SchemaName,
				}
			} else {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.Name,
					ReplicatedRelation:   true,
					AutoIncrementEntries: yyDollar[3].aiEntrieslist,
					SchemaName:           yyDollar[4].str,
				}
			}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:714
		{
			yyVAL.aiEntrieslist = yyDollar[3].aiEntrieslist
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:716
		{
			yyVAL.aiEntrieslist = nil
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:722
		{
			yyVAL.aiEntrieslist = append(yyDollar[1].aiEntrieslist, yyDollar[3].aiEntry)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:724
		{
			yyVAL.aiEntrieslist = []*AutoIncrementEntry{
				yyDollar[1].aiEntry,
			}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:732
		{
			yyVAL.aiEntry = &AutoIncrementEntry{
				Column: yyDollar[1].str,
				Start:  uint64(yyDollar[2].uinteger),
			}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:741
		{
			yyVAL.uinteger = yyDollar[2].uinteger
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:743
		{
			yyVAL.uinteger = 0
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:748
		{
			yyVAL.str = yyDollar[2].str
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:750
		{
			yyVAL.str = ""
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:755
		{
			yyVAL.relations = []*DistributedRelation{yyDollar[1].distributed_relation}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:757
		{
			yyVAL.relations = append(yyDollar[1].relations, yyDollar[2].distributed_relation)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:762
		{
			yyVAL.relations = yyDollar[2].relations
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:767
		{
			yyVAL.distributed_relation = yyDollar[2].distributed_relation
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:772
		{
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:775
		{
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:775
		{
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:779
		{
			yyVAL.strlist = yyDollar[2].strlist
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:780
		{
			yyVAL.strlist = yyDollar[3].strlist
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:780
		{
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:784
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:789
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:794
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:799
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:804
		{
			yyVAL.create = &Create{
				Element: &ReferenceRelationDefinition{
					TableName:            yyDollar[4].str,
					AutoIncrementEntries: yyDollar[5].aiEntrieslist,
					ShardIds:             yyDollar[6].strlist,
				},
			}
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:816
		{
			yyVAL.alter = &Alter{
				Element: &AlterDistribution{
					Element: &AttachRelation{
						Distribution: &DistributionSelector{ID: yyDollar[5].str},
						Relations:    []*DistributedRelation{yyDollar[3].distributed_relation},
					},
				},
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:828
		{
			yyVAL.opt_asc_desc = &SortByAsc{}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:829
		{
			yyVAL.opt_asc_desc = &SortByDesc{}
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:830
		{
			yyVAL.opt_asc_desc = &SortByDefault{}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:834
		{
			yyVAL.order_clause = &Order{Col: yyDollar[3].colref, OptAscDesc: yyDollar[4].opt_asc_desc}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:837
		{
			yyVAL.order_clause = OrderClause(nil)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:842
		{
			yyVAL.group_clause = GroupBy{Col: yyDollar[3].colref}
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:845
		{
			yyVAL.group_clause = GroupByClauseEmpty{}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:850
		{
			yyVAL.show = &Show{Cmd: yyDollar[2].str, Where: yyDollar[3].where, GroupBy: yyDollar[4].group_clause, Order: yyDollar[5].order_clause}
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:852
		{
			yyVAL.show = &Show{Cmd: ShardsStr, Where: yyDollar[3].where, GroupBy: yyDollar[4].group_clause, Order: yyDollar[5].order_clause}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:857
		{
			yyVAL.lock = &Lock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:865
		{
			yyVAL.ds = &DistributionDefinition{
				ID:       yyDollar[2].str,
				ColTypes: yyDollar[3].strlist,
			}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:873
		{
			yyVAL.strlist = yyDollar[3].strlist
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:875
		{
			/* empty column types should be prohibited */
			yyVAL.strlist = nil
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:881
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:883
		{
			yyVAL.strlist = []string{
				yyDollar[1].str,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:890
		{
			yyVAL.str = "varchar"
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:892
		{
			yyVAL.str = "varchar hashed"
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:894
		{
			yyVAL.str = "integer"
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:896
		{
			yyVAL.str = "integer"
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:898
		{
			yyVAL.str = "uinteger"
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:900
		{
			yyVAL.str = "uinteger"
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:902
		{
			yyVAL.str = "uuid"
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:908
		{
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: yyDollar[3].str, TableName: yyDollar[4].str, Entries: yyDollar[5].entrieslist, Distribution: yyDollar[6].str}
		}
	case 128:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:913
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: "shrule" + str, TableName: yyDollar[3].str, Entries: yyDollar[4].entrieslist, Distribution: yyDollar[5].str}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:922
		{
			yyVAL.entrieslist = make([]ShardingRuleEntry, 0)
			yyVAL.entrieslist = append(yyVAL.entrieslist, yyDollar[1].shruleEntry)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:928
		{
			yyVAL.entrieslist = append(yyDollar[1].entrieslist, yyDollar[2].shruleEntry)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:934
		{
			yyVAL.shruleEntry = ShardingRuleEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:943
		{
			yyVAL.str = yyDollar[2].str
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:946
		{
			yyVAL.str = ""
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:950
		{
			yyVAL.str = yyDollar[2].str
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:955
		{
			yyVAL.str = yyDollar[2].str
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:961
		{
			yyVAL.str = "identity"
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:963
		{
			yyVAL.str = "murmur"
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:965
		{
			yyVAL.str = "city"
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:971
		{
			yyVAL.str = yyDollar[3].str
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:973
		{
			yyVAL.str = ""
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:978
		{
			yyVAL.str = yyDollar[3].str
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:980
		{
			yyVAL.str = "default"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:986
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:990
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:992
		{
			if yyDollar[1].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(yyDollar[1].uinteger))
				yyVAL.bytes = buf
			}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1001
		{
			if yyDollar[2].uinteger > uint(-math.MinInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(-yyDollar[2].uinteger))
				yyVAL.bytes = buf
			}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1013
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: [][]byte{
					yyDollar[1].bytes,
				},
			}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1020
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: append(yyDollar[1].krbound.Pivots, yyDollar[3].bytes),
			}
		}
	case 149:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:1029
		{
			yyVAL.kr = &KeyRangeDefinition{
				KeyRangeID:   yyDollar[3].str,
				LowerBound:   yyDollar[5].krbound,
				ShardID:      yyDollar[8].str,
				Distribution: yyDollar[9].str,
			}
		}
	case 150:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:1038
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.kr = &KeyRangeDefinition{
				LowerBound:   yyDollar[4].krbound,
				ShardID:      yyDollar[7].str,
				Distribution: yyDollar[8].str,
				KeyRangeID:   "kr" + str,
			}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1053
		{
			yyVAL.shard = &ShardDefinition{Id: yyDollar[2].str, Hosts: yyDollar[5].strlist}
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1058
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.shard = &ShardDefinition{Id: "shard" + str, Hosts: yyDollar[4].strlist}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1068
		{
			yyVAL.strlist = []string{yyDollar[1].str}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1073
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1079
		{
			yyVAL.unlock = &Unlock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1085
		{
			yyVAL.sharding_rule_selector = &ShardingRuleSelector{ID: yyDollar[3].str}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1091
		{
			yyVAL.key_range_selector = &KeyRangeSelector{KeyRangeID: yyDollar[3].str}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1097
		{
			yyVAL.distribution_selector = &DistributionSelector{ID: yyDollar[2].str}
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1103
		{
			yyVAL.split = &SplitKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeFromID: yyDollar[4].str, Border: yyDollar[6].krbound}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1109
		{
			yyVAL.kill = &Kill{Cmd: yyDollar[2].str, Target: yyDollar[3].uinteger}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1112
		{
			yyVAL.kill = &Kill{Cmd: "client", Target: yyDollar[3].uinteger}
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1118
		{
			yyVAL.move = &MoveKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str}
		}
	case 163:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1124
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Check: true, Apply: true}
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1126
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Check: true}
		}
	case 165:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1128
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Apply: true}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1132
		{
			yyVAL.opt_batch_size = int(yyDollar[3].uinteger)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:1133
		{
			yyVAL.opt_batch_size = -1
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1137
		{
			yyVAL.unite = &UniteKeyRange{KeyRangeIDL: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeIDR: yyDollar[4].str}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1143
		{
			yyVAL.listen = &Listen{addr: yyDollar[2].str}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1149
		{
			yyVAL.shutdown = &Shutdown{}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1155
		{
			yyVAL.invalidate_cache = &InvalidateCache{}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1161
		{
			yyVAL.sync_reference_tables = &SyncReferenceTables{ShardID: yyDollar[4].str}
		}
	case 173:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1169
		{
			yyVAL.register_router = &RegisterRouter{ID: yyDollar[3].str, Addr: yyDollar[5].str}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1175
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: yyDollar[3].str}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1180
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: `*`}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1188
		{
			yyVAL.retryMoveTaskGroup = &RetryMoveTaskGroup{}
		}
	}
	goto yystack /* stack new state and value */
}
