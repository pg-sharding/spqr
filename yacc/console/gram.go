// Code generated by goyacc -o gram.go -p yy gram.y. DO NOT EDIT.

//line gram.y:3
package spqrparser

import __yyfmt__ "fmt"

//line gram.y:3

import (
	"crypto/rand"
	"encoding/binary"
	"encoding/hex"
	"github.com/pg-sharding/spqr/qdb"
	"github.com/pg-sharding/spqr/router/rfqn"
	"math"
	"strings"
)

const SIGNED_INT_RANGE_ERROR string = "the Signed Value should be at the range of [-9223372036854775808, 9223372036854775807]."

func randomHex(n int) (string, error) {
	bytes := make([]byte, n)
	if _, err := rand.Read(bytes); err != nil {
		return "", err
	}
	return hex.EncodeToString(bytes), nil
}

//line gram.y:28
type yySymType struct {
	yys          int
	str          string
	strlist      []string
	byte         byte
	bytes        []byte
	integer      int
	uinteger     uint
	uintegerlist []uint
	bool         bool
	empty        struct{}

	set       *Set
	statement Statement
	show      *Show

	drop   *Drop
	create *Create

	kill   *Kill
	lock   *Lock
	unlock *Unlock

	krbound *KeyRangeBound

	qname         *rfqn.RelationFQN
	ds            *DistributionDefinition
	kr            *KeyRangeDefinition
	shard         *ShardDefinition
	sharding_rule *ShardingRuleDefinition

	register_router   *RegisterRouter
	unregister_router *UnregisterRouter

	split *SplitKeyRange
	move  *MoveKeyRange
	unite *UniteKeyRange

	redistribute *RedistributeKeyRange

	invalidate            *Invalidate
	sync_reference_tables *SyncReferenceTables

	shutdown *Shutdown
	listen   *Listen

	trace     *TraceStmt
	stoptrace *StopTraceStmt

	distribution *DistributionDefinition

	alter                *Alter
	alter_distribution   *AlterDistribution
	distributed_relation *DistributedRelation
	alter_default_shard  *AlterDefaultShard

	relations    []*DistributedRelation
	relation     *DistributedRelation
	entrieslist  []ShardingRuleEntry
	dEntrieslist []DistributionKeyEntry

	shruleEntry ShardingRuleEntry

	distrKeyEntry DistributionKeyEntry
	aiEntry       *AutoIncrementEntry

	sharding_rule_selector *ShardingRuleSelector
	key_range_selector     *KeyRangeSelector
	distribution_selector  *DistributionSelector
	aiEntrieslist          []*AutoIncrementEntry

	colref     ColumnRef
	colreflist []ColumnRef
	where      WhereClauseNode

	order_clause OrderClause
	opt_asc_desc OptAscDesc

	group_clause GroupByClause

	retryMoveTaskGroup *RetryMoveTaskGroup
	stopMoveTaskGroup  *StopMoveTaskGroup

	typedColRef TypedColRef
	routingExpr []TypedColRef

	alter_relation *AlterRelationV2
}

const IDENT = 57346
const COMMAND = 57347
const SHOW = 57348
const KILL = 57349
const WHERE = 57350
const OR = 57351
const AND = 57352
const TEQ = 57353
const TCOMMA = 57354
const TDOT = 57355
const SCONST = 57356
const ICONST = 57357
const INVALID_ICONST = 57358
const TSEMICOLON = 57359
const TMINUS = 57360
const TPLUS = 57361
const TOPENBR = 57362
const TCLOSEBR = 57363
const TOPENSQBR = 57364
const TCLOSESQBR = 57365
const SHUTDOWN = 57366
const LISTEN = 57367
const REGISTER = 57368
const UNREGISTER = 57369
const ROUTER = 57370
const ROUTE = 57371
const CREATE = 57372
const ADD = 57373
const DROP = 57374
const LOCK = 57375
const UNLOCK = 57376
const SPLIT = 57377
const MOVE = 57378
const COMPOSE = 57379
const SET = 57380
const CASCADE = 57381
const ATTACH = 57382
const ALTER = 57383
const DETACH = 57384
const REDISTRIBUTE = 57385
const REFERENCE = 57386
const CHECK = 57387
const APPLY = 57388
const SHARDING = 57389
const COLUMN = 57390
const TABLE = 57391
const TABLES = 57392
const RELATIONS = 57393
const BACKENDS = 57394
const HASH = 57395
const FUNCTION = 57396
const KEY = 57397
const RANGE = 57398
const DISTRIBUTION = 57399
const RELATION = 57400
const REPLICATED = 57401
const AUTO = 57402
const INCREMENT = 57403
const SEQUENCE = 57404
const SCHEMA = 57405
const SHARDS = 57406
const KEY_RANGES = 57407
const ROUTERS = 57408
const SHARD = 57409
const HOST = 57410
const SHARDING_RULES = 57411
const RULE = 57412
const COLUMNS = 57413
const VERSION = 57414
const HOSTS = 57415
const SEQUENCES = 57416
const IS_READ_ONLY = 57417
const MOVE_STATS = 57418
const BY = 57419
const FROM = 57420
const TO = 57421
const WITH = 57422
const UNITE = 57423
const ALL = 57424
const ADDRESS = 57425
const FOR = 57426
const CLIENT = 57427
const BATCH = 57428
const SIZE = 57429
const INVALIDATE = 57430
const CACHE = 57431
const SYNC = 57432
const RETRY = 57433
const DISTRIBUTED = 57434
const IN = 57435
const ON = 57436
const DEFAULT = 57437
const IDENTITY = 57438
const MURMUR = 57439
const CITY = 57440
const START = 57441
const STOP = 57442
const TRACE = 57443
const MESSAGES = 57444
const TASK = 57445
const GROUP = 57446
const VARCHAR = 57447
const INTEGER = 57448
const INT = 57449
const TYPES = 57450
const UUID = 57451
const OP = 57452
const ASC = 57453
const DESC = 57454
const ORDER = 57455

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"COMMAND",
	"SHOW",
	"KILL",
	"WHERE",
	"OR",
	"AND",
	"TEQ",
	"TCOMMA",
	"TDOT",
	"SCONST",
	"ICONST",
	"INVALID_ICONST",
	"TSEMICOLON",
	"TMINUS",
	"TPLUS",
	"TOPENBR",
	"TCLOSEBR",
	"TOPENSQBR",
	"TCLOSESQBR",
	"SHUTDOWN",
	"LISTEN",
	"REGISTER",
	"UNREGISTER",
	"ROUTER",
	"ROUTE",
	"CREATE",
	"ADD",
	"DROP",
	"LOCK",
	"UNLOCK",
	"SPLIT",
	"MOVE",
	"COMPOSE",
	"SET",
	"CASCADE",
	"ATTACH",
	"ALTER",
	"DETACH",
	"REDISTRIBUTE",
	"REFERENCE",
	"CHECK",
	"APPLY",
	"SHARDING",
	"COLUMN",
	"TABLE",
	"TABLES",
	"RELATIONS",
	"BACKENDS",
	"HASH",
	"FUNCTION",
	"KEY",
	"RANGE",
	"DISTRIBUTION",
	"RELATION",
	"REPLICATED",
	"AUTO",
	"INCREMENT",
	"SEQUENCE",
	"SCHEMA",
	"SHARDS",
	"KEY_RANGES",
	"ROUTERS",
	"SHARD",
	"HOST",
	"SHARDING_RULES",
	"RULE",
	"COLUMNS",
	"VERSION",
	"HOSTS",
	"SEQUENCES",
	"IS_READ_ONLY",
	"MOVE_STATS",
	"BY",
	"FROM",
	"TO",
	"WITH",
	"UNITE",
	"ALL",
	"ADDRESS",
	"FOR",
	"CLIENT",
	"BATCH",
	"SIZE",
	"INVALIDATE",
	"CACHE",
	"SYNC",
	"RETRY",
	"DISTRIBUTED",
	"IN",
	"ON",
	"DEFAULT",
	"IDENTITY",
	"MURMUR",
	"CITY",
	"START",
	"STOP",
	"TRACE",
	"MESSAGES",
	"TASK",
	"GROUP",
	"VARCHAR",
	"INTEGER",
	"INT",
	"TYPES",
	"UUID",
	"OP",
	"ASC",
	"DESC",
	"ORDER",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:1316

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 418

var yyAct = [...]int16{
	194, 347, 260, 285, 344, 175, 139, 193, 286, 322,
	229, 227, 268, 289, 221, 228, 191, 214, 119, 220,
	172, 213, 166, 128, 350, 351, 211, 237, 66, 242,
	241, 242, 241, 261, 262, 263, 206, 264, 190, 246,
	116, 33, 34, 297, 181, 158, 133, 125, 106, 157,
	124, 89, 179, 123, 109, 64, 341, 114, 210, 36,
	35, 41, 42, 202, 201, 27, 26, 30, 31, 32,
	37, 38, 110, 280, 131, 132, 43, 134, 39, 290,
	291, 292, 111, 77, 257, 207, 71, 156, 216, 176,
	302, 88, 249, 65, 69, 67, 73, 110, 177, 146,
	147, 76, 110, 131, 199, 121, 74, 111, 122, 110,
	110, 217, 111, 165, 168, 107, 40, 170, 135, 111,
	111, 110, 145, 44, 176, 46, 45, 183, 185, 180,
	240, 111, 240, 177, 28, 29, 188, 183, 245, 336,
	105, 178, 75, 195, 196, 197, 198, 61, 317, 160,
	54, 104, 144, 110, 186, 143, 187, 219, 55, 142,
	53, 208, 293, 111, 290, 291, 292, 247, 218, 238,
	56, 216, 87, 204, 226, 184, 325, 103, 233, 258,
	182, 82, 171, 127, 112, 253, 115, 148, 212, 252,
	54, 91, 345, 281, 217, 63, 230, 304, 55, 130,
	53, 90, 92, 305, 120, 93, 235, 117, 256, 243,
	56, 117, 161, 162, 205, 250, 118, 271, 272, 266,
	118, 251, 254, 200, 230, 232, 255, 169, 83, 102,
	136, 267, 126, 283, 265, 113, 287, 332, 277, 273,
	284, 85, 314, 234, 79, 270, 295, 311, 310, 309,
	84, 320, 110, 303, 167, 164, 296, 108, 306, 307,
	298, 72, 111, 300, 301, 152, 153, 299, 129, 274,
	274, 312, 99, 98, 154, 155, 150, 328, 48, 52,
	51, 68, 323, 267, 50, 287, 315, 275, 324, 316,
	361, 363, 319, 110, 318, 49, 326, 167, 140, 276,
	327, 329, 364, 111, 231, 101, 333, 60, 59, 331,
	141, 334, 58, 78, 80, 110, 325, 278, 337, 94,
	95, 96, 97, 57, 339, 111, 287, 335, 274, 348,
	330, 192, 338, 287, 343, 342, 353, 308, 352, 138,
	323, 282, 91, 357, 223, 313, 362, 360, 359, 358,
	159, 365, 90, 92, 222, 224, 93, 355, 225, 173,
	366, 62, 47, 1, 348, 367, 23, 356, 22, 174,
	346, 248, 19, 18, 17, 16, 15, 14, 12, 13,
	8, 9, 189, 349, 236, 209, 279, 163, 259, 151,
	203, 149, 24, 21, 100, 25, 20, 269, 215, 288,
	340, 321, 6, 5, 4, 3, 7, 11, 10, 86,
	81, 70, 2, 354, 294, 244, 239, 137,
}

var yyPact = [...]int16{
	35, -1000, 261, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 143, 103, -46, -8,
	39, 189, 189, 177, 87, 338, -1000, 189, 189, 189,
	189, 245, 244, 172, 88, 12, 213, -1000, -1000, -1000,
	-1000, -1000, -1000, 289, 114, 179, 106, -1000, -1000, -1000,
	-1000, 158, 146, -1000, 23, -49, -53, -57, -1000, 176,
	-1000, 113, 229, 117, 289, -58, 289, 158, -1000, 174,
	-1000, 331, -1000, -1000, -1000, -1000, 283, -1000, -1000, -1000,
	-1000, -1000, -1000, 295, 81, 76, 73, 42, 289, 105,
	-1000, 234, 289, -1000, -2, -1000, -54, -59, 162, 207,
	-1000, -1000, 248, 149, 37, 109, 355, -1000, -1000, 5,
	355, -50, 283, -1000, -60, -1000, 98, 93, -1000, -1000,
	229, -1000, 229, -1000, -1000, 289, 289, -66, 311, -1000,
	-1000, -1000, 289, 289, 289, 289, 21, -1000, -1000, -1000,
	165, -1000, -31, -32, 146, 156, -1000, -68, -1000, -9,
	289, -1000, -1000, -37, -82, 205, 123, 289, 79, 340,
	101, 338, 136, 291, -1000, -1000, 168, 289, 186, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -86,
	92, 20, 311, 28, -1000, 90, -1000, 6, -1000, 338,
	355, 122, 118, 146, -1000, 355, -1000, 289, -10, -1000,
	112, -72, 123, 40, -1000, 192, 289, 289, -1000, 340,
	258, -1000, -1000, -1000, -1000, 284, 338, 305, -1000, -21,
	132, 337, 289, -1000, 185, 68, -1000, 85, 289, 311,
	-1000, -1000, -1000, 22, 338, -1000, -1000, 340, 218, 3,
	-1000, -1000, 289, -1000, -1000, 140, -1000, 289, 289, 325,
	-1000, 196, 195, 194, -1000, 40, -1000, -1000, -1000, -1000,
	188, -1000, -1000, 257, 340, 69, -1000, 305, 338, -1000,
	187, 289, -1000, -1000, 68, 164, -1000, 192, -1000, 255,
	-1000, -1000, -1000, 289, 318, -1000, 20, -1000, -1000, 316,
	-1000, -1000, 283, -1000, 182, 289, -1000, -1000, -72, -1000,
	-1000, -1000, -1000, -17, -1000, 60, -1000, 289, -1000, 305,
	338, 312, -1000, -43, 164, 68, 129, -1000, 289, -87,
	289, -1000, 68, -1000, -1000, -1000, 353, 5, 305, 289,
	-1000, 283, 129, -1000, 269, 289, 279, -1000, -72, -1000,
	-1000, -1000, -1000, 304, 5, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 289, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 417, 16, 14, 19, 416, 415, 7, 414, 15,
	0, 413, 6, 412, 411, 281, 261, 410, 409, 408,
	407, 406, 405, 404, 403, 402, 20, 295, 284, 280,
	279, 21, 3, 10, 401, 400, 17, 4, 5, 8,
	399, 9, 22, 398, 12, 397, 13, 396, 395, 394,
	393, 392, 391, 390, 18, 389, 388, 387, 11, 386,
	2, 23, 385, 384, 383, 382, 381, 380, 379, 378,
	377, 376, 375, 374, 373, 372, 371, 1, 370, 368,
	366, 363, 362, 40, 361, 350, 345,
}

var yyR1 = [...]int8{
	0, 81, 82, 82, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 12, 9, 9,
	9, 9, 10, 10, 11, 11, 26, 26, 26, 5,
	5, 5, 6, 6, 7, 8, 8, 2, 2, 2,
	1, 1, 17, 17, 17, 17, 18, 18, 61, 61,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	22, 22, 22, 22, 24, 24, 25, 47, 49, 49,
	49, 49, 49, 32, 32, 77, 78, 78, 40, 39,
	39, 54, 54, 33, 33, 34, 34, 41, 35, 35,
	37, 37, 53, 53, 52, 55, 55, 84, 84, 83,
	83, 85, 85, 59, 59, 59, 23, 23, 23, 23,
	23, 38, 38, 38, 48, 64, 64, 64, 63, 63,
	65, 65, 19, 67, 27, 57, 57, 56, 56, 60,
	60, 60, 60, 60, 60, 60, 62, 62, 28, 28,
	31, 31, 36, 42, 42, 43, 43, 46, 46, 46,
	86, 86, 45, 44, 44, 3, 3, 3, 3, 4,
	4, 29, 29, 30, 30, 58, 58, 66, 14, 15,
	16, 70, 20, 71, 72, 72, 72, 76, 76, 73,
	69, 68, 50, 50, 50, 51, 51, 74, 75, 75,
	79, 79, 80, 80,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 3, 1, 3, 3, 3,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 4, 2, 4, 3, 4, 4, 3, 3, 4,
	2, 2, 2, 2, 4, 4, 3, 2, 2, 4,
	2, 5, 4, 3, 1, 2, 1, 3, 4, 2,
	1, 7, 7, 3, 0, 3, 1, 2, 2, 0,
	2, 0, 1, 2, 2, 6, 5, 1, 0, 1,
	1, 1, 1, 2, 3, 0, 2, 2, 2, 2,
	6, 3, 2, 0, 4, 1, 1, 0, 4, 0,
	3, 0, 5, 2, 4, 3, 0, 3, 1, 1,
	2, 1, 1, 2, 2, 1, 3, 0, 6, 5,
	1, 2, 2, 2, 0, 2, 2, 1, 1, 1,
	1, 0, 3, 1, 0, 1, 1, 1, 2, 1,
	3, 9, 8, 5, 4, 1, 3, 2, 3, 3,
	2, 6, 3, 4, 5, 6, 6, 3, 0, 4,
	2, 1, 2, 3, 2, 5, 6, 5, 3, 3,
	4, 3, 4, 3,
}

var yyChk = [...]int16{
	-1000, -81, -13, -22, -23, -24, -25, -21, -67, -66,
	-19, -20, -69, -68, -70, -71, -72, -73, -74, -75,
	-47, -50, -79, -80, -51, -48, 31, 30, 99, 100,
	32, 33, 34, 6, 7, 25, 24, 35, 36, 43,
	81, 26, 27, 41, 88, 91, 90, -82, 17, -27,
	-28, -29, -30, 57, 47, 55, 67, -27, -28, -29,
	-30, 44, -84, 92, 101, 101, 36, 103, -15, 55,
	-14, 47, -16, 57, 67, 103, 62, 44, -15, 55,
	-15, -17, 4, 51, 73, 64, -18, 85, 4, -9,
	14, 4, 15, 18, -15, -15, -15, -15, 28, 28,
	-49, -16, 57, 89, 63, 52, 36, 103, 44, -10,
	4, 14, 70, 56, -10, 80, -83, 49, 58, -54,
	58, 82, 85, 102, 103, 104, 56, 70, -61, 39,
	82, -10, -10, 104, -10, -83, 56, -1, 8, -12,
	15, 15, 78, 79, 79, 80, -10, -10, 82, -52,
	42, -55, 31, 32, 40, 41, 89, 103, 104, -85,
	-83, 50, 51, -57, 48, -10, -42, 49, -10, 78,
	80, 73, -26, 4, 14, -38, 84, 93, -26, 102,
	-12, 104, 82, -10, 82, -10, -61, -61, -10, -65,
	104, -2, 20, -7, -10, -10, -10, -10, -10, 83,
	58, 95, 95, -53, -54, 58, 104, 94, -10, -62,
	95, 108, -42, -31, -36, -43, 48, 71, -10, 78,
	-4, -3, 14, 4, 15, 18, 73, -58, -9, -33,
	60, 13, 57, -10, 57, 20, -63, 113, 77, -5,
	110, 10, 9, -2, -6, 110, 11, 77, -76, 86,
	-9, -26, 67, 67, -54, -26, -10, 94, 67, -56,
	-60, 105, 106, 107, 109, -31, -38, -36, -44, -45,
	53, -10, -10, -4, 12, 29, 15, -58, 12, -59,
	94, 61, 4, -10, 55, -32, -39, -10, -40, -46,
	96, 97, 98, 77, -8, -7, -2, 21, -9, -4,
	45, 46, 87, -10, 57, 63, -10, -10, 12, 53,
	53, 53, -38, -86, 54, 29, -3, 79, -9, -58,
	64, -34, -41, -10, -32, 12, -33, -44, 22, -7,
	12, -12, 55, -10, -60, -46, 79, -10, -58, 12,
	-35, 99, -33, -39, -37, 63, -78, -77, -10, -64,
	111, 112, -7, -32, -11, 4, 14, -38, -41, -12,
	-37, 21, -10, 12, 23, -60, -38, -77,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1, 3, 70,
	71, 72, 73, 0, 0, 0, 0, 116, 117, 118,
	119, 0, 0, 107, 0, 0, 0, 0, 60, 0,
	62, 0, 59, 0, 0, 0, 0, 0, 133, 0,
	177, 50, 52, 53, 54, 55, 0, 56, 57, 190,
	28, 29, 30, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 0, 192, 0, 194, 0, 0, 0, 136,
	32, 33, 154, 0, 0, 0, 0, 109, 110, 123,
	0, 0, 0, 76, 0, 203, 0, 0, 64, 58,
	59, 180, 59, 67, 68, 0, 0, 131, 0, 182,
	27, 31, 0, 0, 0, 0, 0, 198, 199, 78,
	0, 80, 0, 0, 0, 0, 193, 0, 201, 0,
	0, 111, 112, 147, 0, 154, 0, 0, 0, 0,
	0, 0, 94, 36, 37, 124, 0, 0, 0, 74,
	75, 202, 61, 179, 63, 178, 65, 66, 69, 129,
	0, 51, 0, 0, 44, 0, 183, 188, 189, 0,
	0, 0, 0, 104, 102, 0, 200, 0, 0, 134,
	0, 0, 0, 123, 150, 164, 0, 0, 153, 0,
	0, 169, 165, 166, 167, 0, 0, 174, 175, 115,
	0, 0, 0, 122, 0, 0, 132, 0, 0, 0,
	39, 40, 41, 0, 0, 42, 43, 0, 184, 0,
	197, 79, 0, 82, 103, 0, 195, 0, 0, 135,
	138, 139, 141, 142, 145, 123, 149, 151, 152, 163,
	161, 155, 156, 0, 0, 0, 168, 173, 0, 120,
	0, 0, 38, 121, 0, 94, 84, 164, 90, 0,
	157, 158, 159, 0, 130, 46, 49, 47, 48, 181,
	185, 186, 0, 81, 0, 0, 196, 146, 0, 140,
	143, 144, 148, 0, 160, 0, 170, 0, 176, 113,
	0, 93, 96, 99, 94, 0, 101, 89, 0, 127,
	0, 187, 0, 106, 137, 162, 0, 123, 114, 0,
	97, 0, 101, 83, 0, 0, 0, 86, 0, 128,
	125, 126, 45, 105, 123, 34, 35, 172, 95, 98,
	91, 92, 100, 0, 88, 85, 171, 87,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:288
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:289
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:294
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:298
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:302
		{
			setParseTree(yylex, yyDollar[1].trace)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:306
		{
			setParseTree(yylex, yyDollar[1].stoptrace)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:310
		{
			setParseTree(yylex, yyDollar[1].drop)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:314
		{
			setParseTree(yylex, yyDollar[1].lock)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:318
		{
			setParseTree(yylex, yyDollar[1].unlock)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:322
		{
			setParseTree(yylex, yyDollar[1].show)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:326
		{
			setParseTree(yylex, yyDollar[1].kill)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:330
		{
			setParseTree(yylex, yyDollar[1].listen)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:334
		{
			setParseTree(yylex, yyDollar[1].shutdown)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:338
		{
			setParseTree(yylex, yyDollar[1].split)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:342
		{
			setParseTree(yylex, yyDollar[1].move)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:346
		{
			setParseTree(yylex, yyDollar[1].redistribute)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:350
		{
			setParseTree(yylex, yyDollar[1].unite)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:354
		{
			setParseTree(yylex, yyDollar[1].register_router)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:358
		{
			setParseTree(yylex, yyDollar[1].unregister_router)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:362
		{
			setParseTree(yylex, yyDollar[1].alter)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:366
		{
			setParseTree(yylex, yyDollar[1].invalidate)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:370
		{
			setParseTree(yylex, yyDollar[1].retryMoveTaskGroup)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:374
		{
			setParseTree(yylex, yyDollar[1].stopMoveTaskGroup)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:378
		{
			setParseTree(yylex, yyDollar[1].sync_reference_tables)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:382
		{
			setParseTree(yylex, yyDollar[1].alter)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:387
		{
			yyVAL.uinteger = uint(yyDollar[1].uinteger)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:392
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:396
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:398
		{
			if yyDollar[1].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(yyDollar[1].uinteger))
				yyVAL.str = string(buf)
			}
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:407
		{
			if yyDollar[2].uinteger > uint(-math.MinInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(-yyDollar[2].uinteger))
				yyVAL.str = string(buf)
			}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:419
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:422
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:428
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:431
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:437
		{
			yyVAL.qname = &rfqn.RelationFQN{RelationName: yyDollar[1].str}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:441
		{
			yyVAL.qname = &rfqn.RelationFQN{RelationName: yyDollar[1].str}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:445
		{
			yyVAL.qname = &rfqn.RelationFQN{RelationName: yyDollar[3].str, SchemaName: yyDollar[1].str}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:451
		{
			yyVAL.str = yyDollar[1].str
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:453
		{
			yyVAL.str = "AND"
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:455
		{
			yyVAL.str = "OR"
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:460
		{
			yyVAL.str = yyDollar[1].str
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:462
		{
			yyVAL.str = "="
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:468
		{
			yyVAL.colref = ColumnRef{
				ColName: yyDollar[1].str,
			}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:476
		{
			yyVAL.colreflist = append(yyDollar[1].colreflist, yyDollar[3].colref)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:478
		{
			yyVAL.colreflist = []ColumnRef{
				yyDollar[1].colref,
			}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:486
		{
			yyVAL.where = yyDollar[2].where
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:489
		{
			yyVAL.where = WhereClauseLeaf{
				ColRef: yyDollar[1].colref,
				Op:     yyDollar[2].str,
				Value:  yyDollar[3].str,
			}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:497
		{
			yyVAL.where = WhereClauseOp{
				Op:    yyDollar[2].str,
				Left:  yyDollar[1].where,
				Right: yyDollar[3].where,
			}
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:507
		{
			yyVAL.where = WhereClauseEmpty{}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:511
		{
			yyVAL.where = yyDollar[2].where
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:518
		{
			switch v := strings.ToLower(string(yyDollar[1].str)); v {
			case DatabasesStr, RoutersStr, PoolsStr, InstanceStr, ShardsStr, BackendConnectionsStr, KeyRangesStr, ShardingRules, ClientsStr, StatusStr, DistributionsStr, CoordinatorAddrStr, VersionStr, ReferenceRelationsStr, TaskGroupStr, PreparedStatementsStr, QuantilesStr, SequencesStr, IsReadOnlyStr, MoveStatsStr, TsaCacheStr, Users, MoveTaskStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:525
		{
			yyVAL.str = yyDollar[1].str
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:527
		{
			yyVAL.str = yyDollar[1].str
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:529
		{
			yyVAL.str = yyDollar[1].str
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:535
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:539
		{
			switch v := string(yyDollar[1].str); v {
			case BackendStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:549
		{
			yyVAL.bool = true
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:549
		{
			yyVAL.bool = false
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:553
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].key_range_selector}
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:557
		{
			yyVAL.drop = &Drop{Element: &KeyRangeSelector{KeyRangeID: `*`}}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:561
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].sharding_rule_selector}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:565
		{
			yyVAL.drop = &Drop{Element: &ShardingRuleSelector{ID: `*`}}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:569
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].distribution_selector, CascadeDelete: yyDollar[3].bool}
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:573
		{
			yyVAL.drop = &Drop{Element: &DistributionSelector{ID: `*`}, CascadeDelete: yyDollar[4].bool}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:577
		{
			yyVAL.drop = &Drop{Element: &ShardSelector{ID: yyDollar[3].str}, CascadeDelete: yyDollar[4].bool}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:581
		{
			yyVAL.drop = &Drop{Element: &TaskGroupSelector{}}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:585
		{
			yyVAL.drop = &Drop{Element: &SequenceSelector{Name: yyDollar[3].str}}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:589
		{
			yyVAL.drop = &Drop{
				Element: &ReferenceRelationSelector{
					ID: yyDollar[4].str,
				},
			}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:600
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:605
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:610
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:614
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:620
		{
			yyVAL.trace = &TraceStmt{All: true}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:623
		{
			yyVAL.trace = &TraceStmt{
				Client: yyDollar[4].uinteger,
			}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:631
		{
			yyVAL.stoptrace = &StopTraceStmt{}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:637
		{
			yyVAL.alter = &Alter{Element: yyDollar[2].alter_distribution}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:643
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Distribution: yyDollar[1].distribution_selector,
				Element: &AttachRelation{
					Relations: yyDollar[2].relations,
				},
			}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:652
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Distribution: yyDollar[1].distribution_selector,
				Element: &DetachRelation{
					RelationName: yyDollar[4].qname,
				},
			}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:661
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Distribution: yyDollar[1].distribution_selector,
				Element:      yyDollar[2].alter_relation,
			}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:668
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Distribution: yyDollar[1].distribution_selector,
				Element: &AlterDefaultShard{
					Shard: yyDollar[5].str,
				},
			}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:677
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Distribution: yyDollar[1].distribution_selector,
				Element:      &DropDefaultShard{},
			}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:687
		{
			yyVAL.dEntrieslist = append(yyDollar[1].dEntrieslist, yyDollar[3].distrKeyEntry)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:689
		{
			yyVAL.dEntrieslist = []DistributionKeyEntry{
				yyDollar[1].distrKeyEntry,
			}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:696
		{
			yyVAL.typedColRef = TypedColRef{
				Column: yyDollar[1].str,
				Type:   yyDollar[2].str,
			}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:705
		{
			yyVAL.routingExpr = []TypedColRef{yyDollar[1].typedColRef}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:707
		{
			yyVAL.routingExpr = append(yyDollar[1].routingExpr, yyDollar[3].typedColRef)
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:712
		{
			yyVAL.distrKeyEntry = DistributionKeyEntry{
				HashFunction: yyDollar[1].str,
				Expr:         yyDollar[3].routingExpr,
			}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:721
		{
			yyVAL.distrKeyEntry = DistributionKeyEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:726
		{
			yyVAL.distrKeyEntry = yyDollar[1].distrKeyEntry
		}
	case 91:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:732
		{
			if len(yyDollar[2].qname.SchemaName) > 0 && len(yyDollar[7].str) > 0 {
				yylex.Error("it is forbidden to use both a qualified relation name and the keyword SCHEMA")
				return 1
			} else if len(yyDollar[2].qname.SchemaName) > 0 {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.RelationName,
					DistributionKey:      yyDollar[5].dEntrieslist,
					AutoIncrementEntries: yyDollar[6].aiEntrieslist,
					SchemaName:           yyDollar[2].qname.SchemaName,
				}
			} else {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.RelationName,
					DistributionKey:      yyDollar[5].dEntrieslist,
					AutoIncrementEntries: yyDollar[6].aiEntrieslist,
					SchemaName:           yyDollar[7].str,
				}
			}
		}
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:753
		{
			if len(yyDollar[2].qname.SchemaName) > 0 && len(yyDollar[7].str) > 0 {
				yylex.Error("it is forbidden to use both a qualified relation name and the keyword SCHEMA")
				return 1
			} else if len(yyDollar[2].qname.SchemaName) > 0 {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.RelationName,
					DistributionKey:      yyDollar[4].dEntrieslist,
					AutoIncrementEntries: yyDollar[5].aiEntrieslist,
					SchemaName:           yyDollar[2].qname.SchemaName,
				}
			} else {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.RelationName,
					DistributionKey:      yyDollar[4].dEntrieslist,
					AutoIncrementEntries: yyDollar[5].aiEntrieslist,
					SchemaName:           yyDollar[6].str,
				}
			}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:775
		{
			yyVAL.aiEntrieslist = yyDollar[3].aiEntrieslist
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:777
		{
			yyVAL.aiEntrieslist = nil
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:783
		{
			yyVAL.aiEntrieslist = append(yyDollar[1].aiEntrieslist, yyDollar[3].aiEntry)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:785
		{
			yyVAL.aiEntrieslist = []*AutoIncrementEntry{
				yyDollar[1].aiEntry,
			}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:793
		{
			yyVAL.aiEntry = &AutoIncrementEntry{
				Column: yyDollar[1].str,
				Start:  uint64(yyDollar[2].uinteger),
			}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:802
		{
			yyVAL.uinteger = yyDollar[2].uinteger
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:804
		{
			yyVAL.uinteger = 0
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:809
		{
			yyVAL.str = yyDollar[2].str
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:811
		{
			yyVAL.str = ""
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:816
		{
			yyVAL.relations = []*DistributedRelation{yyDollar[1].distributed_relation}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:818
		{
			yyVAL.relations = append(yyDollar[1].relations, yyDollar[2].distributed_relation)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:823
		{
			yyVAL.relations = yyDollar[2].relations
		}
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:828
		{
			yyVAL.alter_relation = &AlterRelationV2{
				RelationName: yyDollar[3].qname.RelationName,
				Element: &AlterRelationDistributionKey{
					DistributionKey: yyDollar[6].dEntrieslist,
				},
			}
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:836
		{
			yyVAL.alter_relation = &AlterRelationV2{
				RelationName: yyDollar[3].qname.RelationName,
				Element: &AlterRelationSchema{
					SchemaName: yyDollar[5].str,
				},
			}
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:846
		{
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:849
		{
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:849
		{
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:852
		{
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:852
		{
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:856
		{
			yyVAL.strlist = yyDollar[2].strlist
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:857
		{
			yyVAL.strlist = yyDollar[3].strlist
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:857
		{
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:861
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:866
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:871
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:876
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 120:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:881
		{
			yyVAL.create = &Create{
				Element: &ReferenceRelationDefinition{
					TableName:            yyDollar[4].qname,
					AutoIncrementEntries: yyDollar[5].aiEntrieslist,
					ShardIds:             yyDollar[6].strlist,
				},
			}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:892
		{
			yyVAL.distribution_selector = &DistributionSelector{ID: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:895
		{
			yyVAL.distribution_selector = &DistributionSelector{ID: yyDollar[2].str}
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:897
		{
			yyVAL.distribution_selector = &DistributionSelector{ID: "default"}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:903
		{
			yyVAL.alter = &Alter{
				Element: &AlterDistribution{
					Distribution: yyDollar[4].distribution_selector,
					Element: &AttachRelation{
						Relations: []*DistributedRelation{yyDollar[3].distributed_relation},
					},
				},
			}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:915
		{
			yyVAL.opt_asc_desc = &SortByAsc{}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:916
		{
			yyVAL.opt_asc_desc = &SortByDesc{}
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:917
		{
			yyVAL.opt_asc_desc = &SortByDefault{}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:921
		{
			yyVAL.order_clause = &Order{Col: yyDollar[3].colref, OptAscDesc: yyDollar[4].opt_asc_desc}
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:924
		{
			yyVAL.order_clause = OrderClause(nil)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:929
		{
			yyVAL.group_clause = GroupBy{Col: yyDollar[3].colreflist}
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:932
		{
			yyVAL.group_clause = GroupByClauseEmpty{}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:937
		{
			yyVAL.show = &Show{Cmd: yyDollar[2].str, Where: yyDollar[3].where, GroupBy: yyDollar[4].group_clause, Order: yyDollar[5].order_clause}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:943
		{
			yyVAL.lock = &Lock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:951
		{
			yyVAL.ds = &DistributionDefinition{
				ID:           yyDollar[2].str,
				ColTypes:     yyDollar[3].strlist,
				DefaultShard: yyDollar[4].str,
			}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:960
		{
			yyVAL.strlist = yyDollar[3].strlist
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:962
		{
			/* empty column types should be prohibited */
			yyVAL.strlist = nil
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:968
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:970
		{
			yyVAL.strlist = []string{
				yyDollar[1].str,
			}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:977
		{
			yyVAL.str = qdb.ColumnTypeVarchar
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:979
		{
			yyVAL.str = qdb.ColumnTypeVarcharHashed
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:981
		{
			yyVAL.str = qdb.ColumnTypeInteger
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:983
		{
			yyVAL.str = qdb.ColumnTypeInteger
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:985
		{
			yyVAL.str = qdb.ColumnTypeUinteger
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:987
		{
			yyVAL.str = qdb.ColumnTypeUinteger
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:989
		{
			yyVAL.str = qdb.ColumnTypeUUID
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:994
		{
			yyVAL.str = yyDollar[3].str
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:996
		{
			yyVAL.str = ""
		}
	case 148:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1002
		{
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1006
		{
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1010
		{
			yyVAL.entrieslist = make([]ShardingRuleEntry, 0)
			yyVAL.entrieslist = append(yyVAL.entrieslist, yyDollar[1].shruleEntry)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1016
		{
			yyVAL.entrieslist = append(yyDollar[1].entrieslist, yyDollar[2].shruleEntry)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1022
		{
			yyVAL.shruleEntry = ShardingRuleEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1031
		{
			yyVAL.str = yyDollar[2].str
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:1034
		{
			yyVAL.str = ""
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1038
		{
			yyVAL.str = yyDollar[2].str
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1043
		{
			yyVAL.str = yyDollar[2].str
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1049
		{
			yyVAL.str = "identity"
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1051
		{
			yyVAL.str = "murmur"
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1053
		{
			yyVAL.str = "city"
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1058
		{
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:1058
		{
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1062
		{
			yyVAL.str = yyDollar[3].str
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1067
		{
			yyVAL.str = yyDollar[1].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:1069
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1075
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1079
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1081
		{
			if yyDollar[1].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(yyDollar[1].uinteger))
				yyVAL.bytes = buf
			}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1090
		{
			if yyDollar[2].uinteger > uint(-math.MinInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(-yyDollar[2].uinteger))
				yyVAL.bytes = buf
			}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1102
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: [][]byte{
					yyDollar[1].bytes,
				},
			}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1109
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: append(yyDollar[1].krbound.Pivots, yyDollar[3].bytes),
			}
		}
	case 171:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:1118
		{
			yyVAL.kr = &KeyRangeDefinition{
				KeyRangeID:   yyDollar[3].str,
				LowerBound:   yyDollar[5].krbound,
				ShardID:      yyDollar[8].str,
				Distribution: yyDollar[9].distribution_selector,
			}
		}
	case 172:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:1127
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.kr = &KeyRangeDefinition{
				LowerBound:   yyDollar[4].krbound,
				ShardID:      yyDollar[7].str,
				Distribution: yyDollar[8].distribution_selector,
				KeyRangeID:   "kr" + str,
			}
		}
	case 173:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1142
		{
			yyVAL.shard = &ShardDefinition{Id: yyDollar[2].str, Hosts: yyDollar[5].strlist}
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1147
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.shard = &ShardDefinition{Id: "shard" + str, Hosts: yyDollar[4].strlist}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1157
		{
			yyVAL.strlist = []string{yyDollar[1].str}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1162
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1168
		{
			yyVAL.unlock = &Unlock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1174
		{
			yyVAL.sharding_rule_selector = &ShardingRuleSelector{ID: yyDollar[3].str}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1180
		{
			yyVAL.key_range_selector = &KeyRangeSelector{KeyRangeID: yyDollar[3].str}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1186
		{
			yyVAL.distribution_selector = &DistributionSelector{ID: yyDollar[2].str}
		}
	case 181:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1192
		{
			yyVAL.split = &SplitKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeFromID: yyDollar[4].str, Border: yyDollar[6].krbound}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1198
		{
			yyVAL.kill = &Kill{Cmd: yyDollar[2].str, Target: yyDollar[3].uinteger}
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1205
		{
			yyVAL.move = &MoveKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str}
		}
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1211
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].integer, Check: true, Apply: true}
		}
	case 185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1213
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].integer, Check: true}
		}
	case 186:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1215
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].integer, Apply: true}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1219
		{
			yyVAL.integer = int(yyDollar[3].uinteger)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:1220
		{
			yyVAL.integer = -1
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1224
		{
			yyVAL.unite = &UniteKeyRange{KeyRangeIDL: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeIDR: yyDollar[4].str}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1230
		{
			yyVAL.listen = &Listen{addr: yyDollar[2].str}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1236
		{
			yyVAL.shutdown = &Shutdown{}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1242
		{
			yyVAL.invalidate = &Invalidate{
				Target: SchemaCacheInvalidateTarget,
			}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1247
		{
			yyVAL.invalidate = &Invalidate{
				Target: SchemaCacheInvalidateTarget,
			}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1252
		{
			yyVAL.invalidate = &Invalidate{
				Target: BackendConnectionsInvalidateTarget,
			}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1260
		{
			yyVAL.sync_reference_tables = &SyncReferenceTables{
				ShardID:          yyDollar[5].str,
				RelationSelector: "*",
			}
		}
	case 196:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1266
		{
			yyVAL.sync_reference_tables = &SyncReferenceTables{
				ShardID:          yyDollar[6].str,
				RelationSelector: yyDollar[4].str,
			}
		}
	case 197:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1277
		{
			yyVAL.register_router = &RegisterRouter{ID: yyDollar[3].str, Addr: yyDollar[5].str}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1283
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: yyDollar[3].str}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1288
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: `*`}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1296
		{
			yyVAL.retryMoveTaskGroup = &RetryMoveTaskGroup{}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1301
		{
			yyVAL.retryMoveTaskGroup = &RetryMoveTaskGroup{}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1308
		{
			yyVAL.stopMoveTaskGroup = &StopMoveTaskGroup{}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1313
		{
			yyVAL.stopMoveTaskGroup = &StopMoveTaskGroup{}
		}
	}
	goto yystack /* stack new state and value */
}
