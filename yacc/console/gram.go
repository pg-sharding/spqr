// Code generated by goyacc -o gram.go -p yy gram.y. DO NOT EDIT.

//line gram.y:3
package spqrparser

import __yyfmt__ "fmt"

//line gram.y:3

import (
	"crypto/rand"
	"encoding/binary"
	"encoding/hex"
	"github.com/pg-sharding/spqr/qdb"
	"math"
	"strings"
)

const SIGNED_INT_RANGE_ERROR string = "the Signed Value should be at the range of [-9223372036854775808, 9223372036854775807]."

func randomHex(n int) (string, error) {
	bytes := make([]byte, n)
	if _, err := rand.Read(bytes); err != nil {
		return "", err
	}
	return hex.EncodeToString(bytes), nil
}

//line gram.y:27
type yySymType struct {
	yys          int
	str          string
	strlist      []string
	byte         byte
	bytes        []byte
	integer      int
	uinteger     uint
	uintegerlist []uint
	bool         bool
	empty        struct{}

	set       *Set
	statement Statement
	show      *Show

	drop   *Drop
	create *Create

	kill   *Kill
	lock   *Lock
	unlock *Unlock

	krbound *KeyRangeBound

	ds            *DistributionDefinition
	kr            *KeyRangeDefinition
	shard         *ShardDefinition
	sharding_rule *ShardingRuleDefinition

	register_router   *RegisterRouter
	unregister_router *UnregisterRouter

	split *SplitKeyRange
	move  *MoveKeyRange
	unite *UniteKeyRange

	redistribute *RedistributeKeyRange

	invalidate_cache      *InvalidateCache
	sync_reference_tables *SyncReferenceTables

	shutdown *Shutdown
	listen   *Listen

	trace     *TraceStmt
	stoptrace *StopTraceStmt

	distribution *DistributionDefinition

	alter                *Alter
	alter_distribution   *AlterDistribution
	distributed_relation *DistributedRelation
	alter_default_shard  *AlterDefaultShard

	relations    []*DistributedRelation
	relation     *DistributedRelation
	entrieslist  []ShardingRuleEntry
	dEntrieslist []DistributionKeyEntry

	shruleEntry ShardingRuleEntry

	distrKeyEntry DistributionKeyEntry
	aiEntry       *AutoIncrementEntry

	sharding_rule_selector *ShardingRuleSelector
	key_range_selector     *KeyRangeSelector
	distribution_selector  *DistributionSelector
	aiEntrieslist          []*AutoIncrementEntry

	colref ColumnRef
	where  WhereClauseNode

	order_clause OrderClause
	opt_asc_desc OptAscDesc

	group_clause GroupByClause

	opt_batch_size int

	retryMoveTaskGroup *RetryMoveTaskGroup
}

const IDENT = 57346
const COMMAND = 57347
const SHOW = 57348
const KILL = 57349
const WHERE = 57350
const OR = 57351
const AND = 57352
const TEQ = 57353
const TCOMMA = 57354
const SCONST = 57355
const ICONST = 57356
const INVALID_ICONST = 57357
const TSEMICOLON = 57358
const TMINUS = 57359
const TPLUS = 57360
const TOPENBR = 57361
const TCLOSEBR = 57362
const SHUTDOWN = 57363
const LISTEN = 57364
const REGISTER = 57365
const UNREGISTER = 57366
const ROUTER = 57367
const ROUTE = 57368
const CREATE = 57369
const ADD = 57370
const DROP = 57371
const LOCK = 57372
const UNLOCK = 57373
const SPLIT = 57374
const MOVE = 57375
const COMPOSE = 57376
const SET = 57377
const CASCADE = 57378
const ATTACH = 57379
const ALTER = 57380
const DETACH = 57381
const REDISTRIBUTE = 57382
const REFERENCE = 57383
const CHECK = 57384
const APPLY = 57385
const SHARDING = 57386
const COLUMN = 57387
const TABLE = 57388
const TABLES = 57389
const HASH = 57390
const FUNCTION = 57391
const KEY = 57392
const RANGE = 57393
const DISTRIBUTION = 57394
const RELATION = 57395
const REPLICATED = 57396
const AUTO = 57397
const INCREMENT = 57398
const SEQUENCE = 57399
const SCHEMA = 57400
const SHARDS = 57401
const KEY_RANGES = 57402
const ROUTERS = 57403
const SHARD = 57404
const HOST = 57405
const SHARDING_RULES = 57406
const RULE = 57407
const COLUMNS = 57408
const VERSION = 57409
const HOSTS = 57410
const SEQUENCES = 57411
const IS_READ_ONLY = 57412
const MOVE_STATS = 57413
const BY = 57414
const FROM = 57415
const TO = 57416
const WITH = 57417
const UNITE = 57418
const ALL = 57419
const ADDRESS = 57420
const FOR = 57421
const CLIENT = 57422
const BATCH = 57423
const SIZE = 57424
const INVALIDATE = 57425
const CACHE = 57426
const SYNC = 57427
const RETRY = 57428
const DISTRIBUTED = 57429
const IN = 57430
const ON = 57431
const DEFAULT = 57432
const IDENTITY = 57433
const MURMUR = 57434
const CITY = 57435
const START = 57436
const STOP = 57437
const TRACE = 57438
const MESSAGES = 57439
const TASK = 57440
const GROUP = 57441
const VARCHAR = 57442
const INTEGER = 57443
const INT = 57444
const TYPES = 57445
const UUID = 57446
const OP = 57447
const ASC = 57448
const DESC = 57449
const ORDER = 57450

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"COMMAND",
	"SHOW",
	"KILL",
	"WHERE",
	"OR",
	"AND",
	"TEQ",
	"TCOMMA",
	"SCONST",
	"ICONST",
	"INVALID_ICONST",
	"TSEMICOLON",
	"TMINUS",
	"TPLUS",
	"TOPENBR",
	"TCLOSEBR",
	"SHUTDOWN",
	"LISTEN",
	"REGISTER",
	"UNREGISTER",
	"ROUTER",
	"ROUTE",
	"CREATE",
	"ADD",
	"DROP",
	"LOCK",
	"UNLOCK",
	"SPLIT",
	"MOVE",
	"COMPOSE",
	"SET",
	"CASCADE",
	"ATTACH",
	"ALTER",
	"DETACH",
	"REDISTRIBUTE",
	"REFERENCE",
	"CHECK",
	"APPLY",
	"SHARDING",
	"COLUMN",
	"TABLE",
	"TABLES",
	"HASH",
	"FUNCTION",
	"KEY",
	"RANGE",
	"DISTRIBUTION",
	"RELATION",
	"REPLICATED",
	"AUTO",
	"INCREMENT",
	"SEQUENCE",
	"SCHEMA",
	"SHARDS",
	"KEY_RANGES",
	"ROUTERS",
	"SHARD",
	"HOST",
	"SHARDING_RULES",
	"RULE",
	"COLUMNS",
	"VERSION",
	"HOSTS",
	"SEQUENCES",
	"IS_READ_ONLY",
	"MOVE_STATS",
	"BY",
	"FROM",
	"TO",
	"WITH",
	"UNITE",
	"ALL",
	"ADDRESS",
	"FOR",
	"CLIENT",
	"BATCH",
	"SIZE",
	"INVALIDATE",
	"CACHE",
	"SYNC",
	"RETRY",
	"DISTRIBUTED",
	"IN",
	"ON",
	"DEFAULT",
	"IDENTITY",
	"MURMUR",
	"CITY",
	"START",
	"STOP",
	"TRACE",
	"MESSAGES",
	"TASK",
	"GROUP",
	"VARCHAR",
	"INTEGER",
	"INT",
	"TYPES",
	"UUID",
	"OP",
	"ASC",
	"DESC",
	"ORDER",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:1181

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 352

var yyAct = [...]int16{
	176, 244, 290, 261, 130, 247, 211, 209, 287, 175,
	238, 210, 203, 196, 173, 202, 195, 110, 216, 153,
	117, 171, 311, 312, 193, 217, 239, 240, 241, 74,
	242, 189, 68, 172, 122, 148, 162, 114, 66, 64,
	70, 63, 306, 32, 33, 73, 84, 298, 299, 300,
	71, 192, 185, 101, 258, 160, 105, 98, 35, 34,
	40, 41, 271, 198, 26, 25, 29, 30, 31, 36,
	37, 120, 121, 145, 123, 42, 230, 38, 83, 127,
	246, 146, 147, 142, 199, 112, 72, 132, 113, 182,
	102, 102, 157, 102, 138, 139, 102, 246, 120, 137,
	60, 102, 107, 53, 152, 155, 301, 282, 159, 54,
	102, 52, 161, 39, 136, 135, 165, 167, 163, 201,
	43, 55, 45, 44, 134, 169, 170, 165, 263, 228,
	218, 27, 28, 208, 144, 178, 179, 180, 181, 158,
	168, 116, 103, 86, 236, 234, 62, 184, 80, 198,
	190, 177, 85, 87, 82, 200, 88, 262, 307, 129,
	212, 213, 106, 166, 187, 188, 164, 259, 215, 140,
	199, 125, 194, 214, 119, 53, 212, 124, 109, 156,
	108, 54, 111, 52, 232, 233, 183, 109, 278, 223,
	97, 126, 115, 55, 231, 260, 227, 76, 285, 249,
	250, 212, 104, 79, 235, 279, 248, 276, 275, 245,
	274, 243, 102, 149, 154, 151, 255, 251, 269, 270,
	100, 69, 118, 99, 252, 252, 51, 94, 264, 50,
	93, 49, 48, 86, 265, 220, 267, 272, 280, 253,
	222, 221, 85, 87, 268, 277, 88, 131, 47, 65,
	254, 266, 102, 59, 154, 133, 58, 245, 57, 56,
	288, 291, 205, 292, 96, 281, 284, 174, 283, 256,
	61, 204, 206, 293, 304, 207, 294, 252, 273, 296,
	75, 77, 128, 302, 295, 220, 89, 90, 91, 92,
	222, 221, 225, 303, 102, 46, 308, 309, 1, 226,
	22, 229, 313, 19, 314, 288, 18, 17, 291, 16,
	317, 316, 318, 315, 15, 319, 14, 12, 13, 8,
	9, 310, 191, 257, 150, 237, 143, 186, 141, 23,
	21, 95, 24, 20, 297, 197, 305, 286, 289, 6,
	5, 4, 3, 7, 11, 10, 81, 78, 67, 2,
	224, 219,
}

var yyPact = [...]int16{
	37, -1000, 232, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 131, 59, -55, -57, -12,
	147, 147, 144, 74, 229, -1000, 147, 147, 147, 147,
	205, 202, 138, -27, 190, 179, -1000, -1000, -1000, -1000,
	-1000, -1000, 290, 77, 151, 87, -1000, -1000, -1000, -1000,
	134, 129, -1000, 8, -60, -1000, 141, -1000, 76, 186,
	97, 290, -65, 290, 125, -1000, 140, -1000, 274, 274,
	-1000, 233, 233, -1000, -1000, -1000, -1000, -1000, 241, 51,
	41, 40, 24, 290, 92, -1000, 44, 290, -1000, -63,
	166, 170, -1000, 208, 106, 17, 71, 290, -1000, -1000,
	-33, 290, -61, 233, -1000, 89, 86, -1000, -1000, 186,
	-1000, -1000, -1000, -1000, 290, 290, 290, -66, 248, -66,
	-1000, -1000, -1000, -1000, 290, 290, 290, 290, 11, -1000,
	-1000, -1000, 133, -1000, 85, -38, 129, 129, -68, 290,
	-39, -79, 168, 104, 290, 46, 258, 65, 229, 105,
	290, 121, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -83, 58, 281, 248, 288, -1000, -83, 57, -1000,
	-5, -1000, 229, 290, 290, 83, 129, -1000, -1000, -1000,
	-1000, -1000, 82, -74, 104, 18, -1000, 158, 290, 290,
	-1000, 258, 213, -1000, -1000, -1000, -1000, 236, 229, 257,
	-1000, -35, 111, -1000, 145, 99, -1000, 56, 290, 248,
	-1000, -1000, -1000, 231, 229, -1000, -1000, -1000, 258, 176,
	-20, -1000, -1000, -1000, -1000, -1000, 290, 266, -1000, 162,
	160, 159, -1000, 18, -1000, -1000, 136, -1000, 156, -1000,
	-1000, 212, 258, 33, -1000, 257, 229, -1000, 139, 290,
	290, -1000, 290, 290, -1000, 281, -1000, -1000, 265, -1000,
	-1000, 233, -1000, -74, -1000, -1000, -1000, -1000, 290, -44,
	32, -1000, 290, -1000, 257, 229, 262, -1000, -52, 146,
	-1000, 158, -1000, -84, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 290, 1, 257, 290, -1000, 233, 290, 99, -1000,
	-1000, -1000, -1000, 1, -1000, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 79, 14, 12, 15, 351, 350, 9, 11, 0,
	4, 350, 349, 348, 249, 221, 347, 346, 345, 344,
	343, 342, 341, 340, 339, 232, 231, 229, 226, 16,
	338, 6, 337, 336, 13, 3, 2, 8, 19, 335,
	5, 334, 1, 333, 332, 331, 330, 329, 328, 327,
	326, 17, 325, 324, 7, 323, 10, 20, 322, 18,
	321, 21, 320, 319, 318, 317, 316, 314, 309, 307,
	306, 303, 301, 300, 298, 295, 102, 270,
}

var yyR1 = [...]int8{
	0, 74, 75, 75, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 11, 11, 11, 10,
	8, 8, 8, 8, 9, 5, 5, 5, 6, 6,
	7, 2, 2, 2, 1, 1, 16, 17, 57, 57,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 21, 21, 21, 21, 23, 23, 24, 43, 45,
	45, 45, 45, 45, 30, 30, 36, 51, 51, 31,
	31, 32, 32, 37, 33, 33, 35, 35, 49, 49,
	48, 50, 77, 77, 76, 76, 55, 55, 55, 22,
	22, 22, 22, 22, 44, 60, 60, 60, 59, 59,
	61, 61, 18, 18, 63, 25, 53, 53, 52, 52,
	56, 56, 56, 56, 56, 56, 56, 58, 58, 26,
	26, 29, 29, 34, 38, 38, 39, 39, 41, 41,
	41, 40, 40, 42, 42, 3, 3, 3, 3, 4,
	4, 27, 27, 28, 28, 54, 54, 62, 13, 14,
	15, 66, 19, 19, 67, 68, 68, 68, 72, 72,
	69, 65, 64, 46, 47, 70, 71, 71, 73,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 0, 2, 1, 1, 1, 0,
	2, 4, 2, 4, 3, 4, 3, 3, 3, 4,
	4, 2, 2, 2, 2, 4, 4, 3, 2, 2,
	4, 2, 4, 4, 3, 1, 2, 7, 4, 3,
	0, 3, 1, 2, 2, 0, 2, 0, 1, 2,
	2, 2, 1, 0, 1, 1, 2, 3, 0, 2,
	2, 2, 2, 6, 5, 1, 1, 0, 4, 0,
	3, 0, 5, 5, 2, 4, 3, 0, 3, 1,
	1, 2, 1, 1, 2, 2, 1, 3, 0, 6,
	5, 1, 2, 2, 2, 0, 2, 2, 1, 1,
	1, 3, 0, 3, 0, 1, 1, 1, 2, 1,
	3, 9, 8, 5, 4, 1, 3, 2, 3, 3,
	2, 6, 3, 3, 4, 5, 6, 6, 3, 0,
	4, 2, 1, 2, 4, 5, 3, 3, 4,
}

var yyChk = [...]int16{
	-1000, -74, -12, -21, -22, -23, -24, -20, -63, -62,
	-18, -19, -65, -64, -66, -67, -68, -69, -70, -71,
	-43, -46, -73, -47, -44, 28, 27, 94, 95, 29,
	30, 31, 6, 7, 22, 21, 32, 33, 40, 76,
	23, 24, 38, 83, 86, 85, -75, 16, -25, -26,
	-27, -28, 52, 44, 50, 62, -25, -26, -27, -28,
	41, -77, 87, 96, 96, -14, 50, -13, 44, -15,
	52, 62, 98, 57, 41, -14, 50, -14, -16, 59,
	4, -17, 80, 4, -8, 13, 4, 14, 17, -14,
	-14, -14, -14, 25, 25, -45, -15, 52, 84, 33,
	41, -9, 4, 65, 51, -9, 75, -76, 46, 53,
	-51, 53, 77, 80, 97, 51, 65, -57, 36, 77,
	-9, -9, 99, -9, -76, 46, 51, -1, 8, -1,
	-10, 14, -10, 14, 73, 74, 74, 75, -9, -9,
	77, -48, 39, -50, 90, 29, 37, 38, 98, 47,
	-53, 45, -9, -38, 46, -9, 73, 75, 68, -9,
	88, -9, 97, -10, 77, -9, 77, -9, -57, -9,
	-9, -61, 99, -2, 19, -7, -9, -61, -9, -9,
	-9, -9, 78, 53, 62, 90, -49, -51, -51, 99,
	-9, -58, 90, 103, -38, -29, -34, -39, 45, 66,
	-9, 73, -4, -3, 13, 4, 14, 17, 68, -54,
	-8, -31, 55, -9, 52, -31, -59, 108, 72, -5,
	4, 10, 9, -2, -6, 4, 11, -59, 72, -72,
	81, -8, -9, -9, 62, -51, 62, -52, -56, 100,
	101, 102, 104, -29, -42, -34, 79, -40, 48, -9,
	-9, -4, 12, 26, 14, -54, 12, -55, 89, 56,
	50, -35, 58, 72, -7, -2, 20, -8, -4, 42,
	43, 82, -9, 12, 48, 48, 48, -42, 52, 49,
	26, -3, 74, -8, -54, 59, -32, -37, -9, -30,
	-36, -9, -9, -7, -10, -56, -9, -41, 91, 92,
	93, 74, -9, -54, 12, -33, 94, 12, -31, -40,
	-60, 106, 107, -9, -42, -37, -10, -36, -35, -42,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 3, 61, 62,
	63, 64, 0, 0, 0, 0, 99, 100, 101, 102,
	0, 0, 92, 0, 0, 50, 0, 52, 0, 49,
	0, 0, 0, 0, 0, 114, 0, 157, 44, 44,
	46, 0, 0, 47, 171, 30, 31, 32, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 0, 173, 0,
	0, 117, 34, 135, 0, 0, 0, 0, 94, 95,
	0, 0, 0, 0, 67, 0, 0, 54, 48, 49,
	160, 56, 57, 58, 0, 0, 0, 111, 0, 111,
	162, 29, 163, 33, 0, 0, 0, 0, 0, 176,
	177, 69, 0, 71, 0, 0, 0, 0, 0, 0,
	128, 0, 135, 0, 0, 0, 0, 0, 0, 80,
	0, 80, 65, 66, 51, 159, 53, 158, 55, 59,
	60, 109, 0, 45, 0, 0, 40, 109, 0, 164,
	169, 170, 0, 0, 0, 0, 90, 88, 91, 178,
	174, 115, 0, 0, 0, 144, 131, 142, 0, 0,
	134, 0, 0, 149, 145, 146, 147, 0, 0, 154,
	155, 98, 0, 104, 0, 87, 112, 0, 0, 0,
	35, 36, 37, 0, 0, 38, 39, 113, 0, 165,
	0, 175, 70, 72, 73, 89, 0, 116, 119, 120,
	122, 123, 126, 144, 130, 132, 0, 133, 0, 136,
	137, 0, 0, 0, 148, 153, 0, 103, 0, 0,
	0, 78, 0, 0, 110, 43, 41, 42, 161, 166,
	167, 0, 127, 0, 121, 124, 125, 129, 0, 0,
	0, 150, 0, 156, 96, 0, 79, 82, 85, 80,
	75, 142, 86, 107, 168, 118, 143, 141, 138, 139,
	140, 0, 144, 97, 0, 83, 0, 0, 87, 76,
	108, 105, 106, 144, 152, 81, 84, 74, 77, 151,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:274
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:275
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:280
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:284
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:288
		{
			setParseTree(yylex, yyDollar[1].trace)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:292
		{
			setParseTree(yylex, yyDollar[1].stoptrace)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:296
		{
			setParseTree(yylex, yyDollar[1].drop)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:300
		{
			setParseTree(yylex, yyDollar[1].lock)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:304
		{
			setParseTree(yylex, yyDollar[1].unlock)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:308
		{
			setParseTree(yylex, yyDollar[1].show)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:312
		{
			setParseTree(yylex, yyDollar[1].kill)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:316
		{
			setParseTree(yylex, yyDollar[1].listen)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:320
		{
			setParseTree(yylex, yyDollar[1].shutdown)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:324
		{
			setParseTree(yylex, yyDollar[1].split)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:328
		{
			setParseTree(yylex, yyDollar[1].move)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:332
		{
			setParseTree(yylex, yyDollar[1].redistribute)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:336
		{
			setParseTree(yylex, yyDollar[1].unite)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:340
		{
			setParseTree(yylex, yyDollar[1].register_router)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:344
		{
			setParseTree(yylex, yyDollar[1].unregister_router)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:348
		{
			setParseTree(yylex, yyDollar[1].alter)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:352
		{
			setParseTree(yylex, yyDollar[1].invalidate_cache)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:356
		{
			setParseTree(yylex, yyDollar[1].retryMoveTaskGroup)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:360
		{
			setParseTree(yylex, yyDollar[1].sync_reference_tables)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:364
		{
			setParseTree(yylex, yyDollar[1].alter)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:369
		{
			if yyDollar[1].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				yyVAL.integer = int(yyDollar[1].uinteger)
			}
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:376
		{
			if yyDollar[2].uinteger > uint(-math.MinInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				yyVAL.integer = int(-yyDollar[2].uinteger)
			}
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:383
		{
			if yyDollar[2].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				yyVAL.integer = int(yyDollar[2].uinteger)
			}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:393
		{
			yyVAL.uinteger = uint(yyDollar[1].uinteger)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:398
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:402
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:404
		{
			if yyDollar[1].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(yyDollar[1].uinteger))
				yyVAL.str = string(buf)
			}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:413
		{
			if yyDollar[2].uinteger > uint(-math.MinInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(-yyDollar[2].uinteger))
				yyVAL.str = string(buf)
			}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:425
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:431
		{
			yyVAL.str = yyDollar[1].str
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:433
		{
			yyVAL.str = "AND"
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:435
		{
			yyVAL.str = "OR"
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:440
		{
			yyVAL.str = yyDollar[1].str
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:442
		{
			yyVAL.str = "="
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:448
		{
			yyVAL.colref = ColumnRef{
				ColName: yyDollar[1].str,
			}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:456
		{
			yyVAL.where = yyDollar[2].where
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:459
		{
			yyVAL.where = WhereClauseLeaf{
				ColRef: yyDollar[1].colref,
				Op:     yyDollar[2].str,
				Value:  yyDollar[3].str,
			}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:467
		{
			yyVAL.where = WhereClauseOp{
				Op:    yyDollar[2].str,
				Left:  yyDollar[1].where,
				Right: yyDollar[3].where,
			}
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:477
		{
			yyVAL.where = WhereClauseEmpty{}
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:481
		{
			yyVAL.where = yyDollar[2].where
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:488
		{
			switch v := strings.ToLower(string(yyDollar[1].str)); v {
			case DatabasesStr, RoutersStr, PoolsStr, InstanceStr, ShardsStr, BackendConnectionsStr, KeyRangesStr, ShardingRules, ClientsStr, StatusStr, DistributionsStr, VersionStr, RelationsStr, ReferenceRelationsStr, TaskGroupStr, PreparedStatementsStr, QuantilesStr, SequencesStr, IsReadOnlyStr, MoveStatsStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:499
		{
			switch v := string(yyDollar[1].str); v {
			case ClientStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:509
		{
			yyVAL.bool = true
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:509
		{
			yyVAL.bool = false
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:513
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].key_range_selector}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:517
		{
			yyVAL.drop = &Drop{Element: &KeyRangeSelector{KeyRangeID: `*`}}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:521
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].sharding_rule_selector}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:525
		{
			yyVAL.drop = &Drop{Element: &ShardingRuleSelector{ID: `*`}}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:529
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].distribution_selector, CascadeDelete: yyDollar[3].bool}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:533
		{
			yyVAL.drop = &Drop{Element: &DistributionSelector{ID: `*`}, CascadeDelete: yyDollar[4].bool}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:537
		{
			yyVAL.drop = &Drop{Element: &ShardSelector{ID: yyDollar[3].str}}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:541
		{
			yyVAL.drop = &Drop{Element: &TaskGroupSelector{}}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:545
		{
			yyVAL.drop = &Drop{Element: &SequenceSelector{Name: yyDollar[3].str}}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:549
		{
			yyVAL.drop = &Drop{
				Element: &ReferenceRelationSelector{
					ID: yyDollar[4].str,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:557
		{
			yyVAL.drop = &Drop{
				Element: &ReferenceRelationSelector{
					ID: yyDollar[4].str,
				},
			}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:568
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:573
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:578
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:582
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:588
		{
			yyVAL.trace = &TraceStmt{All: true}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:591
		{
			yyVAL.trace = &TraceStmt{
				Client: yyDollar[4].uinteger,
			}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:599
		{
			yyVAL.stoptrace = &StopTraceStmt{}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:605
		{
			yyVAL.alter = &Alter{Element: yyDollar[2].alter_distribution}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:611
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AttachRelation{
					Distribution: yyDollar[1].distribution_selector,
					Relations:    yyDollar[2].relations,
				},
			}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:620
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &DetachRelation{
					Distribution: yyDollar[1].distribution_selector,
					RelationName: yyDollar[4].str,
				},
			}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:629
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AlterRelation{
					Distribution: yyDollar[1].distribution_selector,
					Relation:     yyDollar[2].distributed_relation,
				},
			}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:638
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AlterDefaultShard{
					Distribution: yyDollar[1].distribution_selector,
					Shard:        yyDollar[4].str,
				},
			}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:647
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &DropDefaultShard{Distribution: yyDollar[1].distribution_selector},
			}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:656
		{
			yyVAL.dEntrieslist = append(yyDollar[1].dEntrieslist, yyDollar[3].distrKeyEntry)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:658
		{
			yyVAL.dEntrieslist = []DistributionKeyEntry{
				yyDollar[1].distrKeyEntry,
			}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:668
		{
			yyVAL.distrKeyEntry = DistributionKeyEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 77:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:677
		{
			yyVAL.distributed_relation = &DistributedRelation{
				Name:                 yyDollar[2].str,
				DistributionKey:      yyDollar[5].dEntrieslist,
				AutoIncrementEntries: yyDollar[6].aiEntrieslist,
				SchemaName:           yyDollar[7].str,
			}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:686
		{
			yyVAL.distributed_relation = &DistributedRelation{
				Name:                 yyDollar[2].str,
				ReplicatedRelation:   true,
				AutoIncrementEntries: yyDollar[3].aiEntrieslist,
				SchemaName:           yyDollar[4].str,
			}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:696
		{
			yyVAL.aiEntrieslist = yyDollar[3].aiEntrieslist
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:698
		{
			yyVAL.aiEntrieslist = nil
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:704
		{
			yyVAL.aiEntrieslist = append(yyDollar[1].aiEntrieslist, yyDollar[3].aiEntry)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:706
		{
			yyVAL.aiEntrieslist = []*AutoIncrementEntry{
				yyDollar[1].aiEntry,
			}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:714
		{
			yyVAL.aiEntry = &AutoIncrementEntry{
				Column: yyDollar[1].str,
				Start:  uint64(yyDollar[2].uinteger),
			}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:723
		{
			yyVAL.uinteger = yyDollar[2].uinteger
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:725
		{
			yyVAL.uinteger = 0
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:730
		{
			yyVAL.str = yyDollar[2].str
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:732
		{
			yyVAL.str = ""
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:737
		{
			yyVAL.relations = []*DistributedRelation{yyDollar[1].distributed_relation}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:739
		{
			yyVAL.relations = append(yyDollar[1].relations, yyDollar[2].distributed_relation)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:744
		{
			yyVAL.relations = yyDollar[2].relations
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:749
		{
			yyVAL.distributed_relation = yyDollar[2].distributed_relation
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:754
		{
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:757
		{
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:757
		{
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:761
		{
			yyVAL.strlist = yyDollar[2].strlist
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:762
		{
			yyVAL.strlist = yyDollar[3].strlist
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:762
		{
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:766
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:771
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:776
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:781
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:786
		{
			yyVAL.create = &Create{
				Element: &ReferenceRelationDefinition{
					TableName:            yyDollar[4].str,
					AutoIncrementEntries: yyDollar[5].aiEntrieslist,
					ShardIds:             yyDollar[6].strlist,
				},
			}
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:798
		{
			yyVAL.alter = &Alter{
				Element: &AlterDistribution{
					Element: &AttachRelation{
						Distribution: &DistributionSelector{ID: yyDollar[5].str},
						Relations:    []*DistributedRelation{yyDollar[3].distributed_relation},
					},
				},
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:810
		{
			yyVAL.opt_asc_desc = &SortByAsc{}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:811
		{
			yyVAL.opt_asc_desc = &SortByDesc{}
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:812
		{
			yyVAL.opt_asc_desc = &SortByDefault{}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:816
		{
			yyVAL.order_clause = &Order{Col: yyDollar[3].colref, OptAscDesc: yyDollar[4].opt_asc_desc}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:819
		{
			yyVAL.order_clause = OrderClause(nil)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:824
		{
			yyVAL.group_clause = GroupBy{Col: yyDollar[3].colref}
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:827
		{
			yyVAL.group_clause = GroupByClauseEmpty{}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:832
		{
			yyVAL.show = &Show{Cmd: yyDollar[2].str, Where: yyDollar[3].where, GroupBy: yyDollar[4].group_clause, Order: yyDollar[5].order_clause}
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:834
		{
			yyVAL.show = &Show{Cmd: ShardsStr, Where: yyDollar[3].where, GroupBy: yyDollar[4].group_clause, Order: yyDollar[5].order_clause}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:839
		{
			yyVAL.lock = &Lock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:847
		{
			yyVAL.ds = &DistributionDefinition{
				ID:           yyDollar[2].str,
				ColTypes:     yyDollar[3].strlist,
				DefaultShard: yyDollar[4].str,
			}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:856
		{
			yyVAL.strlist = yyDollar[3].strlist
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:858
		{
			/* empty column types should be prohibited */
			yyVAL.strlist = nil
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:864
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:866
		{
			yyVAL.strlist = []string{
				yyDollar[1].str,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:873
		{
			yyVAL.str = qdb.ColumnTypeVarchar
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:875
		{
			yyVAL.str = qdb.ColumnTypeVarcharHashed
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:877
		{
			yyVAL.str = qdb.ColumnTypeInteger
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:879
		{
			yyVAL.str = qdb.ColumnTypeInteger
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:881
		{
			yyVAL.str = qdb.ColumnTypeUinteger
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:883
		{
			yyVAL.str = qdb.ColumnTypeUinteger
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:885
		{
			yyVAL.str = qdb.ColumnTypeUUID
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:890
		{
			yyVAL.str = yyDollar[3].str
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:892
		{
			yyVAL.str = ""
		}
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:898
		{
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: yyDollar[3].str, TableName: yyDollar[4].str, Entries: yyDollar[5].entrieslist, Distribution: yyDollar[6].str}
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:903
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: "shrule" + str, TableName: yyDollar[3].str, Entries: yyDollar[4].entrieslist, Distribution: yyDollar[5].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:912
		{
			yyVAL.entrieslist = make([]ShardingRuleEntry, 0)
			yyVAL.entrieslist = append(yyVAL.entrieslist, yyDollar[1].shruleEntry)
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:918
		{
			yyVAL.entrieslist = append(yyDollar[1].entrieslist, yyDollar[2].shruleEntry)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:924
		{
			yyVAL.shruleEntry = ShardingRuleEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:933
		{
			yyVAL.str = yyDollar[2].str
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:936
		{
			yyVAL.str = ""
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:940
		{
			yyVAL.str = yyDollar[2].str
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:945
		{
			yyVAL.str = yyDollar[2].str
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:951
		{
			yyVAL.str = "identity"
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:953
		{
			yyVAL.str = "murmur"
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:955
		{
			yyVAL.str = "city"
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:961
		{
			yyVAL.str = yyDollar[3].str
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:963
		{
			yyVAL.str = ""
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:968
		{
			yyVAL.str = yyDollar[3].str
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:970
		{
			yyVAL.str = "default"
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:976
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:980
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:982
		{
			if yyDollar[1].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(yyDollar[1].uinteger))
				yyVAL.bytes = buf
			}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:991
		{
			if yyDollar[2].uinteger > uint(-math.MinInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(-yyDollar[2].uinteger))
				yyVAL.bytes = buf
			}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1003
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: [][]byte{
					yyDollar[1].bytes,
				},
			}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1010
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: append(yyDollar[1].krbound.Pivots, yyDollar[3].bytes),
			}
		}
	case 151:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:1019
		{
			yyVAL.kr = &KeyRangeDefinition{
				KeyRangeID:   yyDollar[3].str,
				LowerBound:   yyDollar[5].krbound,
				ShardID:      yyDollar[8].str,
				Distribution: yyDollar[9].str,
			}
		}
	case 152:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:1028
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.kr = &KeyRangeDefinition{
				LowerBound:   yyDollar[4].krbound,
				ShardID:      yyDollar[7].str,
				Distribution: yyDollar[8].str,
				KeyRangeID:   "kr" + str,
			}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1043
		{
			yyVAL.shard = &ShardDefinition{Id: yyDollar[2].str, Hosts: yyDollar[5].strlist}
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1048
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.shard = &ShardDefinition{Id: "shard" + str, Hosts: yyDollar[4].strlist}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1058
		{
			yyVAL.strlist = []string{yyDollar[1].str}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1063
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1069
		{
			yyVAL.unlock = &Unlock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1075
		{
			yyVAL.sharding_rule_selector = &ShardingRuleSelector{ID: yyDollar[3].str}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1081
		{
			yyVAL.key_range_selector = &KeyRangeSelector{KeyRangeID: yyDollar[3].str}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1087
		{
			yyVAL.distribution_selector = &DistributionSelector{ID: yyDollar[2].str}
		}
	case 161:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1093
		{
			yyVAL.split = &SplitKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeFromID: yyDollar[4].str, Border: yyDollar[6].krbound}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1099
		{
			yyVAL.kill = &Kill{Cmd: yyDollar[2].str, Target: yyDollar[3].uinteger}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1102
		{
			yyVAL.kill = &Kill{Cmd: "client", Target: yyDollar[3].uinteger}
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1108
		{
			yyVAL.move = &MoveKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str}
		}
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1114
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Check: true, Apply: true}
		}
	case 166:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1116
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Check: true}
		}
	case 167:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1118
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Apply: true}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1122
		{
			yyVAL.opt_batch_size = int(yyDollar[3].uinteger)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:1123
		{
			yyVAL.opt_batch_size = -1
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1127
		{
			yyVAL.unite = &UniteKeyRange{KeyRangeIDL: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeIDR: yyDollar[4].str}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1133
		{
			yyVAL.listen = &Listen{addr: yyDollar[2].str}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1139
		{
			yyVAL.shutdown = &Shutdown{}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1145
		{
			yyVAL.invalidate_cache = &InvalidateCache{}
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1151
		{
			yyVAL.sync_reference_tables = &SyncReferenceTables{ShardID: yyDollar[4].str}
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1159
		{
			yyVAL.register_router = &RegisterRouter{ID: yyDollar[3].str, Addr: yyDollar[5].str}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1165
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: yyDollar[3].str}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1170
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: `*`}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1178
		{
			yyVAL.retryMoveTaskGroup = &RetryMoveTaskGroup{}
		}
	}
	goto yystack /* stack new state and value */
}
