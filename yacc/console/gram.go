// Code generated by goyacc -o gram.go -p yy gram.y. DO NOT EDIT.

//line gram.y:3
package spqrparser

import __yyfmt__ "fmt"

//line gram.y:3

import (
	"crypto/rand"
	"encoding/binary"
	"encoding/hex"
	"strconv"
	"strings"
)

func randomHex(n int) (string, error) {
	bytes := make([]byte, n)
	if _, err := rand.Read(bytes); err != nil {
		return "", err
	}
	return hex.EncodeToString(bytes), nil
}

//line gram.y:25
type yySymType struct {
	yys      int
	str      string
	strlist  []string
	byte     byte
	bytes    []byte
	integer  int
	uinteger uint
	bool     bool
	empty    struct{}

	set       *Set
	statement Statement
	show      *Show

	drop   *Drop
	create *Create

	kill   *Kill
	lock   *Lock
	unlock *Unlock

	krbound *KeyRangeBound

	ds            *DistributionDefinition
	kr            *KeyRangeDefinition
	shard         *ShardDefinition
	sharding_rule *ShardingRuleDefinition

	register_router   *RegisterRouter
	unregister_router *UnregisterRouter

	split *SplitKeyRange
	move  *MoveKeyRange
	unite *UniteKeyRange

	redistribute *RedistributeKeyRange

	shutdown *Shutdown
	listen   *Listen

	trace     *TraceStmt
	stoptrace *StopTraceStmt

	distribution *DistributionDefinition

	alter                *Alter
	alter_distribution   *AlterDistribution
	distributed_relation *DistributedRelation

	relations    []*DistributedRelation
	entrieslist  []ShardingRuleEntry
	dEntrieslist []DistributionKeyEntry

	shruleEntry ShardingRuleEntry

	distrKeyEntry DistributionKeyEntry

	sharding_rule_selector *ShardingRuleSelector
	key_range_selector     *KeyRangeSelector
	distribution_selector  *DistributionSelector

	colref ColumnRef
	where  WhereClauseNode

	order_clause OrderClause
	opt_asc_desc OptAscDesc

	group_clause GroupByClause
}

const IDENT = 57346
const COMMAND = 57347
const SHOW = 57348
const KILL = 57349
const WHERE = 57350
const OR = 57351
const AND = 57352
const TEQ = 57353
const TCOMMA = 57354
const SCONST = 57355
const ICONST = 57356
const TSEMICOLON = 57357
const TOPENBR = 57358
const TCLOSEBR = 57359
const SHUTDOWN = 57360
const LISTEN = 57361
const REGISTER = 57362
const UNREGISTER = 57363
const ROUTER = 57364
const ROUTE = 57365
const CREATE = 57366
const ADD = 57367
const DROP = 57368
const LOCK = 57369
const UNLOCK = 57370
const SPLIT = 57371
const MOVE = 57372
const COMPOSE = 57373
const SET = 57374
const CASCADE = 57375
const ATTACH = 57376
const ALTER = 57377
const DETACH = 57378
const REDISTRIBUTE = 57379
const SHARDING = 57380
const COLUMN = 57381
const TABLE = 57382
const HASH = 57383
const FUNCTION = 57384
const KEY = 57385
const RANGE = 57386
const DISTRIBUTION = 57387
const RELATION = 57388
const REPLICATED = 57389
const SHARDS = 57390
const KEY_RANGES = 57391
const ROUTERS = 57392
const SHARD = 57393
const HOST = 57394
const SHARDING_RULES = 57395
const RULE = 57396
const COLUMNS = 57397
const VERSION = 57398
const HOSTS = 57399
const BY = 57400
const FROM = 57401
const TO = 57402
const WITH = 57403
const UNITE = 57404
const ALL = 57405
const ADDRESS = 57406
const FOR = 57407
const CLIENT = 57408
const BATCH = 57409
const SIZE = 57410
const IDENTITY = 57411
const MURMUR = 57412
const CITY = 57413
const START = 57414
const STOP = 57415
const TRACE = 57416
const MESSAGES = 57417
const TASK = 57418
const GROUP = 57419
const VARCHAR = 57420
const INTEGER = 57421
const INT = 57422
const TYPES = 57423
const OP = 57424
const ASC = 57425
const DESC = 57426
const ORDER = 57427

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"COMMAND",
	"SHOW",
	"KILL",
	"WHERE",
	"OR",
	"AND",
	"TEQ",
	"TCOMMA",
	"SCONST",
	"ICONST",
	"TSEMICOLON",
	"TOPENBR",
	"TCLOSEBR",
	"SHUTDOWN",
	"LISTEN",
	"REGISTER",
	"UNREGISTER",
	"ROUTER",
	"ROUTE",
	"CREATE",
	"ADD",
	"DROP",
	"LOCK",
	"UNLOCK",
	"SPLIT",
	"MOVE",
	"COMPOSE",
	"SET",
	"CASCADE",
	"ATTACH",
	"ALTER",
	"DETACH",
	"REDISTRIBUTE",
	"SHARDING",
	"COLUMN",
	"TABLE",
	"HASH",
	"FUNCTION",
	"KEY",
	"RANGE",
	"DISTRIBUTION",
	"RELATION",
	"REPLICATED",
	"SHARDS",
	"KEY_RANGES",
	"ROUTERS",
	"SHARD",
	"HOST",
	"SHARDING_RULES",
	"RULE",
	"COLUMNS",
	"VERSION",
	"HOSTS",
	"BY",
	"FROM",
	"TO",
	"WITH",
	"UNITE",
	"ALL",
	"ADDRESS",
	"FOR",
	"CLIENT",
	"BATCH",
	"SIZE",
	"IDENTITY",
	"MURMUR",
	"CITY",
	"START",
	"STOP",
	"TRACE",
	"MESSAGES",
	"TASK",
	"GROUP",
	"VARCHAR",
	"INTEGER",
	"INT",
	"TYPES",
	"OP",
	"ASC",
	"DESC",
	"ORDER",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:906

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 302

var yyAct = [...]int{

	140, 190, 236, 161, 193, 162, 185, 139, 160, 153,
	159, 165, 137, 152, 122, 148, 96, 233, 234, 150,
	168, 186, 187, 188, 136, 101, 58, 128, 93, 54,
	53, 56, 208, 60, 72, 63, 227, 228, 229, 61,
	155, 179, 91, 71, 145, 92, 85, 192, 86, 89,
	86, 86, 126, 112, 230, 86, 156, 86, 219, 111,
	110, 99, 100, 86, 62, 158, 192, 109, 202, 178,
	169, 164, 127, 95, 155, 106, 108, 87, 84, 46,
	63, 113, 114, 149, 47, 99, 45, 215, 121, 124,
	156, 146, 48, 209, 102, 131, 133, 223, 129, 103,
	94, 88, 194, 65, 131, 70, 216, 132, 90, 130,
	141, 142, 143, 144, 115, 134, 98, 213, 125, 212,
	211, 123, 86, 120, 157, 59, 118, 97, 117, 198,
	44, 166, 198, 81, 80, 74, 151, 43, 42, 55,
	217, 40, 86, 199, 73, 75, 107, 181, 41, 180,
	183, 174, 240, 52, 138, 198, 195, 196, 123, 201,
	51, 50, 191, 182, 83, 189, 64, 66, 166, 197,
	210, 49, 76, 77, 78, 79, 200, 203, 74, 206,
	171, 105, 86, 204, 68, 173, 172, 73, 163, 207,
	171, 214, 39, 205, 176, 173, 172, 1, 19, 191,
	18, 177, 17, 16, 15, 220, 14, 218, 12, 13,
	221, 8, 9, 135, 222, 232, 225, 224, 167, 119,
	231, 184, 147, 116, 237, 82, 20, 226, 154, 235,
	6, 238, 5, 239, 28, 29, 4, 3, 7, 11,
	242, 237, 241, 243, 10, 69, 31, 30, 36, 37,
	67, 57, 22, 21, 25, 26, 27, 32, 33, 2,
	175, 170, 104, 38, 0, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	35, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	23, 24,
}
var yyPact = [...]int{

	228, -1000, 126, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 41, 41, -44, -45, -12, 60, 60, 180, 39,
	131, -1000, 60, 60, 60, 60, 112, 111, 33, -1000,
	-1000, -1000, -1000, -1000, -1000, 178, 23, 57, 47, -1000,
	-1000, -1000, -1000, -21, -47, -1000, 56, -1000, 19, 94,
	53, 178, -52, 49, -1000, 55, -1000, 173, -1000, 132,
	132, -1000, -1000, -1000, -1000, -1000, 8, 0, -1, -8,
	178, 51, -1000, 92, 178, 84, -1000, 118, 59, -9,
	15, -48, 132, -1000, 46, 44, -1000, -1000, 94, -1000,
	-1000, -1000, -1000, 178, -53, 138, -1000, -1000, -1000, 178,
	178, 178, 178, -20, -1000, -1000, -1000, 45, 37, -1000,
	-62, 81, 35, 178, 6, 174, 14, 131, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -65, 12, 186, 138, 190,
	-1000, 11, -1000, -26, -1000, 131, 178, 37, -1000, 178,
	-57, 35, 1, -1000, 61, 178, 178, -1000, 174, 120,
	-1000, -1000, -1000, -1000, 131, 147, -1000, -1000, 10, 178,
	138, -1000, -1000, -1000, 176, 131, -1000, -1000, 174, -36,
	-1000, -1000, -1000, 48, 158, -1000, 79, 78, 76, 1,
	-1000, -1000, 42, -1000, 64, -1000, -1000, 117, 174, -2,
	147, 131, 178, -1000, 186, -1000, -1000, 143, 132, 54,
	-57, -1000, -1000, -1000, -1000, 178, -33, -6, -1000, 178,
	-1000, -66, -1000, 178, -1000, -1000, -1000, -1000, -1000, -1000,
	178, -18, -1000, -1000, -1000, 140, -1000, 61, -18, -1000,
	178, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 262, 12, 8, 10, 261, 260, 7, 3, 0,
	5, 259, 251, 139, 125, 250, 245, 244, 239, 238,
	237, 236, 232, 230, 148, 138, 137, 130, 13, 229,
	9, 2, 14, 228, 4, 227, 1, 226, 225, 223,
	222, 15, 221, 219, 11, 6, 16, 218, 215, 213,
	212, 211, 209, 208, 206, 204, 203, 202, 200, 198,
	197, 192,
}
var yyR1 = [...]int{

	0, 60, 61, 61, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 10, 8, 8, 8, 9, 5, 5, 5,
	6, 6, 7, 2, 2, 2, 1, 1, 15, 16,
	46, 46, 19, 19, 19, 19, 19, 19, 19, 19,
	20, 20, 20, 20, 22, 22, 23, 37, 38, 38,
	29, 29, 31, 41, 41, 40, 40, 39, 21, 21,
	21, 21, 48, 48, 48, 47, 47, 49, 49, 17,
	51, 24, 43, 43, 42, 42, 45, 45, 45, 45,
	45, 45, 25, 25, 28, 28, 30, 32, 32, 33,
	33, 35, 35, 35, 34, 34, 36, 36, 3, 3,
	4, 4, 26, 26, 27, 27, 44, 44, 50, 12,
	13, 14, 14, 54, 18, 18, 55, 56, 56, 57,
	53, 52, 58, 59, 59,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 0, 2, 1, 1,
	1, 0, 2, 4, 2, 4, 3, 4, 3, 3,
	2, 2, 2, 2, 4, 4, 3, 2, 2, 4,
	3, 1, 2, 5, 2, 1, 2, 2, 2, 2,
	2, 2, 1, 1, 0, 4, 0, 3, 0, 5,
	2, 3, 3, 0, 3, 1, 1, 2, 1, 1,
	2, 2, 6, 5, 1, 2, 2, 2, 0, 2,
	2, 1, 1, 1, 3, 0, 3, 0, 1, 1,
	1, 3, 9, 8, 5, 4, 1, 3, 2, 3,
	3, 2, 2, 6, 3, 3, 4, 7, 4, 4,
	2, 1, 5, 3, 3,
}
var yyChk = [...]int{

	-1000, -60, -11, -20, -21, -22, -23, -19, -51, -50,
	-17, -18, -53, -52, -54, -55, -56, -57, -58, -59,
	-37, 25, 24, 72, 73, 26, 27, 28, 6, 7,
	19, 18, 29, 30, 37, 62, 20, 21, 35, -61,
	15, -24, -25, -26, -27, 45, 38, 43, 51, -24,
	-25, -26, -27, 74, 74, -13, 43, -12, 38, -14,
	45, 51, 76, 47, -13, 43, -13, -15, 4, -16,
	66, 4, -8, 13, 4, 14, -13, -13, -13, -13,
	22, 22, -38, -14, 45, -9, 4, 54, 44, -9,
	61, 63, 66, 75, 44, 54, -46, 33, 63, -9,
	-9, 77, 45, 44, -1, 8, -10, 14, -10, 59,
	60, 60, 61, -9, -9, 63, -39, 36, 34, -43,
	39, -9, -32, 40, -9, 59, 61, 57, 75, -10,
	63, -9, 63, -9, -46, -49, 77, -2, 16, -7,
	-9, -9, -9, -9, -9, 64, 46, -40, -41, 46,
	81, -32, -28, -30, -33, 39, 55, -9, 59, -4,
	-3, -8, -10, 14, 57, -44, -8, -47, 85, 58,
	-5, 4, 10, 9, -2, -6, 4, 11, 58, 67,
	-8, -9, -41, -9, -42, -45, 78, 79, 80, -28,
	-36, -30, 65, -34, 41, -9, -9, -4, 12, 23,
	-44, 12, 58, -7, -2, 17, -8, -4, 68, 45,
	12, 41, 41, 41, -36, 45, 42, 23, -3, 60,
	-8, -7, -10, 43, -45, -9, -35, 69, 70, 71,
	60, -9, -48, 83, 84, -29, -31, -9, -9, -36,
	12, -34, -36, -31,
}
var yyDef = [...]int{

	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 1,
	3, 50, 51, 52, 53, 0, 0, 0, 0, 68,
	69, 70, 71, 0, 0, 42, 0, 44, 0, 41,
	0, 0, 0, 0, 80, 0, 118, 36, 38, 0,
	0, 39, 130, 23, 24, 25, 0, 0, 0, 0,
	0, 0, 57, 0, 0, 83, 26, 98, 0, 0,
	0, 0, 0, 56, 0, 0, 46, 40, 41, 121,
	48, 49, 122, 0, 78, 0, 124, 22, 125, 0,
	0, 0, 0, 0, 133, 134, 58, 0, 0, 81,
	0, 98, 0, 0, 0, 0, 0, 0, 54, 55,
	43, 120, 45, 119, 47, 76, 0, 37, 0, 0,
	32, 0, 126, 128, 129, 0, 0, 67, 65, 0,
	0, 0, 107, 94, 105, 0, 0, 97, 0, 0,
	110, 108, 109, 22, 0, 115, 116, 79, 0, 0,
	0, 27, 28, 29, 0, 0, 30, 31, 0, 0,
	132, 59, 66, 64, 82, 85, 86, 88, 89, 107,
	93, 95, 0, 96, 0, 99, 100, 0, 0, 0,
	114, 0, 0, 77, 35, 33, 34, 123, 0, 0,
	0, 87, 90, 91, 92, 0, 0, 0, 111, 0,
	117, 74, 127, 0, 84, 106, 104, 101, 102, 103,
	0, 107, 75, 72, 73, 63, 61, 105, 107, 113,
	0, 62, 112, 60,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:235
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:236
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:241
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:245
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:249
		{
			setParseTree(yylex, yyDollar[1].trace)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:253
		{
			setParseTree(yylex, yyDollar[1].stoptrace)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:257
		{
			setParseTree(yylex, yyDollar[1].drop)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:261
		{
			setParseTree(yylex, yyDollar[1].lock)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:265
		{
			setParseTree(yylex, yyDollar[1].unlock)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:269
		{
			setParseTree(yylex, yyDollar[1].show)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:273
		{
			setParseTree(yylex, yyDollar[1].kill)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:277
		{
			setParseTree(yylex, yyDollar[1].listen)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:281
		{
			setParseTree(yylex, yyDollar[1].shutdown)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:285
		{
			setParseTree(yylex, yyDollar[1].split)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:289
		{
			setParseTree(yylex, yyDollar[1].move)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:293
		{
			setParseTree(yylex, yyDollar[1].redistribute)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:297
		{
			setParseTree(yylex, yyDollar[1].unite)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:301
		{
			setParseTree(yylex, yyDollar[1].register_router)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:305
		{
			setParseTree(yylex, yyDollar[1].unregister_router)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:309
		{
			setParseTree(yylex, yyDollar[1].alter)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:314
		{
			yyVAL.uinteger = uint(yyDollar[1].uinteger)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:319
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:323
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:325
		{
			yyVAL.str = strconv.Itoa(int(yyDollar[1].uinteger))
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:330
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:336
		{
			yyVAL.str = yyDollar[1].str
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:338
		{
			yyVAL.str = "AND"
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:340
		{
			yyVAL.str = "OR"
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:345
		{
			yyVAL.str = yyDollar[1].str
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:347
		{
			yyVAL.str = "="
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:353
		{
			yyVAL.colref = ColumnRef{
				ColName: yyDollar[1].str,
			}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:361
		{
			yyVAL.where = yyDollar[2].where
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:364
		{
			yyVAL.where = WhereClauseLeaf{
				ColRef: yyDollar[1].colref,
				Op:     yyDollar[2].str,
				Value:  yyDollar[3].str,
			}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:372
		{
			yyVAL.where = WhereClauseOp{
				Op:    yyDollar[2].str,
				Left:  yyDollar[1].where,
				Right: yyDollar[3].where,
			}
		}
	case 36:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:382
		{
			yyVAL.where = WhereClauseEmpty{}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:386
		{
			yyVAL.where = yyDollar[2].where
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:393
		{
			switch v := strings.ToLower(string(yyDollar[1].str)); v {
			case DatabasesStr, RoutersStr, PoolsStr, ShardsStr, BackendConnectionsStr, KeyRangesStr, ShardingRules, ClientsStr, StatusStr, DistributionsStr, VersionStr, RelationsStr, TaskGroupStr, PreparedStatementsStr, QuantilesStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:404
		{
			switch v := string(yyDollar[1].str); v {
			case ClientStr:
				yyVAL.str = v
			default:
				yyVAL.str = "unsupp"
			}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:414
		{
			yyVAL.bool = true
		}
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:414
		{
			yyVAL.bool = false
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:418
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].key_range_selector}
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:422
		{
			yyVAL.drop = &Drop{Element: &KeyRangeSelector{KeyRangeID: `*`}}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:426
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].sharding_rule_selector}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:430
		{
			yyVAL.drop = &Drop{Element: &ShardingRuleSelector{ID: `*`}}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:434
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].distribution_selector, CascadeDelete: yyDollar[3].bool}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:438
		{
			yyVAL.drop = &Drop{Element: &DistributionSelector{ID: `*`}, CascadeDelete: yyDollar[4].bool}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:442
		{
			yyVAL.drop = &Drop{Element: &ShardSelector{ID: yyDollar[3].str}}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:446
		{
			yyVAL.drop = &Drop{Element: &TaskGroupSelector{}}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:453
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:458
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:463
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:467
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:473
		{
			yyVAL.trace = &TraceStmt{All: true}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:476
		{
			yyVAL.trace = &TraceStmt{
				Client: yyDollar[4].uinteger,
			}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:484
		{
			yyVAL.stoptrace = &StopTraceStmt{}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:490
		{
			yyVAL.alter = &Alter{Element: yyDollar[2].alter_distribution}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:496
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AttachRelation{
					Distribution: yyDollar[1].distribution_selector,
					Relations:    yyDollar[2].relations,
				},
			}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:505
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &DetachRelation{
					Distribution: yyDollar[1].distribution_selector,
					RelationName: yyDollar[4].str,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:517
		{
			yyVAL.dEntrieslist = append(yyDollar[1].dEntrieslist, yyDollar[3].distrKeyEntry)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:519
		{
			yyVAL.dEntrieslist = []DistributionKeyEntry{
				yyDollar[1].distrKeyEntry,
			}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:529
		{
			yyVAL.distrKeyEntry = DistributionKeyEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 63:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:538
		{
			yyVAL.distributed_relation = &DistributedRelation{
				Name:            yyDollar[2].str,
				DistributionKey: yyDollar[5].dEntrieslist,
			}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:545
		{
			yyVAL.distributed_relation = &DistributedRelation{
				Name:               yyDollar[2].str,
				ReplicatedRelation: true,
			}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:555
		{
			yyVAL.relations = []*DistributedRelation{yyDollar[1].distributed_relation}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:557
		{
			yyVAL.relations = append(yyDollar[1].relations, yyDollar[2].distributed_relation)
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:562
		{
			yyVAL.relations = yyDollar[2].relations
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:568
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:573
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:578
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:582
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:587
		{
			yyVAL.opt_asc_desc = &SortByAsc{}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:588
		{
			yyVAL.opt_asc_desc = &SortByDesc{}
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:589
		{
			yyVAL.opt_asc_desc = &SortByDefault{}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:593
		{
			yyVAL.order_clause = &Order{Col: yyDollar[3].colref, OptAscDesc: yyDollar[4].opt_asc_desc}
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:596
		{
			yyVAL.order_clause = OrderClause(nil)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:601
		{
			yyVAL.group_clause = GroupBy{Col: yyDollar[3].colref}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:604
		{
			yyVAL.group_clause = GroupByClauseEmpty{}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:609
		{
			yyVAL.show = &Show{Cmd: yyDollar[2].str, Where: yyDollar[3].where, GroupBy: yyDollar[4].group_clause, Order: yyDollar[5].order_clause}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:614
		{
			yyVAL.lock = &Lock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:622
		{
			yyVAL.ds = &DistributionDefinition{
				ID:       yyDollar[2].str,
				ColTypes: yyDollar[3].strlist,
			}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:630
		{
			yyVAL.strlist = yyDollar[3].strlist
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:632
		{
			/* empty column types should be prohibited */
			yyVAL.strlist = nil
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:638
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:640
		{
			yyVAL.strlist = []string{
				yyDollar[1].str,
			}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:647
		{
			yyVAL.str = "varchar"
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:649
		{
			yyVAL.str = "varchar hashed"
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:651
		{
			yyVAL.str = "integer"
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:653
		{
			yyVAL.str = "integer"
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:655
		{
			yyVAL.str = "uinteger"
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:657
		{
			yyVAL.str = "uinteger"
		}
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:663
		{
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: yyDollar[3].str, TableName: yyDollar[4].str, Entries: yyDollar[5].entrieslist, Distribution: yyDollar[6].str}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:668
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: "shrule" + str, TableName: yyDollar[3].str, Entries: yyDollar[4].entrieslist, Distribution: yyDollar[5].str}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:677
		{
			yyVAL.entrieslist = make([]ShardingRuleEntry, 0)
			yyVAL.entrieslist = append(yyVAL.entrieslist, yyDollar[1].shruleEntry)
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:683
		{
			yyVAL.entrieslist = append(yyDollar[1].entrieslist, yyDollar[2].shruleEntry)
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:689
		{
			yyVAL.shruleEntry = ShardingRuleEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:698
		{
			yyVAL.str = yyDollar[2].str
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:701
		{
			yyVAL.str = ""
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:705
		{
			yyVAL.str = yyDollar[2].str
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:710
		{
			yyVAL.str = yyDollar[2].str
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:716
		{
			yyVAL.str = "identity"
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:718
		{
			yyVAL.str = "murmur"
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:720
		{
			yyVAL.str = "city"
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:726
		{
			yyVAL.str = yyDollar[3].str
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:728
		{
			yyVAL.str = ""
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:733
		{
			yyVAL.str = yyDollar[3].str
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:735
		{
			yyVAL.str = "default"
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:740
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:743
		{
			buf := make([]byte, 8)
			binary.PutVarint(buf, int64(yyDollar[1].uinteger))
			yyVAL.bytes = buf
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:750
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: [][]byte{
					yyDollar[1].bytes,
				},
			}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:757
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: append(yyDollar[1].krbound.Pivots, yyDollar[3].bytes),
			}
		}
	case 112:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:766
		{
			yyVAL.kr = &KeyRangeDefinition{
				KeyRangeID:   yyDollar[3].str,
				LowerBound:   yyDollar[5].krbound,
				ShardID:      yyDollar[8].str,
				Distribution: yyDollar[9].str,
			}
		}
	case 113:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:775
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.kr = &KeyRangeDefinition{
				LowerBound:   yyDollar[4].krbound,
				ShardID:      yyDollar[7].str,
				Distribution: yyDollar[8].str,
				KeyRangeID:   "kr" + str,
			}
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:790
		{
			yyVAL.shard = &ShardDefinition{Id: yyDollar[2].str, Hosts: yyDollar[5].strlist}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:795
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.shard = &ShardDefinition{Id: "shard" + str, Hosts: yyDollar[4].strlist}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:805
		{
			yyVAL.strlist = []string{yyDollar[1].str}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:810
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:816
		{
			yyVAL.unlock = &Unlock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:822
		{
			yyVAL.sharding_rule_selector = &ShardingRuleSelector{ID: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:828
		{
			yyVAL.key_range_selector = &KeyRangeSelector{KeyRangeID: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:834
		{
			yyVAL.distribution_selector = &DistributionSelector{ID: yyDollar[2].str, Replicated: false}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:836
		{
			yyVAL.distribution_selector = &DistributionSelector{Replicated: true}
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:842
		{
			yyVAL.split = &SplitKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeFromID: yyDollar[4].str, Border: yyDollar[6].krbound}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:848
		{
			yyVAL.kill = &Kill{Cmd: yyDollar[2].str, Target: yyDollar[3].uinteger}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:851
		{
			yyVAL.kill = &Kill{Cmd: "client", Target: yyDollar[3].uinteger}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:857
		{
			yyVAL.move = &MoveKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:863
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: int(yyDollar[7].uinteger)}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:866
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: -1}
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:872
		{
			yyVAL.unite = &UniteKeyRange{KeyRangeIDL: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeIDR: yyDollar[4].str}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:878
		{
			yyVAL.listen = &Listen{addr: yyDollar[2].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:884
		{
			yyVAL.shutdown = &Shutdown{}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:892
		{
			yyVAL.register_router = &RegisterRouter{ID: yyDollar[3].str, Addr: yyDollar[5].str}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:898
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: yyDollar[3].str}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:903
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: `*`}
		}
	}
	goto yystack /* stack new state and value */
}
