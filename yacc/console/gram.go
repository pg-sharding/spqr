// Code generated by goyacc -o gram.go -p yy gram.y. DO NOT EDIT.

//line gram.y:3
package spqrparser

import __yyfmt__ "fmt"

//line gram.y:3

import (
	"crypto/rand"
	"encoding/hex"
	"strconv"
	"strings"
)

func randomHex(n int) (string, error) {
	bytes := make([]byte, n)
	if _, err := rand.Read(bytes); err != nil {
		return "", err
	}
	return hex.EncodeToString(bytes), nil
}

//line gram.y:24
type yySymType struct {
	yys      int
	str      string
	strlist  []string
	byte     byte
	bytes    []byte
	integer  int
	uinteger uint
	bool     bool
	empty    struct{}

	set       *Set
	statement Statement
	show      *Show

	drop   *Drop
	create *Create

	kill   *Kill
	lock   *Lock
	unlock *Unlock

	ds            *DistributionDefinition
	kr            *KeyRangeDefinition
	shard         *ShardDefinition
	sharding_rule *ShardingRuleDefinition

	register_router   *RegisterRouter
	unregister_router *UnregisterRouter

	split *SplitKeyRange
	move  *MoveKeyRange
	unite *UniteKeyRange

	shutdown *Shutdown
	listen   *Listen

	trace     *TraceStmt
	stoptrace *StopTraceStmt

	distribution *DistributionDefinition

	alter                *Alter
	alter_distribution   *AlterDistribution
	distributed_relation *DistributedRelation

	relations    []*DistributedRelation
	entrieslist  []ShardingRuleEntry
	dEntrieslist []DistributionKeyEntry

	shruleEntry ShardingRuleEntry

	distrKeyEntry DistributionKeyEntry

	sharding_rule_selector *ShardingRuleSelector
	key_range_selector     *KeyRangeSelector
	distribution_selector  *DistributionSelector

	colref ColumnRef
	where  WhereClauseNode
}

const IDENT = 57346
const COMMAND = 57347
const SHOW = 57348
const KILL = 57349
const WHERE = 57350
const OR = 57351
const AND = 57352
const TEQ = 57353
const TCOMMA = 57354
const SCONST = 57355
const ICONST = 57356
const TSEMICOLON = 57357
const TOPENBR = 57358
const TCLOSEBR = 57359
const SHUTDOWN = 57360
const LISTEN = 57361
const REGISTER = 57362
const UNREGISTER = 57363
const ROUTER = 57364
const ROUTE = 57365
const CREATE = 57366
const ADD = 57367
const DROP = 57368
const LOCK = 57369
const UNLOCK = 57370
const SPLIT = 57371
const MOVE = 57372
const COMPOSE = 57373
const SET = 57374
const CASCADE = 57375
const ATTACH = 57376
const ALTER = 57377
const DETACH = 57378
const SHARDING = 57379
const COLUMN = 57380
const TABLE = 57381
const HASH = 57382
const FUNCTION = 57383
const KEY = 57384
const RANGE = 57385
const DISTRIBUTION = 57386
const RELATION = 57387
const SHARDS = 57388
const KEY_RANGES = 57389
const ROUTERS = 57390
const SHARD = 57391
const HOST = 57392
const SHARDING_RULES = 57393
const RULE = 57394
const COLUMNS = 57395
const VERSION = 57396
const HOSTS = 57397
const BY = 57398
const FROM = 57399
const TO = 57400
const WITH = 57401
const UNITE = 57402
const ALL = 57403
const ADDRESS = 57404
const FOR = 57405
const CLIENT = 57406
const IDENTITY = 57407
const MURMUR = 57408
const CITY = 57409
const START = 57410
const STOP = 57411
const TRACE = 57412
const MESSAGES = 57413
const VARCHAR = 57414
const INTEGER = 57415
const INT = 57416
const TYPES = 57417
const OP = 57418

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"COMMAND",
	"SHOW",
	"KILL",
	"WHERE",
	"OR",
	"AND",
	"TEQ",
	"TCOMMA",
	"SCONST",
	"ICONST",
	"TSEMICOLON",
	"TOPENBR",
	"TCLOSEBR",
	"SHUTDOWN",
	"LISTEN",
	"REGISTER",
	"UNREGISTER",
	"ROUTER",
	"ROUTE",
	"CREATE",
	"ADD",
	"DROP",
	"LOCK",
	"UNLOCK",
	"SPLIT",
	"MOVE",
	"COMPOSE",
	"SET",
	"CASCADE",
	"ATTACH",
	"ALTER",
	"DETACH",
	"SHARDING",
	"COLUMN",
	"TABLE",
	"HASH",
	"FUNCTION",
	"KEY",
	"RANGE",
	"DISTRIBUTION",
	"RELATION",
	"SHARDS",
	"KEY_RANGES",
	"ROUTERS",
	"SHARD",
	"HOST",
	"SHARDING_RULES",
	"RULE",
	"COLUMNS",
	"VERSION",
	"HOSTS",
	"BY",
	"FROM",
	"TO",
	"WITH",
	"UNITE",
	"ALL",
	"ADDRESS",
	"FOR",
	"CLIENT",
	"IDENTITY",
	"MURMUR",
	"CITY",
	"START",
	"STOP",
	"TRACE",
	"MESSAGES",
	"VARCHAR",
	"INTEGER",
	"INT",
	"TYPES",
	"OP",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:825

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 243

var yyAct = [...]uint8{
	130, 173, 212, 168, 176, 153, 142, 152, 127, 141,
	137, 114, 99, 91, 169, 170, 171, 120, 139, 27,
	28, 88, 52, 51, 204, 205, 206, 67, 175, 134,
	144, 30, 29, 34, 35, 68, 81, 21, 20, 24,
	25, 26, 31, 32, 80, 145, 86, 84, 36, 87,
	118, 81, 81, 81, 104, 175, 81, 208, 207, 94,
	95, 198, 197, 103, 81, 147, 102, 162, 90, 151,
	119, 144, 82, 33, 138, 135, 105, 106, 193, 101,
	94, 22, 23, 113, 116, 190, 145, 66, 79, 96,
	123, 125, 200, 124, 56, 194, 89, 123, 83, 54,
	121, 58, 177, 131, 132, 133, 59, 126, 122, 107,
	93, 85, 61, 115, 44, 57, 146, 117, 112, 45,
	81, 43, 110, 148, 109, 140, 46, 92, 196, 195,
	149, 183, 182, 76, 75, 42, 164, 158, 38, 166,
	163, 100, 41, 53, 40, 178, 179, 165, 174, 39,
	172, 218, 78, 180, 185, 115, 155, 50, 191, 184,
	181, 157, 156, 186, 49, 188, 48, 155, 189, 60,
	62, 47, 157, 156, 192, 72, 73, 74, 81, 174,
	187, 160, 81, 70, 98, 64, 37, 70, 161, 1,
	128, 199, 69, 71, 202, 201, 69, 150, 209, 210,
	18, 213, 17, 16, 15, 14, 12, 13, 214, 215,
	8, 216, 217, 9, 111, 167, 220, 221, 219, 213,
	136, 222, 108, 77, 19, 203, 143, 211, 6, 5,
	4, 3, 7, 11, 10, 65, 63, 55, 2, 129,
	159, 154, 97,
}

var yyPact = [...]int16{
	13, -1000, 123, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	77, 77, -47, -48, 57, 70, 70, 181, 23, 179,
	-1000, 70, 70, 70, 112, 111, 44, -1000, -1000, -1000,
	-1000, -1000, -1000, 178, 20, 55, 52, -1000, -1000, -1000,
	-1000, -15, -50, -1000, 53, -1000, 16, 94, 49, 178,
	-1000, 46, -1000, 176, -1000, 127, 127, -1000, -1000, -1000,
	-1000, -1000, 9, 5, -5, 178, 48, -1000, 88, 178,
	80, -1000, 116, 60, -9, 15, -54, 127, -1000, 47,
	32, -1000, -1000, 94, -1000, -1000, 178, -1000, 174, -1000,
	-1000, -1000, 178, 178, 178, -33, -1000, -1000, -1000, 30,
	29, -1000, -57, 74, 33, 178, 8, 183, 14, 179,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 152, 174, 177,
	-1000, 11, -1000, -1000, 179, 178, 29, -1000, 178, -58,
	33, -8, -1000, 62, 178, 178, -1000, 183, 109, 108,
	-1000, 179, 142, -1000, 174, -1000, -1000, -1000, 163, 179,
	-1000, -1000, 179, -1000, -1000, -1000, 41, 146, -1000, -1000,
	-1000, -1000, -8, -1000, -1000, 34, -1000, 54, -1000, -1000,
	106, 105, 4, 3, 142, 179, 152, -1000, -1000, -1000,
	50, -58, -1000, 178, -41, 0, -1, 178, 178, -1000,
	178, -1000, -1000, -1000, -1000, -1000, -1000, 178, 178, -35,
	-35, 139, -1000, 62, -35, -35, -1000, -1000, 178, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]uint8{
	0, 242, 8, 241, 240, 239, 5, 0, 12, 238,
	237, 143, 115, 236, 235, 234, 233, 232, 231, 230,
	229, 228, 149, 144, 142, 135, 9, 227, 6, 2,
	11, 226, 4, 225, 1, 224, 223, 222, 220, 10,
	215, 214, 7, 3, 13, 213, 210, 207, 206, 205,
	204, 203, 202, 200, 189, 186,
}

var yyR1 = [...]int8{
	0, 54, 55, 55, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 8, 6, 6, 6, 7, 3, 3, 3, 4,
	4, 5, 2, 2, 2, 1, 1, 13, 14, 44,
	44, 17, 17, 17, 17, 17, 17, 17, 18, 18,
	18, 18, 20, 20, 21, 35, 36, 36, 27, 27,
	29, 39, 38, 38, 37, 19, 19, 19, 19, 15,
	46, 22, 41, 41, 40, 40, 43, 43, 43, 23,
	23, 26, 26, 28, 30, 30, 31, 31, 33, 33,
	33, 32, 32, 34, 24, 24, 24, 24, 25, 25,
	42, 42, 45, 10, 11, 12, 49, 16, 16, 50,
	51, 48, 47, 52, 53, 53,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 0, 2, 1, 1, 1,
	0, 2, 4, 2, 4, 3, 4, 3, 2, 2,
	2, 2, 4, 4, 3, 2, 2, 4, 3, 1,
	2, 5, 1, 2, 2, 2, 2, 2, 2, 3,
	2, 3, 3, 0, 3, 1, 1, 1, 1, 6,
	5, 1, 2, 2, 2, 0, 2, 2, 1, 1,
	1, 3, 0, 3, 9, 9, 8, 8, 5, 4,
	1, 3, 2, 3, 3, 2, 6, 3, 3, 4,
	4, 2, 1, 5, 3, 3,
}

var yyChk = [...]int16{
	-1000, -54, -9, -18, -19, -20, -21, -17, -46, -45,
	-15, -16, -48, -47, -49, -50, -51, -52, -53, -35,
	25, 24, 68, 69, 26, 27, 28, 6, 7, 19,
	18, 29, 30, 60, 20, 21, 35, -55, 15, -22,
	-23, -24, -25, 44, 37, 42, 49, -22, -23, -24,
	-25, 70, 70, -11, 42, -10, 37, -12, 44, 49,
	-11, 42, -11, -13, 4, -14, 64, 4, -6, 13,
	4, 14, -11, -11, -11, 22, 22, -36, -12, 44,
	-7, 4, 52, 43, -7, 59, 61, 64, 71, 43,
	52, -44, 33, 61, -7, -7, 43, -1, 8, -8,
	14, -8, 57, 58, 59, -7, -7, 61, -37, 36,
	34, -41, 38, -7, -30, 39, -7, 57, 59, 55,
	71, -8, 61, -7, 61, -7, -44, -2, 16, -5,
	-7, -7, -7, -7, 62, 45, -38, -39, 45, 75,
	-30, -26, -28, -31, 38, 53, -7, 57, -6, -8,
	14, 55, -42, -6, -3, 4, 10, 9, -2, -4,
	4, 11, 56, -6, -7, -39, -7, -40, -43, 72,
	73, 74, -26, -34, -28, 63, -32, 40, -7, -7,
	-6, -8, 23, 23, -42, 12, -2, 17, -6, -6,
	44, 12, -34, 44, 41, 23, 23, 58, 58, -6,
	42, -43, -7, -33, 65, 66, 67, 58, 58, -7,
	-7, -27, -29, -7, -7, -7, -34, -34, 12, -32,
	-34, -34, -29,
}

var yyDef = [...]int8{
	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 0, 1, 3, 48,
	49, 50, 51, 0, 0, 0, 0, 65, 66, 67,
	68, 0, 0, 41, 0, 43, 0, 40, 0, 0,
	70, 0, 102, 35, 37, 0, 0, 38, 111, 22,
	23, 24, 0, 0, 0, 0, 0, 55, 0, 0,
	73, 25, 85, 0, 0, 0, 0, 0, 54, 0,
	0, 45, 39, 40, 105, 47, 0, 69, 0, 107,
	21, 108, 0, 0, 0, 0, 114, 115, 56, 0,
	0, 71, 0, 85, 0, 0, 0, 0, 0, 0,
	52, 53, 42, 104, 44, 103, 46, 36, 0, 0,
	31, 0, 109, 110, 0, 0, 64, 62, 0, 0,
	0, 0, 81, 92, 0, 0, 84, 0, 0, 0,
	21, 0, 99, 100, 0, 26, 27, 28, 0, 0,
	29, 30, 0, 113, 57, 63, 0, 72, 75, 76,
	77, 78, 0, 80, 82, 0, 83, 0, 86, 87,
	0, 0, 0, 0, 98, 0, 34, 32, 33, 106,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 101,
	0, 74, 93, 91, 88, 89, 90, 0, 0, 0,
	0, 61, 59, 92, 0, 0, 96, 97, 0, 60,
	94, 95, 58,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:211
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:212
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:217
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:221
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:225
		{
			setParseTree(yylex, yyDollar[1].trace)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:229
		{
			setParseTree(yylex, yyDollar[1].stoptrace)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:233
		{
			setParseTree(yylex, yyDollar[1].drop)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:237
		{
			setParseTree(yylex, yyDollar[1].lock)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:241
		{
			setParseTree(yylex, yyDollar[1].unlock)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:245
		{
			setParseTree(yylex, yyDollar[1].show)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:249
		{
			setParseTree(yylex, yyDollar[1].kill)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:253
		{
			setParseTree(yylex, yyDollar[1].listen)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:257
		{
			setParseTree(yylex, yyDollar[1].shutdown)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:261
		{
			setParseTree(yylex, yyDollar[1].split)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:265
		{
			setParseTree(yylex, yyDollar[1].move)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:269
		{
			setParseTree(yylex, yyDollar[1].unite)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:273
		{
			setParseTree(yylex, yyDollar[1].register_router)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:277
		{
			setParseTree(yylex, yyDollar[1].unregister_router)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:281
		{
			setParseTree(yylex, yyDollar[1].alter)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:286
		{
			yyVAL.uinteger = uint(yyDollar[1].uinteger)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:291
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:295
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:297
		{
			yyVAL.str = strconv.Itoa(int(yyDollar[1].uinteger))
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:302
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:308
		{
			yyVAL.str = yyDollar[1].str
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:310
		{
			yyVAL.str = "AND"
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:312
		{
			yyVAL.str = "OR"
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:317
		{
			yyVAL.str = yyDollar[1].str
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:319
		{
			yyVAL.str = "="
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:325
		{
			yyVAL.colref = ColumnRef{
				ColName: yyDollar[1].str,
			}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:333
		{
			yyVAL.where = yyDollar[2].where
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:336
		{
			yyVAL.where = WhereClauseLeaf{
				ColRef: yyDollar[1].colref,
				Op:     yyDollar[2].str,
				Value:  yyDollar[3].str,
			}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:344
		{
			yyVAL.where = WhereClauseOp{
				Op:    yyDollar[2].str,
				Left:  yyDollar[1].where,
				Right: yyDollar[3].where,
			}
		}
	case 35:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:354
		{
			yyVAL.where = WhereClauseEmpty{}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:358
		{
			yyVAL.where = yyDollar[2].where
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:365
		{
			switch v := strings.ToLower(string(yyDollar[1].str)); v {
			case DatabasesStr, RoutersStr, PoolsStr, ShardsStr, BackendConnectionsStr, KeyRangesStr, ShardingRules, ClientsStr, StatusStr, DistributionsStr, VersionStr, RelationsStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:376
		{
			switch v := string(yyDollar[1].str); v {
			case ClientStr:
				yyVAL.str = v
			default:
				yyVAL.str = "unsupp"
			}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:386
		{
			yyVAL.bool = true
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:386
		{
			yyVAL.bool = false
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:390
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].key_range_selector}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:394
		{
			yyVAL.drop = &Drop{Element: &KeyRangeSelector{KeyRangeID: `*`}}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:398
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].sharding_rule_selector}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:402
		{
			yyVAL.drop = &Drop{Element: &ShardingRuleSelector{ID: `*`}}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:406
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].distribution_selector, CascadeDelete: yyDollar[3].bool}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:410
		{
			yyVAL.drop = &Drop{Element: &DistributionSelector{ID: `*`}, CascadeDelete: yyDollar[4].bool}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:414
		{
			yyVAL.drop = &Drop{Element: &ShardSelector{ID: yyDollar[3].str}}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:421
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:426
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:431
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:435
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:441
		{
			yyVAL.trace = &TraceStmt{All: true}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:444
		{
			yyVAL.trace = &TraceStmt{
				Client: yyDollar[4].uinteger,
			}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:452
		{
			yyVAL.stoptrace = &StopTraceStmt{}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:458
		{
			yyVAL.alter = &Alter{Element: yyDollar[2].alter_distribution}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:464
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AttachRelation{
					Distribution: yyDollar[1].distribution_selector,
					Relations:    yyDollar[2].relations,
				},
			}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:473
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &DetachRelation{
					Distribution: yyDollar[1].distribution_selector,
					RelationName: yyDollar[4].str,
				},
			}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:485
		{
			yyVAL.dEntrieslist = append(yyDollar[1].dEntrieslist, yyDollar[3].distrKeyEntry)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:487
		{
			yyVAL.dEntrieslist = []DistributionKeyEntry{
				yyDollar[1].distrKeyEntry,
			}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:497
		{
			yyVAL.distrKeyEntry = DistributionKeyEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:506
		{
			yyVAL.distributed_relation = &DistributedRelation{
				Name:            yyDollar[2].str,
				DistributionKey: yyDollar[5].dEntrieslist,
			}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:515
		{
			yyVAL.relations = []*DistributedRelation{yyDollar[1].distributed_relation}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:517
		{
			yyVAL.relations = append(yyDollar[1].relations, yyDollar[2].distributed_relation)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:522
		{
			yyVAL.relations = yyDollar[2].relations
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:528
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:533
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:538
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:542
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:549
		{
			yyVAL.show = &Show{Cmd: yyDollar[2].str, Where: yyDollar[3].where}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:555
		{
			yyVAL.lock = &Lock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:563
		{
			yyVAL.ds = &DistributionDefinition{
				ID:       yyDollar[2].str,
				ColTypes: yyDollar[3].strlist,
			}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:571
		{
			yyVAL.strlist = yyDollar[3].strlist
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:573
		{
			/* empty column types should be prohibited */
			yyVAL.strlist = nil
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:579
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:581
		{
			yyVAL.strlist = []string{
				yyDollar[1].str,
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:588
		{
			yyVAL.str = "varchar"
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:590
		{
			yyVAL.str = "integer"
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:592
		{
			yyVAL.str = "integer"
		}
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:598
		{
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: yyDollar[3].str, TableName: yyDollar[4].str, Entries: yyDollar[5].entrieslist, Distribution: yyDollar[6].str}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:603
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: "shrule" + str, TableName: yyDollar[3].str, Entries: yyDollar[4].entrieslist, Distribution: yyDollar[5].str}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:612
		{
			yyVAL.entrieslist = make([]ShardingRuleEntry, 0)
			yyVAL.entrieslist = append(yyVAL.entrieslist, yyDollar[1].shruleEntry)
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:618
		{
			yyVAL.entrieslist = append(yyDollar[1].entrieslist, yyDollar[2].shruleEntry)
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:624
		{
			yyVAL.shruleEntry = ShardingRuleEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:633
		{
			yyVAL.str = yyDollar[2].str
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:636
		{
			yyVAL.str = ""
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:640
		{
			yyVAL.str = yyDollar[2].str
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:645
		{
			yyVAL.str = yyDollar[2].str
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:651
		{
			yyVAL.str = "identity"
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:653
		{
			yyVAL.str = "murmur"
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:655
		{
			yyVAL.str = "city"
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:661
		{
			yyVAL.str = yyDollar[3].str
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:663
		{
			yyVAL.str = ""
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:668
		{
			yyVAL.str = yyDollar[3].str
		}
	case 94:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:674
		{
			yyVAL.kr = &KeyRangeDefinition{
				KeyRangeID:   yyDollar[3].str,
				LowerBound:   []byte(yyDollar[5].str),
				ShardID:      yyDollar[8].str,
				Distribution: yyDollar[9].str,
			}
		}
	case 95:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:683
		{
			yyVAL.kr = &KeyRangeDefinition{
				KeyRangeID:   yyDollar[3].str,
				LowerBound:   []byte(strconv.FormatUint(uint64(yyDollar[5].uinteger), 10)),
				ShardID:      yyDollar[8].str,
				Distribution: yyDollar[9].str,
			}
		}
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:692
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.kr = &KeyRangeDefinition{
				LowerBound:   []byte(yyDollar[4].str),
				Distribution: yyDollar[6].str,
				ShardID:      yyDollar[7].str,
				KeyRangeID:   "kr" + str,
			}
		}
	case 97:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:705
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.kr = &KeyRangeDefinition{
				LowerBound:   []byte(strconv.FormatUint(uint64(yyDollar[4].uinteger), 10)),
				ShardID:      yyDollar[7].str,
				KeyRangeID:   "kr" + str,
				Distribution: yyDollar[8].str,
			}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:720
		{
			yyVAL.shard = &ShardDefinition{Id: yyDollar[2].str, Hosts: yyDollar[5].strlist}
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:725
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.shard = &ShardDefinition{Id: "shard" + str, Hosts: yyDollar[4].strlist}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:735
		{
			yyVAL.strlist = []string{yyDollar[1].str}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:740
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:746
		{
			yyVAL.unlock = &Unlock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:752
		{
			yyVAL.sharding_rule_selector = &ShardingRuleSelector{ID: yyDollar[3].str}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:758
		{
			yyVAL.key_range_selector = &KeyRangeSelector{KeyRangeID: yyDollar[3].str}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:764
		{
			yyVAL.distribution_selector = &DistributionSelector{ID: yyDollar[2].str}
		}
	case 106:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:770
		{
			yyVAL.split = &SplitKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeFromID: yyDollar[4].str, Border: []byte(yyDollar[6].str)}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:776
		{
			yyVAL.kill = &Kill{Cmd: yyDollar[2].str, Target: yyDollar[3].uinteger}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:779
		{
			yyVAL.kill = &Kill{Cmd: "client", Target: yyDollar[3].uinteger}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:785
		{
			yyVAL.move = &MoveKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:791
		{
			yyVAL.unite = &UniteKeyRange{KeyRangeIDL: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeIDR: yyDollar[4].str}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:797
		{
			yyVAL.listen = &Listen{addr: yyDollar[2].str}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:803
		{
			yyVAL.shutdown = &Shutdown{}
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:811
		{
			yyVAL.register_router = &RegisterRouter{ID: yyDollar[3].str, Addr: yyDollar[5].str}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:817
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:822
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: `*`}
		}
	}
	goto yystack /* stack new state and value */
}
