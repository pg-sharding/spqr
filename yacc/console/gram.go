// Code generated by goyacc -o gram.go -p yy gram.y. DO NOT EDIT.

//line gram.y:3
package spqrparser

import __yyfmt__ "fmt"

//line gram.y:3

import (
	"crypto/rand"
	"encoding/binary"
	"encoding/hex"
	"strconv"
	"strings"
)

func randomHex(n int) (string, error) {
	bytes := make([]byte, n)
	if _, err := rand.Read(bytes); err != nil {
		return "", err
	}
	return hex.EncodeToString(bytes), nil
}

//line gram.y:25
type yySymType struct {
	yys      int
	str      string
	strlist  []string
	byte     byte
	bytes    []byte
	integer  int
	uinteger uint
	bool     bool
	empty    struct{}

	set       *Set
	statement Statement
	show      *Show

	drop   *Drop
	create *Create

	kill   *Kill
	lock   *Lock
	unlock *Unlock

	krbound *KeyRangeBound

	ds            *DistributionDefinition
	kr            *KeyRangeDefinition
	shard         *ShardDefinition
	sharding_rule *ShardingRuleDefinition

	register_router   *RegisterRouter
	unregister_router *UnregisterRouter

	split *SplitKeyRange
	move  *MoveKeyRange
	unite *UniteKeyRange

	redistribute *RedistributeKeyRange

	invalidate_cache *InvalidateCache

	shutdown *Shutdown
	listen   *Listen

	trace     *TraceStmt
	stoptrace *StopTraceStmt

	distribution *DistributionDefinition

	alter                *Alter
	alter_distribution   *AlterDistribution
	distributed_relation *DistributedRelation

	relations    []*DistributedRelation
	relation     *DistributedRelation
	entrieslist  []ShardingRuleEntry
	dEntrieslist []DistributionKeyEntry

	shruleEntry ShardingRuleEntry

	distrKeyEntry DistributionKeyEntry

	sharding_rule_selector *ShardingRuleSelector
	key_range_selector     *KeyRangeSelector
	distribution_selector  *DistributionSelector

	colref ColumnRef
	where  WhereClauseNode

	order_clause OrderClause
	opt_asc_desc OptAscDesc

	group_clause GroupByClause

	opt_batch_size int

	retryMoveTaskGroup *RetryMoveTaskGroup
}

const IDENT = 57346
const COMMAND = 57347
const SHOW = 57348
const KILL = 57349
const WHERE = 57350
const OR = 57351
const AND = 57352
const TEQ = 57353
const TCOMMA = 57354
const SCONST = 57355
const ICONST = 57356
const TSEMICOLON = 57357
const TOPENBR = 57358
const TCLOSEBR = 57359
const SHUTDOWN = 57360
const LISTEN = 57361
const REGISTER = 57362
const UNREGISTER = 57363
const ROUTER = 57364
const ROUTE = 57365
const CREATE = 57366
const ADD = 57367
const DROP = 57368
const LOCK = 57369
const UNLOCK = 57370
const SPLIT = 57371
const MOVE = 57372
const COMPOSE = 57373
const SET = 57374
const CASCADE = 57375
const ATTACH = 57376
const ALTER = 57377
const DETACH = 57378
const REDISTRIBUTE = 57379
const REFERENCE = 57380
const CHECK = 57381
const APPLY = 57382
const SHARDING = 57383
const COLUMN = 57384
const TABLE = 57385
const HASH = 57386
const FUNCTION = 57387
const KEY = 57388
const RANGE = 57389
const DISTRIBUTION = 57390
const RELATION = 57391
const REPLICATED = 57392
const AUTO = 57393
const INCREMENT = 57394
const SEQUENCE = 57395
const SCHEMA = 57396
const SHARDS = 57397
const KEY_RANGES = 57398
const ROUTERS = 57399
const SHARD = 57400
const HOST = 57401
const SHARDING_RULES = 57402
const RULE = 57403
const COLUMNS = 57404
const VERSION = 57405
const HOSTS = 57406
const SEQUENCES = 57407
const IS_READ_ONLY = 57408
const BY = 57409
const FROM = 57410
const TO = 57411
const WITH = 57412
const UNITE = 57413
const ALL = 57414
const ADDRESS = 57415
const FOR = 57416
const CLIENT = 57417
const BATCH = 57418
const SIZE = 57419
const INVALIDATE = 57420
const CACHE = 57421
const RETRY = 57422
const IDENTITY = 57423
const MURMUR = 57424
const CITY = 57425
const START = 57426
const STOP = 57427
const TRACE = 57428
const MESSAGES = 57429
const TASK = 57430
const GROUP = 57431
const VARCHAR = 57432
const INTEGER = 57433
const INT = 57434
const TYPES = 57435
const UUID = 57436
const OP = 57437
const ASC = 57438
const DESC = 57439
const ORDER = 57440

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"COMMAND",
	"SHOW",
	"KILL",
	"WHERE",
	"OR",
	"AND",
	"TEQ",
	"TCOMMA",
	"SCONST",
	"ICONST",
	"TSEMICOLON",
	"TOPENBR",
	"TCLOSEBR",
	"SHUTDOWN",
	"LISTEN",
	"REGISTER",
	"UNREGISTER",
	"ROUTER",
	"ROUTE",
	"CREATE",
	"ADD",
	"DROP",
	"LOCK",
	"UNLOCK",
	"SPLIT",
	"MOVE",
	"COMPOSE",
	"SET",
	"CASCADE",
	"ATTACH",
	"ALTER",
	"DETACH",
	"REDISTRIBUTE",
	"REFERENCE",
	"CHECK",
	"APPLY",
	"SHARDING",
	"COLUMN",
	"TABLE",
	"HASH",
	"FUNCTION",
	"KEY",
	"RANGE",
	"DISTRIBUTION",
	"RELATION",
	"REPLICATED",
	"AUTO",
	"INCREMENT",
	"SEQUENCE",
	"SCHEMA",
	"SHARDS",
	"KEY_RANGES",
	"ROUTERS",
	"SHARD",
	"HOST",
	"SHARDING_RULES",
	"RULE",
	"COLUMNS",
	"VERSION",
	"HOSTS",
	"SEQUENCES",
	"IS_READ_ONLY",
	"BY",
	"FROM",
	"TO",
	"WITH",
	"UNITE",
	"ALL",
	"ADDRESS",
	"FOR",
	"CLIENT",
	"BATCH",
	"SIZE",
	"INVALIDATE",
	"CACHE",
	"RETRY",
	"IDENTITY",
	"MURMUR",
	"CITY",
	"START",
	"STOP",
	"TRACE",
	"MESSAGES",
	"TASK",
	"GROUP",
	"VARCHAR",
	"INTEGER",
	"INT",
	"TYPES",
	"UUID",
	"OP",
	"ASC",
	"DESC",
	"ORDER",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:1014

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 346

var yyAct = [...]int16{
	156, 252, 212, 267, 185, 180, 215, 206, 179, 155,
	178, 171, 177, 183, 153, 170, 164, 137, 107, 264,
	265, 168, 188, 207, 208, 209, 64, 210, 167, 152,
	112, 62, 133, 66, 144, 70, 104, 60, 69, 59,
	92, 79, 233, 67, 257, 258, 259, 200, 102, 173,
	94, 103, 214, 161, 99, 78, 141, 124, 260, 95,
	245, 95, 95, 95, 123, 122, 95, 110, 111, 174,
	113, 95, 176, 68, 121, 225, 198, 189, 182, 142,
	173, 214, 118, 120, 106, 97, 51, 253, 125, 126,
	186, 52, 110, 49, 234, 50, 224, 186, 136, 139,
	174, 273, 143, 53, 138, 165, 147, 149, 91, 145,
	70, 115, 162, 241, 114, 105, 147, 96, 98, 251,
	72, 242, 157, 158, 159, 160, 77, 148, 150, 146,
	127, 109, 100, 58, 216, 140, 51, 239, 238, 175,
	186, 52, 237, 49, 95, 50, 101, 135, 108, 166,
	93, 184, 48, 53, 169, 231, 232, 61, 88, 65,
	131, 132, 129, 202, 87, 47, 204, 220, 220, 194,
	201, 119, 46, 45, 217, 218, 95, 57, 243, 221,
	203, 44, 213, 138, 117, 211, 71, 73, 154, 219,
	56, 184, 83, 84, 85, 86, 222, 55, 54, 226,
	90, 262, 191, 81, 229, 227, 220, 193, 192, 235,
	81, 230, 80, 82, 240, 228, 191, 223, 43, 80,
	181, 193, 192, 213, 95, 248, 236, 196, 75, 1,
	22, 244, 246, 199, 197, 249, 19, 18, 17, 250,
	16, 15, 255, 14, 254, 12, 261, 13, 8, 9,
	151, 263, 268, 187, 269, 134, 205, 130, 163, 128,
	21, 270, 89, 272, 271, 20, 30, 31, 256, 172,
	247, 274, 266, 276, 268, 275, 278, 277, 33, 32,
	38, 39, 6, 5, 24, 23, 27, 28, 29, 34,
	35, 4, 3, 7, 11, 40, 10, 36, 76, 74,
	63, 2, 195, 190, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 37, 0, 0, 0, 0, 0, 0, 41, 0,
	42, 0, 0, 0, 25, 26,
}

var yyPact = [...]int16{
	260, -1000, 166, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 45, 95, -47, -49, -15, 74, 74,
	224, 51, 199, -1000, 74, 74, 74, 74, 142, 136,
	60, -39, 120, -1000, -1000, -1000, -1000, -1000, -1000, 220,
	69, 24, 71, 62, -1000, -1000, -1000, -1000, 103, -24,
	-51, -1000, 68, -1000, 23, 115, 59, 220, -59, 220,
	66, -1000, 64, -1000, 176, -1000, 157, 157, -1000, -1000,
	-1000, -1000, -1000, 6, -4, -5, -13, 220, 58, -1000,
	126, 220, -1000, -56, 105, -1000, -1000, 140, 67, -14,
	15, 220, -53, 157, -1000, 57, 55, -1000, -1000, 115,
	-1000, -1000, -1000, -1000, -1000, 220, -60, 172, -1000, -1000,
	-1000, 220, 220, 220, 220, -20, -1000, -1000, -1000, 63,
	-1000, 56, 56, -61, -1000, -72, 61, 38, 220, 4,
	206, 14, 199, 39, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -76, 10, 212, 172, 223, -1000, 9, -1000, -29,
	-1000, 199, 220, 56, -1000, 220, -1000, -1000, -67, 38,
	7, -1000, 90, 220, 220, -1000, 206, 156, -1000, -1000,
	-1000, -1000, 199, 205, -1000, -1000, 44, -1000, 8, 220,
	172, -1000, -1000, -1000, 198, 199, -1000, -1000, 206, 116,
	-35, -1000, -1000, -1000, 46, 214, -1000, 98, 94, 93,
	-1000, 7, -1000, -1000, 65, -1000, 76, -1000, -1000, 155,
	206, -9, 205, 199, 220, 220, -1000, 212, -1000, -1000,
	194, -1000, -1000, 157, 73, 33, -67, -1000, -1000, -1000,
	-1000, 220, -37, -11, -1000, 220, -1000, 189, -1000, -77,
	-1000, 220, -1000, 220, -1000, -1000, -1000, -1000, -1000, -1000,
	220, -22, 220, -1000, -1000, -1000, 89, -1000, 90, -1000,
	-22, -1000, -1000, 220, 33, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 304, 14, 10, 12, 303, 302, 9, 8, 0,
	5, 301, 300, 157, 159, 299, 298, 296, 294, 293,
	292, 291, 283, 282, 173, 172, 165, 152, 15, 272,
	11, 4, 270, 1, 3, 17, 269, 6, 268, 2,
	265, 262, 260, 259, 258, 257, 16, 256, 255, 13,
	7, 18, 253, 251, 250, 249, 248, 247, 245, 243,
	241, 240, 238, 237, 236, 233, 230, 229, 218,
}

var yyR1 = [...]int8{
	0, 67, 68, 68, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 10, 8, 8, 8, 9, 5,
	5, 5, 6, 6, 7, 2, 2, 2, 1, 1,
	15, 16, 51, 51, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 20, 20, 20, 20, 22, 22, 23,
	40, 41, 41, 41, 29, 29, 34, 46, 46, 31,
	31, 33, 33, 32, 32, 44, 44, 43, 45, 21,
	21, 21, 21, 21, 53, 53, 53, 52, 52, 54,
	54, 17, 56, 24, 24, 48, 48, 47, 47, 50,
	50, 50, 50, 50, 50, 50, 25, 25, 28, 28,
	30, 35, 35, 36, 36, 38, 38, 38, 37, 37,
	39, 39, 3, 3, 4, 4, 26, 26, 27, 27,
	49, 49, 55, 12, 13, 14, 14, 59, 18, 18,
	60, 61, 61, 61, 65, 65, 62, 58, 57, 42,
	63, 64, 64, 66,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 0, 2,
	1, 1, 1, 0, 2, 4, 2, 4, 3, 4,
	3, 3, 3, 2, 2, 2, 2, 4, 4, 3,
	2, 2, 4, 2, 3, 1, 2, 7, 4, 3,
	0, 2, 0, 1, 3, 1, 2, 2, 2, 2,
	2, 2, 2, 5, 1, 1, 0, 4, 0, 3,
	0, 5, 2, 3, 2, 3, 0, 3, 1, 1,
	2, 1, 1, 2, 2, 1, 6, 5, 1, 2,
	2, 2, 0, 2, 2, 1, 1, 1, 3, 0,
	3, 0, 1, 1, 1, 3, 9, 8, 5, 4,
	1, 3, 2, 3, 3, 2, 2, 6, 3, 3,
	4, 5, 6, 6, 3, 0, 4, 2, 1, 2,
	5, 3, 3, 4,
}

var yyChk = [...]int16{
	-1000, -67, -11, -20, -21, -22, -23, -19, -56, -55,
	-17, -18, -58, -57, -59, -60, -61, -62, -63, -64,
	-40, -42, -66, 25, 24, 84, 85, 26, 27, 28,
	6, 7, 19, 18, 29, 30, 37, 71, 20, 21,
	35, 78, 80, -68, 15, -24, -25, -26, -27, 48,
	50, 41, 46, 58, -24, -25, -26, -27, 38, 86,
	86, -13, 46, -12, 41, -14, 48, 58, 88, 53,
	50, -13, 46, -13, -15, 4, -16, 75, 4, -8,
	13, 4, 14, -13, -13, -13, -13, 22, 22, -41,
	-14, 48, 79, 30, -9, 4, 48, 61, 47, -9,
	70, 43, 72, 75, 87, 47, 61, -51, 33, 72,
	-9, -9, 89, -9, 48, 47, -1, 8, -10, 14,
	-10, 68, 69, 69, 70, -9, -9, 72, -43, 36,
	-45, 34, 35, 88, -48, 42, -9, -35, 43, -9,
	68, 70, 64, -9, 87, -10, 72, -9, 72, -9,
	-51, -54, 89, -2, 16, -7, -9, -9, -9, -9,
	-9, 73, 49, -44, -46, 49, -46, 89, 93, -35,
	-28, -30, -36, 42, 62, -9, 68, -4, -3, -8,
	-10, 14, 64, -49, -8, -31, 51, -52, 98, 67,
	-5, 4, 10, 9, -2, -6, 4, 11, 67, -65,
	76, -8, -9, -46, -9, -47, -50, 90, 91, 92,
	94, -28, -39, -30, 74, -37, 44, -9, -9, -4,
	12, 23, -49, 12, 52, 67, -7, -2, 17, -8,
	-4, 39, 40, 77, 48, -31, 12, 44, 44, 44,
	-39, 48, 45, 23, -3, 69, -8, -32, -9, -7,
	-10, 46, -33, 54, -50, -9, -38, 81, 82, 83,
	69, -9, 12, -53, 96, 97, -29, -34, -9, -9,
	-9, -39, -9, 12, -31, -37, -39, -34, -33,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1, 3, 53, 54, 55, 56, 0,
	0, 0, 0, 0, 79, 80, 81, 82, 0, 0,
	0, 44, 0, 46, 0, 43, 0, 0, 0, 0,
	0, 92, 0, 132, 38, 40, 0, 0, 41, 147,
	25, 26, 27, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 149, 0, 96, 28, 94, 112, 0, 0,
	0, 0, 0, 0, 59, 0, 0, 48, 42, 43,
	135, 50, 51, 52, 136, 0, 90, 0, 138, 24,
	139, 0, 0, 0, 0, 0, 151, 152, 61, 0,
	63, 0, 0, 0, 93, 0, 112, 0, 0, 0,
	0, 0, 0, 70, 57, 58, 45, 134, 47, 133,
	49, 88, 0, 39, 0, 0, 34, 0, 140, 145,
	146, 0, 0, 77, 75, 0, 78, 153, 0, 0,
	121, 108, 119, 0, 0, 111, 0, 0, 124, 122,
	123, 24, 0, 129, 130, 83, 0, 91, 0, 0,
	0, 29, 30, 31, 0, 0, 32, 33, 0, 141,
	0, 150, 62, 76, 70, 95, 98, 99, 101, 102,
	105, 121, 107, 109, 0, 110, 0, 113, 114, 0,
	0, 0, 128, 0, 0, 0, 89, 37, 35, 36,
	137, 142, 143, 0, 0, 72, 0, 100, 103, 104,
	106, 0, 0, 0, 125, 0, 131, 69, 73, 86,
	144, 0, 68, 0, 97, 120, 118, 115, 116, 117,
	0, 121, 0, 87, 84, 85, 70, 65, 119, 71,
	121, 127, 74, 0, 72, 66, 126, 64, 67,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:254
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:255
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:260
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:264
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:268
		{
			setParseTree(yylex, yyDollar[1].trace)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:272
		{
			setParseTree(yylex, yyDollar[1].stoptrace)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:276
		{
			setParseTree(yylex, yyDollar[1].drop)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:280
		{
			setParseTree(yylex, yyDollar[1].lock)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:284
		{
			setParseTree(yylex, yyDollar[1].unlock)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:288
		{
			setParseTree(yylex, yyDollar[1].show)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:292
		{
			setParseTree(yylex, yyDollar[1].kill)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:296
		{
			setParseTree(yylex, yyDollar[1].listen)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:300
		{
			setParseTree(yylex, yyDollar[1].shutdown)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:304
		{
			setParseTree(yylex, yyDollar[1].split)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:308
		{
			setParseTree(yylex, yyDollar[1].move)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:312
		{
			setParseTree(yylex, yyDollar[1].redistribute)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:316
		{
			setParseTree(yylex, yyDollar[1].unite)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:320
		{
			setParseTree(yylex, yyDollar[1].register_router)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:324
		{
			setParseTree(yylex, yyDollar[1].unregister_router)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:328
		{
			setParseTree(yylex, yyDollar[1].alter)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:332
		{
			setParseTree(yylex, yyDollar[1].invalidate_cache)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:336
		{
			setParseTree(yylex, yyDollar[1].retryMoveTaskGroup)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:341
		{
			yyVAL.uinteger = uint(yyDollar[1].uinteger)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:346
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:350
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:352
		{
			yyVAL.str = strconv.Itoa(int(yyDollar[1].uinteger))
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:357
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:363
		{
			yyVAL.str = yyDollar[1].str
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:365
		{
			yyVAL.str = "AND"
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:367
		{
			yyVAL.str = "OR"
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:372
		{
			yyVAL.str = yyDollar[1].str
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:374
		{
			yyVAL.str = "="
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:380
		{
			yyVAL.colref = ColumnRef{
				ColName: yyDollar[1].str,
			}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:388
		{
			yyVAL.where = yyDollar[2].where
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:391
		{
			yyVAL.where = WhereClauseLeaf{
				ColRef: yyDollar[1].colref,
				Op:     yyDollar[2].str,
				Value:  yyDollar[3].str,
			}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:399
		{
			yyVAL.where = WhereClauseOp{
				Op:    yyDollar[2].str,
				Left:  yyDollar[1].where,
				Right: yyDollar[3].where,
			}
		}
	case 38:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:409
		{
			yyVAL.where = WhereClauseEmpty{}
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:413
		{
			yyVAL.where = yyDollar[2].where
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:420
		{
			switch v := strings.ToLower(string(yyDollar[1].str)); v {
			case DatabasesStr, RoutersStr, PoolsStr, InstanceStr, ShardsStr, BackendConnectionsStr, KeyRangesStr, ShardingRules, ClientsStr, StatusStr, DistributionsStr, VersionStr, RelationsStr, TaskGroupStr, PreparedStatementsStr, QuantilesStr, SequencesStr, IsReadOnlyStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:431
		{
			switch v := string(yyDollar[1].str); v {
			case ClientStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:441
		{
			yyVAL.bool = true
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:441
		{
			yyVAL.bool = false
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:445
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].key_range_selector}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:449
		{
			yyVAL.drop = &Drop{Element: &KeyRangeSelector{KeyRangeID: `*`}}
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:453
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].sharding_rule_selector}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:457
		{
			yyVAL.drop = &Drop{Element: &ShardingRuleSelector{ID: `*`}}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:461
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].distribution_selector, CascadeDelete: yyDollar[3].bool}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:465
		{
			yyVAL.drop = &Drop{Element: &DistributionSelector{ID: `*`}, CascadeDelete: yyDollar[4].bool}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:469
		{
			yyVAL.drop = &Drop{Element: &ShardSelector{ID: yyDollar[3].str}}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:473
		{
			yyVAL.drop = &Drop{Element: &TaskGroupSelector{}}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:477
		{
			yyVAL.drop = &Drop{Element: &SequenceSelector{Name: yyDollar[3].str}}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:484
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:489
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:494
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:498
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:504
		{
			yyVAL.trace = &TraceStmt{All: true}
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:507
		{
			yyVAL.trace = &TraceStmt{
				Client: yyDollar[4].uinteger,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:515
		{
			yyVAL.stoptrace = &StopTraceStmt{}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:521
		{
			yyVAL.alter = &Alter{Element: yyDollar[2].alter_distribution}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:527
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AttachRelation{
					Distribution: yyDollar[1].distribution_selector,
					Relations:    yyDollar[2].relations,
				},
			}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:536
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &DetachRelation{
					Distribution: yyDollar[1].distribution_selector,
					RelationName: yyDollar[4].str,
				},
			}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:545
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AlterRelation{
					Distribution: yyDollar[1].distribution_selector,
					Relation:     yyDollar[2].distributed_relation,
				},
			}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:557
		{
			yyVAL.dEntrieslist = append(yyDollar[1].dEntrieslist, yyDollar[3].distrKeyEntry)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:559
		{
			yyVAL.dEntrieslist = []DistributionKeyEntry{
				yyDollar[1].distrKeyEntry,
			}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:569
		{
			yyVAL.distrKeyEntry = DistributionKeyEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 67:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:578
		{
			yyVAL.distributed_relation = &DistributedRelation{
				Name:                 yyDollar[2].str,
				SchemaName:           yyDollar[7].str,
				DistributionKey:      yyDollar[5].dEntrieslist,
				AutoIncrementColumns: yyDollar[6].strlist,
			}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:587
		{
			yyVAL.distributed_relation = &DistributedRelation{
				Name:                 yyDollar[2].str,
				SchemaName:           yyDollar[4].str,
				ReplicatedRelation:   true,
				AutoIncrementColumns: yyDollar[3].strlist,
			}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:598
		{
			yyVAL.strlist = yyDollar[3].strlist
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:600
		{
			yyVAL.strlist = nil
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:605
		{
			yyVAL.str = yyDollar[2].str
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:607
		{
			yyVAL.str = ""
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:612
		{
			yyVAL.strlist = []string{yyDollar[1].str}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:614
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:620
		{
			yyVAL.relations = []*DistributedRelation{yyDollar[1].distributed_relation}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:622
		{
			yyVAL.relations = append(yyDollar[1].relations, yyDollar[2].distributed_relation)
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:627
		{
			yyVAL.relations = yyDollar[2].relations
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:632
		{
			yyVAL.distributed_relation = yyDollar[2].distributed_relation
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:638
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:643
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:648
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:653
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:658
		{
			yyVAL.create = &Create{
				Element: &ReferenceRelationDefinition{
					TableName:            yyDollar[4].str,
					AutoIncrementColumns: yyDollar[5].strlist,
				},
			}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:668
		{
			yyVAL.opt_asc_desc = &SortByAsc{}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:669
		{
			yyVAL.opt_asc_desc = &SortByDesc{}
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:670
		{
			yyVAL.opt_asc_desc = &SortByDefault{}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:674
		{
			yyVAL.order_clause = &Order{Col: yyDollar[3].colref, OptAscDesc: yyDollar[4].opt_asc_desc}
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:677
		{
			yyVAL.order_clause = OrderClause(nil)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:682
		{
			yyVAL.group_clause = GroupBy{Col: yyDollar[3].colref}
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:685
		{
			yyVAL.group_clause = GroupByClauseEmpty{}
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:690
		{
			yyVAL.show = &Show{Cmd: yyDollar[2].str, Where: yyDollar[3].where, GroupBy: yyDollar[4].group_clause, Order: yyDollar[5].order_clause}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:695
		{
			yyVAL.lock = &Lock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:703
		{
			yyVAL.ds = &DistributionDefinition{
				ID:       yyDollar[2].str,
				ColTypes: yyDollar[3].strlist,
			}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:710
		{
			yyVAL.ds = &DistributionDefinition{
				Replicated: true,
			}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:718
		{
			yyVAL.strlist = yyDollar[3].strlist
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:720
		{
			/* empty column types should be prohibited */
			yyVAL.strlist = nil
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:726
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:728
		{
			yyVAL.strlist = []string{
				yyDollar[1].str,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:735
		{
			yyVAL.str = "varchar"
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:737
		{
			yyVAL.str = "varchar hashed"
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:739
		{
			yyVAL.str = "integer"
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:741
		{
			yyVAL.str = "integer"
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:743
		{
			yyVAL.str = "uinteger"
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:745
		{
			yyVAL.str = "uinteger"
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:747
		{
			yyVAL.str = "uuid"
		}
	case 106:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:753
		{
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: yyDollar[3].str, TableName: yyDollar[4].str, Entries: yyDollar[5].entrieslist, Distribution: yyDollar[6].str}
		}
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:758
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: "shrule" + str, TableName: yyDollar[3].str, Entries: yyDollar[4].entrieslist, Distribution: yyDollar[5].str}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:767
		{
			yyVAL.entrieslist = make([]ShardingRuleEntry, 0)
			yyVAL.entrieslist = append(yyVAL.entrieslist, yyDollar[1].shruleEntry)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:773
		{
			yyVAL.entrieslist = append(yyDollar[1].entrieslist, yyDollar[2].shruleEntry)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:779
		{
			yyVAL.shruleEntry = ShardingRuleEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:788
		{
			yyVAL.str = yyDollar[2].str
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:791
		{
			yyVAL.str = ""
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:795
		{
			yyVAL.str = yyDollar[2].str
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:800
		{
			yyVAL.str = yyDollar[2].str
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:806
		{
			yyVAL.str = "identity"
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:808
		{
			yyVAL.str = "murmur"
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:810
		{
			yyVAL.str = "city"
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:816
		{
			yyVAL.str = yyDollar[3].str
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:818
		{
			yyVAL.str = ""
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:823
		{
			yyVAL.str = yyDollar[3].str
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:825
		{
			yyVAL.str = "default"
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:830
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:833
		{
			buf := make([]byte, 8)
			binary.PutVarint(buf, int64(yyDollar[1].uinteger))
			yyVAL.bytes = buf
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:840
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: [][]byte{
					yyDollar[1].bytes,
				},
			}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:847
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: append(yyDollar[1].krbound.Pivots, yyDollar[3].bytes),
			}
		}
	case 126:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:856
		{
			yyVAL.kr = &KeyRangeDefinition{
				KeyRangeID:   yyDollar[3].str,
				LowerBound:   yyDollar[5].krbound,
				ShardID:      yyDollar[8].str,
				Distribution: yyDollar[9].str,
			}
		}
	case 127:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:865
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.kr = &KeyRangeDefinition{
				LowerBound:   yyDollar[4].krbound,
				ShardID:      yyDollar[7].str,
				Distribution: yyDollar[8].str,
				KeyRangeID:   "kr" + str,
			}
		}
	case 128:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:880
		{
			yyVAL.shard = &ShardDefinition{Id: yyDollar[2].str, Hosts: yyDollar[5].strlist}
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:885
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.shard = &ShardDefinition{Id: "shard" + str, Hosts: yyDollar[4].strlist}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:895
		{
			yyVAL.strlist = []string{yyDollar[1].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:900
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:906
		{
			yyVAL.unlock = &Unlock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:912
		{
			yyVAL.sharding_rule_selector = &ShardingRuleSelector{ID: yyDollar[3].str}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:918
		{
			yyVAL.key_range_selector = &KeyRangeSelector{KeyRangeID: yyDollar[3].str}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:924
		{
			yyVAL.distribution_selector = &DistributionSelector{ID: yyDollar[2].str, Replicated: false}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:926
		{
			yyVAL.distribution_selector = &DistributionSelector{Replicated: true, ID: "REPLICATED"}
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:932
		{
			yyVAL.split = &SplitKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeFromID: yyDollar[4].str, Border: yyDollar[6].krbound}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:938
		{
			yyVAL.kill = &Kill{Cmd: yyDollar[2].str, Target: yyDollar[3].uinteger}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:941
		{
			yyVAL.kill = &Kill{Cmd: "client", Target: yyDollar[3].uinteger}
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:947
		{
			yyVAL.move = &MoveKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:953
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Check: true, Apply: true}
		}
	case 142:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:955
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Check: true}
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:957
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Apply: true}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:961
		{
			yyVAL.opt_batch_size = int(yyDollar[3].uinteger)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:962
		{
			yyVAL.opt_batch_size = -1
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:966
		{
			yyVAL.unite = &UniteKeyRange{KeyRangeIDL: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeIDR: yyDollar[4].str}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:972
		{
			yyVAL.listen = &Listen{addr: yyDollar[2].str}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:978
		{
			yyVAL.shutdown = &Shutdown{}
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:984
		{
			yyVAL.invalidate_cache = &InvalidateCache{}
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:992
		{
			yyVAL.register_router = &RegisterRouter{ID: yyDollar[3].str, Addr: yyDollar[5].str}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:998
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: yyDollar[3].str}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1003
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: `*`}
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1011
		{
			yyVAL.retryMoveTaskGroup = &RetryMoveTaskGroup{}
		}
	}
	goto yystack /* stack new state and value */
}
