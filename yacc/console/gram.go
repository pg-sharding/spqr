// Code generated by goyacc -o gram.go -p yy gram.y. DO NOT EDIT.

//line gram.y:3
package spqrparser

import __yyfmt__ "fmt"

//line gram.y:3

import (
	"crypto/rand"
	"encoding/binary"
	"encoding/hex"
	"github.com/pg-sharding/spqr/qdb"
	"math"
	"strings"
)

const SIGNED_INT_RANGE_ERROR string = "the Signed Value should be at the range of [-9223372036854775808, 9223372036854775807]."

func randomHex(n int) (string, error) {
	bytes := make([]byte, n)
	if _, err := rand.Read(bytes); err != nil {
		return "", err
	}
	return hex.EncodeToString(bytes), nil
}

//line gram.y:27
type yySymType struct {
	yys          int
	str          string
	strlist      []string
	byte         byte
	bytes        []byte
	integer      int
	uinteger     uint
	uintegerlist []uint
	bool         bool
	empty        struct{}

	set       *Set
	statement Statement
	show      *Show

	drop   *Drop
	create *Create

	kill   *Kill
	lock   *Lock
	unlock *Unlock

	krbound *KeyRangeBound

	qname         *QualifiedName
	ds            *DistributionDefinition
	kr            *KeyRangeDefinition
	shard         *ShardDefinition
	sharding_rule *ShardingRuleDefinition

	register_router   *RegisterRouter
	unregister_router *UnregisterRouter

	split *SplitKeyRange
	move  *MoveKeyRange
	unite *UniteKeyRange

	redistribute *RedistributeKeyRange

	invalidate_cache      *InvalidateCache
	sync_reference_tables *SyncReferenceTables

	shutdown *Shutdown
	listen   *Listen

	trace     *TraceStmt
	stoptrace *StopTraceStmt

	distribution *DistributionDefinition

	alter                *Alter
	alter_distribution   *AlterDistribution
	distributed_relation *DistributedRelation
	alter_default_shard  *AlterDefaultShard

	relations    []*DistributedRelation
	relation     *DistributedRelation
	entrieslist  []ShardingRuleEntry
	dEntrieslist []DistributionKeyEntry

	shruleEntry ShardingRuleEntry

	distrKeyEntry DistributionKeyEntry
	aiEntry       *AutoIncrementEntry

	sharding_rule_selector *ShardingRuleSelector
	key_range_selector     *KeyRangeSelector
	distribution_selector  *DistributionSelector
	aiEntrieslist          []*AutoIncrementEntry

	colref ColumnRef
	where  WhereClauseNode

	order_clause OrderClause
	opt_asc_desc OptAscDesc

	group_clause GroupByClause

	opt_batch_size int

	retryMoveTaskGroup *RetryMoveTaskGroup
}

const IDENT = 57346
const COMMAND = 57347
const SHOW = 57348
const KILL = 57349
const WHERE = 57350
const OR = 57351
const AND = 57352
const TEQ = 57353
const TCOMMA = 57354
const TDOT = 57355
const SCONST = 57356
const ICONST = 57357
const INVALID_ICONST = 57358
const TSEMICOLON = 57359
const TMINUS = 57360
const TPLUS = 57361
const TOPENBR = 57362
const TCLOSEBR = 57363
const SHUTDOWN = 57364
const LISTEN = 57365
const REGISTER = 57366
const UNREGISTER = 57367
const ROUTER = 57368
const ROUTE = 57369
const CREATE = 57370
const ADD = 57371
const DROP = 57372
const LOCK = 57373
const UNLOCK = 57374
const SPLIT = 57375
const MOVE = 57376
const COMPOSE = 57377
const SET = 57378
const CASCADE = 57379
const ATTACH = 57380
const ALTER = 57381
const DETACH = 57382
const REDISTRIBUTE = 57383
const REFERENCE = 57384
const CHECK = 57385
const APPLY = 57386
const SHARDING = 57387
const COLUMN = 57388
const TABLE = 57389
const TABLES = 57390
const HASH = 57391
const FUNCTION = 57392
const KEY = 57393
const RANGE = 57394
const DISTRIBUTION = 57395
const RELATION = 57396
const REPLICATED = 57397
const AUTO = 57398
const INCREMENT = 57399
const SEQUENCE = 57400
const SCHEMA = 57401
const SHARDS = 57402
const KEY_RANGES = 57403
const ROUTERS = 57404
const SHARD = 57405
const HOST = 57406
const SHARDING_RULES = 57407
const RULE = 57408
const COLUMNS = 57409
const VERSION = 57410
const HOSTS = 57411
const SEQUENCES = 57412
const IS_READ_ONLY = 57413
const MOVE_STATS = 57414
const BY = 57415
const FROM = 57416
const TO = 57417
const WITH = 57418
const UNITE = 57419
const ALL = 57420
const ADDRESS = 57421
const FOR = 57422
const CLIENT = 57423
const BATCH = 57424
const SIZE = 57425
const INVALIDATE = 57426
const CACHE = 57427
const SYNC = 57428
const RETRY = 57429
const DISTRIBUTED = 57430
const IN = 57431
const ON = 57432
const DEFAULT = 57433
const IDENTITY = 57434
const MURMUR = 57435
const CITY = 57436
const START = 57437
const STOP = 57438
const TRACE = 57439
const MESSAGES = 57440
const TASK = 57441
const GROUP = 57442
const VARCHAR = 57443
const INTEGER = 57444
const INT = 57445
const TYPES = 57446
const UUID = 57447
const OP = 57448
const ASC = 57449
const DESC = 57450
const ORDER = 57451

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"COMMAND",
	"SHOW",
	"KILL",
	"WHERE",
	"OR",
	"AND",
	"TEQ",
	"TCOMMA",
	"TDOT",
	"SCONST",
	"ICONST",
	"INVALID_ICONST",
	"TSEMICOLON",
	"TMINUS",
	"TPLUS",
	"TOPENBR",
	"TCLOSEBR",
	"SHUTDOWN",
	"LISTEN",
	"REGISTER",
	"UNREGISTER",
	"ROUTER",
	"ROUTE",
	"CREATE",
	"ADD",
	"DROP",
	"LOCK",
	"UNLOCK",
	"SPLIT",
	"MOVE",
	"COMPOSE",
	"SET",
	"CASCADE",
	"ATTACH",
	"ALTER",
	"DETACH",
	"REDISTRIBUTE",
	"REFERENCE",
	"CHECK",
	"APPLY",
	"SHARDING",
	"COLUMN",
	"TABLE",
	"TABLES",
	"HASH",
	"FUNCTION",
	"KEY",
	"RANGE",
	"DISTRIBUTION",
	"RELATION",
	"REPLICATED",
	"AUTO",
	"INCREMENT",
	"SEQUENCE",
	"SCHEMA",
	"SHARDS",
	"KEY_RANGES",
	"ROUTERS",
	"SHARD",
	"HOST",
	"SHARDING_RULES",
	"RULE",
	"COLUMNS",
	"VERSION",
	"HOSTS",
	"SEQUENCES",
	"IS_READ_ONLY",
	"MOVE_STATS",
	"BY",
	"FROM",
	"TO",
	"WITH",
	"UNITE",
	"ALL",
	"ADDRESS",
	"FOR",
	"CLIENT",
	"BATCH",
	"SIZE",
	"INVALIDATE",
	"CACHE",
	"SYNC",
	"RETRY",
	"DISTRIBUTED",
	"IN",
	"ON",
	"DEFAULT",
	"IDENTITY",
	"MURMUR",
	"CITY",
	"START",
	"STOP",
	"TRACE",
	"MESSAGES",
	"TASK",
	"GROUP",
	"VARCHAR",
	"INTEGER",
	"INT",
	"TYPES",
	"UUID",
	"OP",
	"ASC",
	"DESC",
	"ORDER",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:1227

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 361

var yyAct = [...]int{

	178, 250, 299, 267, 130, 253, 214, 212, 296, 177,
	244, 213, 206, 199, 154, 205, 198, 175, 110, 220,
	173, 117, 320, 321, 196, 221, 245, 246, 247, 74,
	248, 191, 68, 174, 122, 148, 164, 114, 66, 64,
	70, 63, 32, 33, 315, 73, 84, 307, 308, 309,
	71, 195, 187, 101, 186, 264, 105, 241, 35, 34,
	40, 41, 192, 161, 26, 25, 29, 30, 31, 36,
	37, 120, 121, 98, 123, 42, 278, 38, 201, 234,
	112, 83, 60, 113, 252, 53, 72, 132, 184, 102,
	127, 54, 102, 52, 138, 139, 158, 102, 120, 202,
	102, 102, 137, 55, 153, 156, 310, 102, 160, 291,
	136, 204, 252, 39, 135, 107, 167, 169, 165, 134,
	43, 270, 45, 44, 232, 171, 172, 167, 62, 222,
	211, 27, 28, 159, 116, 180, 181, 182, 183, 103,
	201, 170, 242, 238, 237, 80, 268, 316, 265, 53,
	179, 193, 125, 108, 215, 54, 203, 52, 82, 109,
	109, 202, 216, 168, 106, 189, 190, 55, 197, 218,
	129, 166, 111, 86, 140, 119, 217, 157, 185, 215,
	287, 97, 126, 85, 87, 115, 236, 88, 104, 266,
	124, 215, 288, 240, 227, 76, 235, 254, 285, 231,
	284, 79, 255, 256, 283, 150, 149, 239, 155, 102,
	152, 69, 251, 100, 249, 276, 277, 118, 65, 261,
	257, 99, 258, 94, 144, 145, 51, 93, 102, 294,
	258, 47, 271, 146, 147, 142, 131, 289, 279, 219,
	274, 272, 280, 281, 176, 259, 50, 260, 275, 75,
	77, 286, 155, 59, 96, 89, 90, 91, 92, 49,
	48, 133, 262, 251, 313, 258, 297, 300, 282, 301,
	224, 290, 293, 58, 292, 226, 225, 128, 102, 224,
	302, 269, 163, 303, 226, 225, 57, 56, 305, 86,
	229, 61, 311, 304, 46, 1, 273, 230, 208, 85,
	87, 22, 312, 88, 233, 317, 318, 19, 207, 209,
	18, 322, 210, 323, 297, 17, 16, 300, 15, 326,
	325, 327, 324, 14, 328, 12, 13, 8, 9, 319,
	194, 263, 151, 243, 143, 188, 141, 23, 21, 95,
	24, 20, 306, 200, 314, 295, 298, 162, 6, 5,
	4, 3, 7, 11, 10, 81, 78, 67, 2, 228,
	223,
}
var yyPact = [...]int{

	36, -1000, 214, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 104, 40, -56, -58, -13,
	144, 144, 141, 77, 285, -1000, 144, 144, 144, 144,
	201, 197, 128, -12, 187, 171, -1000, -1000, -1000, -1000,
	-1000, -1000, 274, 73, 136, 88, -1000, -1000, -1000, -1000,
	106, 118, -1000, 2, -61, -1000, 133, -1000, 68, 180,
	97, 274, -66, 274, 105, -1000, 130, -1000, 269, 269,
	-1000, 221, 221, -1000, -1000, -1000, -1000, -1000, 246, 45,
	39, 35, 26, 274, 96, -1000, 195, 274, -1000, -64,
	158, 164, -1000, 205, 103, 20, 64, 274, -1000, -1000,
	-26, 278, -62, 221, -1000, 93, 85, -1000, -1000, 180,
	-1000, -1000, -1000, -1000, 274, 274, 274, -67, 224, -67,
	-1000, -1000, -1000, -1000, 274, 274, 274, 274, 9, -1000,
	-1000, -1000, 124, -1000, -37, -39, 118, 118, -69, -28,
	274, -40, -80, 161, 94, 274, 37, 294, 61, 285,
	98, 274, 123, 226, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -84, 56, 266, 224, 286, -1000, -84,
	51, -1000, -3, -1000, 285, 274, 81, 80, 118, -1000,
	-1000, -1000, 274, -33, -1000, 79, -75, 94, 32, -1000,
	148, 274, 274, -1000, 294, 218, -1000, -1000, -1000, -1000,
	232, 285, 250, -1000, -35, 91, -1000, 138, 87, 277,
	-1000, 48, 274, 224, -1000, -1000, -1000, 275, 285, -1000,
	-1000, -1000, 294, 172, -7, -1000, -1000, 274, -1000, -1000,
	-1000, 274, 274, 256, -1000, 155, 151, 149, -1000, 32,
	-1000, -1000, 127, -1000, 142, -1000, -1000, 210, 294, 34,
	-1000, 250, 285, -1000, 169, 274, 274, -1000, 274, -1000,
	274, -1000, 266, -1000, -1000, 253, -1000, -1000, 221, -1000,
	-1000, -1000, -75, -1000, -1000, -1000, -1000, 274, -45, 31,
	-1000, 274, -1000, 250, 285, 252, -1000, -51, 135, -1000,
	148, -1000, -85, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	274, 4, 250, 274, -1000, 221, 274, 87, -1000, -1000,
	-1000, -1000, 4, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 90, 17, 12, 15, 360, 359, 9, 11, 0,
	4, 359, 358, 357, 218, 211, 356, 355, 354, 353,
	352, 351, 350, 349, 348, 347, 260, 259, 246, 226,
	16, 346, 6, 345, 344, 13, 3, 2, 8, 14,
	343, 5, 342, 1, 341, 340, 339, 338, 337, 336,
	335, 334, 18, 333, 332, 7, 331, 10, 21, 330,
	19, 329, 20, 328, 327, 326, 325, 323, 318, 316,
	315, 310, 307, 304, 301, 295, 294, 115, 291,
}
var yyR1 = [...]int{

	0, 75, 76, 76, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 11, 11, 11, 10,
	8, 8, 8, 8, 9, 25, 25, 5, 5, 5,
	6, 6, 7, 2, 2, 2, 1, 1, 16, 17,
	58, 58, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 21, 21, 21, 21, 23, 23, 24,
	44, 46, 46, 46, 46, 46, 31, 31, 37, 52,
	52, 32, 32, 33, 33, 38, 34, 34, 36, 36,
	50, 50, 49, 51, 78, 78, 77, 77, 56, 56,
	56, 22, 22, 22, 22, 22, 45, 61, 61, 61,
	60, 60, 62, 62, 18, 18, 64, 26, 54, 54,
	53, 53, 57, 57, 57, 57, 57, 57, 57, 59,
	59, 27, 27, 30, 30, 35, 39, 39, 40, 40,
	42, 42, 42, 41, 41, 43, 43, 3, 3, 3,
	3, 4, 4, 28, 28, 29, 29, 55, 55, 63,
	13, 14, 15, 67, 19, 19, 68, 69, 69, 69,
	73, 73, 70, 66, 65, 47, 48, 48, 71, 72,
	72, 74,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 2, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 0, 2, 1, 1,
	1, 0, 2, 4, 2, 4, 3, 4, 3, 3,
	3, 4, 4, 2, 2, 2, 2, 4, 4, 3,
	2, 2, 4, 2, 5, 4, 3, 1, 2, 7,
	4, 3, 0, 3, 1, 2, 2, 0, 2, 0,
	1, 2, 2, 2, 1, 0, 1, 1, 2, 3,
	0, 2, 2, 2, 2, 6, 5, 1, 1, 0,
	4, 0, 3, 0, 5, 5, 2, 4, 3, 0,
	3, 1, 1, 2, 1, 1, 2, 2, 1, 3,
	0, 6, 5, 1, 2, 2, 2, 0, 2, 2,
	1, 1, 1, 3, 0, 3, 0, 1, 1, 1,
	2, 1, 3, 9, 8, 5, 4, 1, 3, 2,
	3, 3, 2, 6, 3, 3, 4, 5, 6, 6,
	3, 0, 4, 2, 1, 2, 5, 6, 5, 3,
	3, 4,
}
var yyChk = [...]int{

	-1000, -75, -12, -21, -22, -23, -24, -20, -64, -63,
	-18, -19, -66, -65, -67, -68, -69, -70, -71, -72,
	-44, -47, -74, -48, -45, 29, 28, 95, 96, 30,
	31, 32, 6, 7, 23, 22, 33, 34, 41, 77,
	24, 25, 39, 84, 87, 86, -76, 17, -26, -27,
	-28, -29, 53, 45, 51, 63, -26, -27, -28, -29,
	42, -78, 88, 97, 97, -14, 51, -13, 45, -15,
	53, 63, 99, 58, 42, -14, 51, -14, -16, 60,
	4, -17, 81, 4, -8, 14, 4, 15, 18, -14,
	-14, -14, -14, 26, 26, -46, -15, 53, 85, 34,
	42, -9, 4, 66, 52, -9, 76, -77, 47, 54,
	-52, 54, 78, 81, 98, 52, 66, -58, 37, 78,
	-9, -9, 100, -9, -77, 47, 52, -1, 8, -1,
	-10, 15, -10, 15, 74, 75, 75, 76, -9, -9,
	78, -49, 40, -51, 29, 30, 38, 39, 99, 48,
	47, -54, 46, -9, -39, 47, -9, 74, 76, 69,
	-9, 89, -25, 4, 98, -10, 78, -9, 78, -9,
	-58, -9, -9, -62, 100, -2, 20, -7, -9, -62,
	-9, -9, -9, -9, 79, 54, 91, 91, -50, -52,
	-52, 100, 90, -9, -59, 91, 104, -39, -30, -35,
	-40, 46, 67, -9, 74, -4, -3, 14, 4, 15,
	18, 69, -55, -8, -32, 56, -9, 53, -32, 13,
	-60, 109, 73, -5, 4, 10, 9, -2, -6, 4,
	11, -60, 73, -73, 82, -8, -9, 63, 63, -52,
	-9, 90, 63, -53, -57, 101, 102, 103, 105, -30,
	-43, -35, 80, -41, 49, -9, -9, -4, 12, 27,
	15, -55, 12, -56, 90, 57, 51, -36, 59, 4,
	73, -7, -2, 21, -8, -4, 43, 44, 83, -9,
	-9, -9, 12, 49, 49, 49, -43, 53, 50, 27,
	-3, 75, -8, -55, 60, -33, -38, -9, -31, -37,
	-9, -9, -7, -10, -57, -9, -42, 92, 93, 94,
	75, -9, -55, 12, -34, 95, 12, -32, -41, -61,
	107, 108, -9, -43, -38, -10, -37, -36, -43,
}
var yyDef = [...]int{

	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 3, 63, 64,
	65, 66, 0, 0, 0, 0, 101, 102, 103, 104,
	0, 0, 94, 0, 0, 52, 0, 54, 0, 51,
	0, 0, 0, 0, 0, 116, 0, 159, 46, 46,
	48, 0, 0, 49, 173, 30, 31, 32, 0, 0,
	0, 0, 0, 0, 0, 70, 0, 0, 175, 0,
	0, 119, 34, 137, 0, 0, 0, 0, 96, 97,
	0, 0, 0, 0, 69, 0, 0, 56, 50, 51,
	162, 58, 59, 60, 0, 0, 0, 113, 0, 113,
	164, 29, 165, 33, 0, 0, 0, 0, 0, 179,
	180, 71, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 130, 0, 137, 0, 0, 0, 0, 0, 0,
	82, 0, 82, 35, 67, 68, 53, 161, 55, 160,
	57, 61, 62, 111, 0, 47, 0, 0, 42, 111,
	0, 166, 171, 172, 0, 0, 0, 0, 92, 90,
	93, 181, 0, 0, 117, 0, 0, 0, 146, 133,
	144, 0, 0, 136, 0, 0, 151, 147, 148, 149,
	0, 0, 156, 157, 100, 0, 106, 0, 89, 0,
	114, 0, 0, 0, 37, 38, 39, 0, 0, 40,
	41, 115, 0, 167, 0, 178, 72, 0, 75, 91,
	176, 0, 0, 118, 121, 122, 124, 125, 128, 146,
	132, 134, 0, 135, 0, 138, 139, 0, 0, 0,
	150, 155, 0, 105, 0, 0, 0, 80, 0, 36,
	0, 112, 45, 43, 44, 163, 168, 169, 0, 74,
	177, 129, 0, 123, 126, 127, 131, 0, 0, 0,
	152, 0, 158, 98, 0, 81, 84, 87, 82, 77,
	144, 88, 109, 170, 120, 145, 143, 140, 141, 142,
	0, 146, 99, 0, 85, 0, 0, 89, 78, 110,
	107, 108, 146, 154, 83, 86, 76, 79, 153,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:277
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:278
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:283
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:287
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:291
		{
			setParseTree(yylex, yyDollar[1].trace)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:295
		{
			setParseTree(yylex, yyDollar[1].stoptrace)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:299
		{
			setParseTree(yylex, yyDollar[1].drop)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:303
		{
			setParseTree(yylex, yyDollar[1].lock)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:307
		{
			setParseTree(yylex, yyDollar[1].unlock)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:311
		{
			setParseTree(yylex, yyDollar[1].show)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:315
		{
			setParseTree(yylex, yyDollar[1].kill)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:319
		{
			setParseTree(yylex, yyDollar[1].listen)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:323
		{
			setParseTree(yylex, yyDollar[1].shutdown)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:327
		{
			setParseTree(yylex, yyDollar[1].split)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:331
		{
			setParseTree(yylex, yyDollar[1].move)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:335
		{
			setParseTree(yylex, yyDollar[1].redistribute)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:339
		{
			setParseTree(yylex, yyDollar[1].unite)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:343
		{
			setParseTree(yylex, yyDollar[1].register_router)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:347
		{
			setParseTree(yylex, yyDollar[1].unregister_router)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:351
		{
			setParseTree(yylex, yyDollar[1].alter)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:355
		{
			setParseTree(yylex, yyDollar[1].invalidate_cache)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:359
		{
			setParseTree(yylex, yyDollar[1].retryMoveTaskGroup)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:363
		{
			setParseTree(yylex, yyDollar[1].sync_reference_tables)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:367
		{
			setParseTree(yylex, yyDollar[1].alter)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:372
		{
			if yyDollar[1].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				yyVAL.integer = int(yyDollar[1].uinteger)
			}
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:379
		{
			if yyDollar[2].uinteger > uint(-math.MinInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				yyVAL.integer = int(-yyDollar[2].uinteger)
			}
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:386
		{
			if yyDollar[2].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				yyVAL.integer = int(yyDollar[2].uinteger)
			}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:396
		{
			yyVAL.uinteger = uint(yyDollar[1].uinteger)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:401
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:405
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:407
		{
			if yyDollar[1].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(yyDollar[1].uinteger))
				yyVAL.str = string(buf)
			}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:416
		{
			if yyDollar[2].uinteger > uint(-math.MinInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(-yyDollar[2].uinteger))
				yyVAL.str = string(buf)
			}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:428
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:434
		{
			yyVAL.qname = &QualifiedName{Name: yyDollar[1].str}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:438
		{
			yyVAL.qname = &QualifiedName{Name: yyDollar[3].str, SchemaName: yyDollar[1].str}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:444
		{
			yyVAL.str = yyDollar[1].str
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:446
		{
			yyVAL.str = "AND"
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:448
		{
			yyVAL.str = "OR"
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:453
		{
			yyVAL.str = yyDollar[1].str
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:455
		{
			yyVAL.str = "="
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:461
		{
			yyVAL.colref = ColumnRef{
				ColName: yyDollar[1].str,
			}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:469
		{
			yyVAL.where = yyDollar[2].where
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:472
		{
			yyVAL.where = WhereClauseLeaf{
				ColRef: yyDollar[1].colref,
				Op:     yyDollar[2].str,
				Value:  yyDollar[3].str,
			}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:480
		{
			yyVAL.where = WhereClauseOp{
				Op:    yyDollar[2].str,
				Left:  yyDollar[1].where,
				Right: yyDollar[3].where,
			}
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:490
		{
			yyVAL.where = WhereClauseEmpty{}
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:494
		{
			yyVAL.where = yyDollar[2].where
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:501
		{
			switch v := strings.ToLower(string(yyDollar[1].str)); v {
			case DatabasesStr, RoutersStr, PoolsStr, InstanceStr, ShardsStr, BackendConnectionsStr, KeyRangesStr, ShardingRules, ClientsStr, StatusStr, DistributionsStr, VersionStr, RelationsStr, ReferenceRelationsStr, TaskGroupStr, PreparedStatementsStr, QuantilesStr, SequencesStr, IsReadOnlyStr, MoveStatsStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:512
		{
			switch v := string(yyDollar[1].str); v {
			case ClientStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:522
		{
			yyVAL.bool = true
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:522
		{
			yyVAL.bool = false
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:526
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].key_range_selector}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:530
		{
			yyVAL.drop = &Drop{Element: &KeyRangeSelector{KeyRangeID: `*`}}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:534
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].sharding_rule_selector}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:538
		{
			yyVAL.drop = &Drop{Element: &ShardingRuleSelector{ID: `*`}}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:542
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].distribution_selector, CascadeDelete: yyDollar[3].bool}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:546
		{
			yyVAL.drop = &Drop{Element: &DistributionSelector{ID: `*`}, CascadeDelete: yyDollar[4].bool}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:550
		{
			yyVAL.drop = &Drop{Element: &ShardSelector{ID: yyDollar[3].str}}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:554
		{
			yyVAL.drop = &Drop{Element: &TaskGroupSelector{}}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:558
		{
			yyVAL.drop = &Drop{Element: &SequenceSelector{Name: yyDollar[3].str}}
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:562
		{
			yyVAL.drop = &Drop{
				Element: &ReferenceRelationSelector{
					ID: yyDollar[4].str,
				},
			}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:570
		{
			yyVAL.drop = &Drop{
				Element: &ReferenceRelationSelector{
					ID: yyDollar[4].str,
				},
			}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:581
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:586
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:591
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:595
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:601
		{
			yyVAL.trace = &TraceStmt{All: true}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:604
		{
			yyVAL.trace = &TraceStmt{
				Client: yyDollar[4].uinteger,
			}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:612
		{
			yyVAL.stoptrace = &StopTraceStmt{}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:618
		{
			yyVAL.alter = &Alter{Element: yyDollar[2].alter_distribution}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:624
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AttachRelation{
					Distribution: yyDollar[1].distribution_selector,
					Relations:    yyDollar[2].relations,
				},
			}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:633
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &DetachRelation{
					Distribution: yyDollar[1].distribution_selector,
					RelationName: yyDollar[4].str,
				},
			}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:642
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AlterRelation{
					Distribution: yyDollar[1].distribution_selector,
					Relation:     yyDollar[2].distributed_relation,
				},
			}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:651
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AlterDefaultShard{
					Distribution: yyDollar[1].distribution_selector,
					Shard:        yyDollar[5].str,
				},
			}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:660
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &DropDefaultShard{Distribution: yyDollar[1].distribution_selector},
			}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:669
		{
			yyVAL.dEntrieslist = append(yyDollar[1].dEntrieslist, yyDollar[3].distrKeyEntry)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:671
		{
			yyVAL.dEntrieslist = []DistributionKeyEntry{
				yyDollar[1].distrKeyEntry,
			}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:681
		{
			yyVAL.distrKeyEntry = DistributionKeyEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 79:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:690
		{
			if len(yyDollar[2].qname.SchemaName) > 0 && len(yyDollar[7].str) > 0 {
				yylex.Error("it is forbidden to use both a qualified relation name and the keyword SCHEMA")
				return 1
			} else if len(yyDollar[2].qname.SchemaName) > 0 {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.Name,
					DistributionKey:      yyDollar[5].dEntrieslist,
					AutoIncrementEntries: yyDollar[6].aiEntrieslist,
					SchemaName:           yyDollar[2].qname.SchemaName,
				}
			} else {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.Name,
					DistributionKey:      yyDollar[5].dEntrieslist,
					AutoIncrementEntries: yyDollar[6].aiEntrieslist,
					SchemaName:           yyDollar[7].str,
				}
			}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:711
		{
			if len(yyDollar[2].qname.SchemaName) > 0 && len(yyDollar[4].str) > 0 {
				yylex.Error("it is forbidden to use both a qualified relation name and the keyword SCHEMA")
				return 1
			} else if len(yyDollar[2].qname.SchemaName) > 0 {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.Name,
					ReplicatedRelation:   true,
					AutoIncrementEntries: yyDollar[3].aiEntrieslist,
					SchemaName:           yyDollar[2].qname.SchemaName,
				}
			} else {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.Name,
					ReplicatedRelation:   true,
					AutoIncrementEntries: yyDollar[3].aiEntrieslist,
					SchemaName:           yyDollar[4].str,
				}
			}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:733
		{
			yyVAL.aiEntrieslist = yyDollar[3].aiEntrieslist
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:735
		{
			yyVAL.aiEntrieslist = nil
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:741
		{
			yyVAL.aiEntrieslist = append(yyDollar[1].aiEntrieslist, yyDollar[3].aiEntry)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:743
		{
			yyVAL.aiEntrieslist = []*AutoIncrementEntry{
				yyDollar[1].aiEntry,
			}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:751
		{
			yyVAL.aiEntry = &AutoIncrementEntry{
				Column: yyDollar[1].str,
				Start:  uint64(yyDollar[2].uinteger),
			}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:760
		{
			yyVAL.uinteger = yyDollar[2].uinteger
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:762
		{
			yyVAL.uinteger = 0
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:767
		{
			yyVAL.str = yyDollar[2].str
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:769
		{
			yyVAL.str = ""
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:774
		{
			yyVAL.relations = []*DistributedRelation{yyDollar[1].distributed_relation}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:776
		{
			yyVAL.relations = append(yyDollar[1].relations, yyDollar[2].distributed_relation)
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:781
		{
			yyVAL.relations = yyDollar[2].relations
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:786
		{
			yyVAL.distributed_relation = yyDollar[2].distributed_relation
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:791
		{
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:794
		{
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:794
		{
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:798
		{
			yyVAL.strlist = yyDollar[2].strlist
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:799
		{
			yyVAL.strlist = yyDollar[3].strlist
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:799
		{
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:803
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:808
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:813
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:818
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:823
		{
			yyVAL.create = &Create{
				Element: &ReferenceRelationDefinition{
					TableName:            yyDollar[4].str,
					AutoIncrementEntries: yyDollar[5].aiEntrieslist,
					ShardIds:             yyDollar[6].strlist,
				},
			}
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:835
		{
			yyVAL.alter = &Alter{
				Element: &AlterDistribution{
					Element: &AttachRelation{
						Distribution: &DistributionSelector{ID: yyDollar[5].str},
						Relations:    []*DistributedRelation{yyDollar[3].distributed_relation},
					},
				},
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:847
		{
			yyVAL.opt_asc_desc = &SortByAsc{}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:848
		{
			yyVAL.opt_asc_desc = &SortByDesc{}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:849
		{
			yyVAL.opt_asc_desc = &SortByDefault{}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:853
		{
			yyVAL.order_clause = &Order{Col: yyDollar[3].colref, OptAscDesc: yyDollar[4].opt_asc_desc}
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:856
		{
			yyVAL.order_clause = OrderClause(nil)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:861
		{
			yyVAL.group_clause = GroupBy{Col: yyDollar[3].colref}
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:864
		{
			yyVAL.group_clause = GroupByClauseEmpty{}
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:869
		{
			yyVAL.show = &Show{Cmd: yyDollar[2].str, Where: yyDollar[3].where, GroupBy: yyDollar[4].group_clause, Order: yyDollar[5].order_clause}
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:871
		{
			yyVAL.show = &Show{Cmd: ShardsStr, Where: yyDollar[3].where, GroupBy: yyDollar[4].group_clause, Order: yyDollar[5].order_clause}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:876
		{
			yyVAL.lock = &Lock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:884
		{
			yyVAL.ds = &DistributionDefinition{
				ID:           yyDollar[2].str,
				ColTypes:     yyDollar[3].strlist,
				DefaultShard: yyDollar[4].str,
			}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:893
		{
			yyVAL.strlist = yyDollar[3].strlist
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:895
		{
			/* empty column types should be prohibited */
			yyVAL.strlist = nil
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:901
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:903
		{
			yyVAL.strlist = []string{
				yyDollar[1].str,
			}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:910
		{
			yyVAL.str = qdb.ColumnTypeVarchar
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:912
		{
			yyVAL.str = qdb.ColumnTypeVarcharHashed
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:914
		{
			yyVAL.str = qdb.ColumnTypeInteger
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:916
		{
			yyVAL.str = qdb.ColumnTypeInteger
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:918
		{
			yyVAL.str = qdb.ColumnTypeUinteger
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:920
		{
			yyVAL.str = qdb.ColumnTypeUinteger
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:922
		{
			yyVAL.str = qdb.ColumnTypeUUID
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:927
		{
			yyVAL.str = yyDollar[3].str
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:929
		{
			yyVAL.str = ""
		}
	case 131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:935
		{
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: yyDollar[3].str, TableName: yyDollar[4].str, Entries: yyDollar[5].entrieslist, Distribution: yyDollar[6].str}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:940
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: "shrule" + str, TableName: yyDollar[3].str, Entries: yyDollar[4].entrieslist, Distribution: yyDollar[5].str}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:949
		{
			yyVAL.entrieslist = make([]ShardingRuleEntry, 0)
			yyVAL.entrieslist = append(yyVAL.entrieslist, yyDollar[1].shruleEntry)
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:955
		{
			yyVAL.entrieslist = append(yyDollar[1].entrieslist, yyDollar[2].shruleEntry)
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:961
		{
			yyVAL.shruleEntry = ShardingRuleEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:970
		{
			yyVAL.str = yyDollar[2].str
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:973
		{
			yyVAL.str = ""
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:977
		{
			yyVAL.str = yyDollar[2].str
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:982
		{
			yyVAL.str = yyDollar[2].str
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:988
		{
			yyVAL.str = "identity"
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:990
		{
			yyVAL.str = "murmur"
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:992
		{
			yyVAL.str = "city"
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:998
		{
			yyVAL.str = yyDollar[3].str
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:1000
		{
			yyVAL.str = ""
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1005
		{
			yyVAL.str = yyDollar[3].str
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:1007
		{
			yyVAL.str = "default"
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1013
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1017
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1019
		{
			if yyDollar[1].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(yyDollar[1].uinteger))
				yyVAL.bytes = buf
			}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1028
		{
			if yyDollar[2].uinteger > uint(-math.MinInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(-yyDollar[2].uinteger))
				yyVAL.bytes = buf
			}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1040
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: [][]byte{
					yyDollar[1].bytes,
				},
			}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1047
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: append(yyDollar[1].krbound.Pivots, yyDollar[3].bytes),
			}
		}
	case 153:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:1056
		{
			yyVAL.kr = &KeyRangeDefinition{
				KeyRangeID:   yyDollar[3].str,
				LowerBound:   yyDollar[5].krbound,
				ShardID:      yyDollar[8].str,
				Distribution: yyDollar[9].str,
			}
		}
	case 154:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:1065
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.kr = &KeyRangeDefinition{
				LowerBound:   yyDollar[4].krbound,
				ShardID:      yyDollar[7].str,
				Distribution: yyDollar[8].str,
				KeyRangeID:   "kr" + str,
			}
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1080
		{
			yyVAL.shard = &ShardDefinition{Id: yyDollar[2].str, Hosts: yyDollar[5].strlist}
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1085
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.shard = &ShardDefinition{Id: "shard" + str, Hosts: yyDollar[4].strlist}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1095
		{
			yyVAL.strlist = []string{yyDollar[1].str}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1100
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1106
		{
			yyVAL.unlock = &Unlock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1112
		{
			yyVAL.sharding_rule_selector = &ShardingRuleSelector{ID: yyDollar[3].str}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1118
		{
			yyVAL.key_range_selector = &KeyRangeSelector{KeyRangeID: yyDollar[3].str}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1124
		{
			yyVAL.distribution_selector = &DistributionSelector{ID: yyDollar[2].str}
		}
	case 163:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1130
		{
			yyVAL.split = &SplitKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeFromID: yyDollar[4].str, Border: yyDollar[6].krbound}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1136
		{
			yyVAL.kill = &Kill{Cmd: yyDollar[2].str, Target: yyDollar[3].uinteger}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1139
		{
			yyVAL.kill = &Kill{Cmd: "client", Target: yyDollar[3].uinteger}
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1145
		{
			yyVAL.move = &MoveKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str}
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1151
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Check: true, Apply: true}
		}
	case 168:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1153
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Check: true}
		}
	case 169:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1155
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Apply: true}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1159
		{
			yyVAL.opt_batch_size = int(yyDollar[3].uinteger)
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:1160
		{
			yyVAL.opt_batch_size = -1
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1164
		{
			yyVAL.unite = &UniteKeyRange{KeyRangeIDL: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeIDR: yyDollar[4].str}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1170
		{
			yyVAL.listen = &Listen{addr: yyDollar[2].str}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1176
		{
			yyVAL.shutdown = &Shutdown{}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1182
		{
			yyVAL.invalidate_cache = &InvalidateCache{}
		}
	case 176:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1188
		{
			yyVAL.sync_reference_tables = &SyncReferenceTables{
				ShardID:          yyDollar[5].str,
				RelationSelector: "*",
			}
		}
	case 177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1194
		{
			yyVAL.sync_reference_tables = &SyncReferenceTables{
				ShardID:          yyDollar[6].str,
				RelationSelector: yyDollar[4].str,
			}
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1205
		{
			yyVAL.register_router = &RegisterRouter{ID: yyDollar[3].str, Addr: yyDollar[5].str}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1211
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: yyDollar[3].str}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1216
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: `*`}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1224
		{
			yyVAL.retryMoveTaskGroup = &RetryMoveTaskGroup{}
		}
	}
	goto yystack /* stack new state and value */
}
