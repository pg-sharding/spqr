// Code generated by goyacc -o gram.go -p yy gram.y. DO NOT EDIT.

//line gram.y:3
package spqrparser

import __yyfmt__ "fmt"

//line gram.y:3

import (
	"crypto/rand"
	"encoding/hex"
	"strings"
)

func randomHex(n int) (string, error) {
	bytes := make([]byte, n)
	if _, err := rand.Read(bytes); err != nil {
		return "", err
	}
	return hex.EncodeToString(bytes), nil
}

//line gram.y:23
type yySymType struct {
	yys   int
	str   string
	byte  byte
	bytes []byte
	int   int
	bool  bool
	empty struct{}

	set       *Set
	statement Statement
	show      *Show

	drop   *Drop
	create *Create

	kill   *Kill
	lock   *Lock
	unlock *Unlock

	ds            *DataspaceDefinition
	kr            *KeyRangeDefinition
	shard         *ShardDefinition
	sharding_rule *ShardingRuleDefinition

	register_router   *RegisterRouter
	unregister_router *UnregisterRouter

	split *SplitKeyRange
	move  *MoveKeyRange
	unite *UniteKeyRange

	shutdown *Shutdown
	listen   *Listen

	trace     *TraceStmt
	stoptrace *StopTraceStmt

	entrieslist []ShardingRuleEntry
	shruleEntry ShardingRuleEntry

	sharding_rule_selector *ShardingRuleSelector
	key_range_selector     *KeyRangeSelector

	colref ColumnRef
	where  WhereClauseNode
}

const IDENT = 57346
const COMMAND = 57347
const SHOW = 57348
const KILL = 57349
const WHERE = 57350
const OR = 57351
const AND = 57352
const TEQ = 57353
const SCONST = 57354
const TSEMICOLON = 57355
const TOPENBR = 57356
const TCLOSEBR = 57357
const SHUTDOWN = 57358
const LISTEN = 57359
const REGISTER = 57360
const UNREGISTER = 57361
const ROUTER = 57362
const ROUTE = 57363
const CREATE = 57364
const ADD = 57365
const DROP = 57366
const LOCK = 57367
const UNLOCK = 57368
const SPLIT = 57369
const MOVE = 57370
const COMPOSE = 57371
const SET = 57372
const HARD = 57373
const SHARDING = 57374
const COLUMN = 57375
const TABLE = 57376
const HASH = 57377
const FUNCTION = 57378
const KEY = 57379
const RANGE = 57380
const DATASPACE = 57381
const SHARDS = 57382
const KEY_RANGES = 57383
const ROUTERS = 57384
const SHARD = 57385
const HOST = 57386
const SHARDING_RULES = 57387
const RULE = 57388
const COLUMNS = 57389
const VERSION = 57390
const BY = 57391
const FROM = 57392
const TO = 57393
const WITH = 57394
const UNITE = 57395
const ALL = 57396
const ADDRESS = 57397
const FOR = 57398
const CLIENT = 57399
const START = 57400
const STOP = 57401
const TRACE = 57402
const MESSAGES = 57403
const OP = 57404

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"COMMAND",
	"SHOW",
	"KILL",
	"WHERE",
	"OR",
	"AND",
	"TEQ",
	"SCONST",
	"TSEMICOLON",
	"TOPENBR",
	"TCLOSEBR",
	"SHUTDOWN",
	"LISTEN",
	"REGISTER",
	"UNREGISTER",
	"ROUTER",
	"ROUTE",
	"CREATE",
	"ADD",
	"DROP",
	"LOCK",
	"UNLOCK",
	"SPLIT",
	"MOVE",
	"COMPOSE",
	"SET",
	"HARD",
	"SHARDING",
	"COLUMN",
	"TABLE",
	"HASH",
	"FUNCTION",
	"KEY",
	"RANGE",
	"DATASPACE",
	"SHARDS",
	"KEY_RANGES",
	"ROUTERS",
	"SHARD",
	"HOST",
	"SHARDING_RULES",
	"RULE",
	"COLUMNS",
	"VERSION",
	"BY",
	"FROM",
	"TO",
	"WITH",
	"UNITE",
	"ALL",
	"ADDRESS",
	"FOR",
	"CLIENT",
	"START",
	"STOP",
	"TRACE",
	"MESSAGES",
	"OP",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:615

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 185

var yyAct = [...]int{

	112, 139, 66, 109, 97, 119, 103, 118, 28, 29,
	82, 52, 51, 80, 141, 65, 81, 121, 31, 30,
	35, 36, 116, 75, 21, 20, 25, 26, 27, 32,
	33, 122, 24, 75, 101, 92, 164, 75, 75, 163,
	141, 156, 147, 75, 74, 91, 124, 78, 90, 136,
	121, 84, 76, 126, 102, 34, 143, 154, 44, 43,
	22, 23, 85, 45, 122, 43, 88, 89, 64, 46,
	83, 79, 59, 93, 94, 77, 57, 96, 99, 155,
	75, 55, 104, 107, 106, 108, 106, 105, 95, 100,
	98, 113, 114, 115, 42, 39, 162, 75, 161, 123,
	73, 117, 72, 125, 41, 127, 40, 110, 38, 87,
	98, 75, 62, 68, 132, 37, 50, 47, 54, 137,
	53, 67, 144, 145, 140, 138, 49, 146, 48, 148,
	1, 134, 149, 19, 18, 17, 151, 129, 135, 152,
	153, 16, 131, 130, 140, 58, 60, 15, 150, 13,
	157, 69, 70, 71, 14, 158, 159, 129, 9, 160,
	10, 142, 131, 130, 165, 166, 120, 167, 168, 6,
	5, 4, 3, 8, 12, 11, 7, 63, 61, 56,
	2, 111, 133, 128, 86,
}
var yyPact = [...]int{

	2, -1000, 95, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	26, 26, -48, -49, 20, 44, 35, 35, 108, 11,
	109, -1000, 35, 35, 35, 82, 80, -1000, -1000, -1000,
	-1000, -1000, -1000, 107, 6, 37, 19, -1000, -1000, -1000,
	-1000, -41, -51, -1000, -1000, 32, -1000, 5, -1000, 24,
	-1000, 101, -1000, 109, 109, -1000, -1000, -1000, -1000, -2,
	-6, -17, 107, 34, -1000, -1000, 76, 39, -18, 10,
	-55, 107, -1000, 33, 29, 107, -1000, 93, -1000, -1000,
	107, 107, 107, -33, -1000, -1000, 56, 17, 107, -4,
	109, 9, 109, -1000, -1000, -1000, -1000, -1000, -1000, 153,
	93, 127, -1000, 0, -1000, -1000, 109, 17, -16, -1000,
	21, 107, 107, -1000, 109, -9, 109, -1000, 93, -1000,
	-1000, -1000, 133, 109, -1000, -1000, 109, -1000, -16, -1000,
	-1000, 18, -1000, 43, -1000, -1000, -10, 109, -1000, 153,
	-1000, -1000, -1000, -1000, 107, 107, 109, 77, -1000, -1000,
	75, -12, -15, 107, 107, -42, -42, -1000, -1000,
}
var yyPgo = [...]int{

	0, 184, 3, 183, 182, 181, 2, 0, 180, 179,
	118, 178, 177, 176, 175, 174, 173, 172, 171, 170,
	169, 95, 106, 104, 94, 7, 5, 4, 166, 161,
	1, 160, 158, 154, 149, 147, 141, 135, 134, 133,
	130, 115,
}
var yyR1 = [...]int{

	0, 40, 41, 41, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 6, 6, 7, 3, 3, 3, 4, 4, 5,
	2, 2, 2, 1, 1, 11, 12, 13, 16, 16,
	16, 16, 17, 17, 17, 17, 19, 19, 20, 18,
	18, 18, 18, 14, 32, 21, 22, 22, 25, 25,
	26, 27, 27, 28, 28, 29, 29, 30, 30, 23,
	23, 24, 24, 31, 9, 10, 35, 15, 15, 36,
	37, 34, 33, 38, 39, 39,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 0, 2, 1, 1, 2, 2, 4,
	2, 4, 2, 2, 2, 2, 4, 4, 3, 2,
	2, 2, 2, 3, 2, 2, 6, 5, 1, 2,
	2, 2, 0, 2, 2, 3, 0, 3, 0, 11,
	10, 5, 4, 2, 3, 3, 6, 3, 3, 4,
	4, 2, 1, 5, 3, 3,
}
var yyChk = [...]int{

	-1000, -40, -8, -17, -18, -19, -20, -13, -16, -32,
	-31, -14, -15, -34, -33, -35, -36, -37, -38, -39,
	23, 22, 58, 59, 30, 24, 25, 26, 6, 7,
	17, 16, 27, 28, 53, 18, 19, -41, 13, -21,
	-22, -23, -24, 39, 32, 37, 43, -21, -22, -23,
	-24, 60, 60, -21, -10, 37, -9, 32, -10, 37,
	-10, -11, 4, -12, 57, 4, -6, 12, 4, -10,
	-10, -10, 20, 20, -7, 4, 46, 38, -7, 52,
	54, 57, 61, 38, 46, 38, -1, 8, -6, -6,
	50, 51, 52, -7, -7, 54, -7, -27, 34, -7,
	50, 52, 44, 61, -7, 54, -7, 54, -7, -2,
	14, -5, -7, -7, -7, -7, 55, -27, -25, -26,
	-28, 33, 47, -7, 50, -6, 44, -6, -3, 4,
	10, 9, -2, -4, 4, 11, 49, -6, -25, -30,
	-26, 56, -29, 35, -7, -7, -6, 51, -6, -2,
	15, -6, -6, -30, 39, 36, 51, -6, -7, -7,
	-6, 21, 21, 51, 51, -7, -7, -30, -30,
}
var yyDef = [...]int{

	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 1, 3, 42,
	43, 44, 45, 0, 0, 0, 0, 49, 50, 51,
	52, 0, 0, 37, 38, 0, 40, 0, 54, 0,
	73, 33, 35, 0, 0, 36, 81, 21, 22, 0,
	0, 0, 0, 0, 55, 23, 62, 0, 0, 0,
	0, 0, 48, 0, 0, 0, 53, 0, 77, 78,
	0, 0, 0, 0, 84, 85, 62, 0, 0, 0,
	0, 0, 0, 46, 47, 39, 75, 41, 74, 34,
	0, 0, 29, 0, 79, 80, 0, 0, 68, 58,
	66, 0, 0, 61, 0, 0, 0, 72, 0, 24,
	25, 26, 0, 0, 27, 28, 0, 83, 68, 57,
	59, 0, 60, 0, 63, 64, 0, 0, 71, 32,
	30, 31, 76, 56, 0, 0, 0, 0, 67, 65,
	0, 0, 0, 0, 0, 68, 68, 70, 69,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:168
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:169
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:174
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:178
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:182
		{
			setParseTree(yylex, yyDollar[1].trace)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:186
		{
			setParseTree(yylex, yyDollar[1].stoptrace)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:190
		{
			setParseTree(yylex, yyDollar[1].set)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:194
		{
			setParseTree(yylex, yyDollar[1].drop)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:198
		{
			setParseTree(yylex, yyDollar[1].lock)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:202
		{
			setParseTree(yylex, yyDollar[1].unlock)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:206
		{
			setParseTree(yylex, yyDollar[1].show)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:210
		{
			setParseTree(yylex, yyDollar[1].kill)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:214
		{
			setParseTree(yylex, yyDollar[1].listen)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:218
		{
			setParseTree(yylex, yyDollar[1].shutdown)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:222
		{
			setParseTree(yylex, yyDollar[1].split)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:226
		{
			setParseTree(yylex, yyDollar[1].move)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:230
		{
			setParseTree(yylex, yyDollar[1].unite)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:234
		{
			setParseTree(yylex, yyDollar[1].register_router)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:238
		{
			setParseTree(yylex, yyDollar[1].unregister_router)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:243
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:247
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:252
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:258
		{
			yyVAL.str = yyDollar[1].str
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:260
		{
			yyVAL.str = "AND"
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:262
		{
			yyVAL.str = "OR"
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:267
		{
			yyVAL.str = yyDollar[1].str
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:269
		{
			yyVAL.str = "="
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:275
		{
			yyVAL.colref = ColumnRef{
				ColName: yyDollar[1].str,
			}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:283
		{
			yyVAL.where = yyDollar[2].where
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:286
		{
			yyVAL.where = WhereClauseLeaf{
				ColRef: yyDollar[1].colref,
				Op:     yyDollar[2].str,
				Value:  yyDollar[3].str,
			}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:294
		{
			yyVAL.where = WhereClauseOp{
				Op:    yyDollar[2].str,
				Left:  yyDollar[1].where,
				Right: yyDollar[3].where,
			}
		}
	case 33:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:304
		{
			yyVAL.where = WhereClauseEmpty{}
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:308
		{
			yyVAL.where = yyDollar[2].where
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:315
		{
			switch v := strings.ToLower(string(yyDollar[1].str)); v {
			case DatabasesStr, RoutersStr, PoolsStr, ShardsStr, BackendConnectionsStr, KeyRangesStr, ShardingRules, ClientsStr, StatusStr, DataspacesStr, VersionStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:326
		{
			switch v := string(yyDollar[1].str); v {
			case ClientStr:
				yyVAL.str = v
			default:
				yyVAL.str = "unsupp"
			}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:337
		{
			yyVAL.set = &Set{Element: yyDollar[2].ds}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:344
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].key_range_selector}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:349
		{
			yyVAL.drop = &Drop{Element: &KeyRangeSelector{KeyRangeID: `*`}}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:353
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].sharding_rule_selector}
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:358
		{
			yyVAL.drop = &Drop{Element: &ShardingRuleSelector{ID: `*`}}
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:364
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:369
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:374
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:378
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:385
		{
			yyVAL.trace = &TraceStmt{All: true}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:388
		{
			yyVAL.trace = &TraceStmt{
				Client: yyDollar[4].str,
			}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:396
		{
			yyVAL.stoptrace = &StopTraceStmt{}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:403
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:408
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:413
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:417
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:424
		{
			yyVAL.show = &Show{Cmd: yyDollar[2].str, Where: yyDollar[3].where}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:430
		{
			yyVAL.lock = &Lock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:438
		{
			yyVAL.ds = &DataspaceDefinition{ID: yyDollar[2].str}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:444
		{
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: yyDollar[3].str, TableName: yyDollar[4].str, Entries: yyDollar[5].entrieslist, Dataspace: yyDollar[6].str}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:449
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: "shrule" + str, TableName: yyDollar[3].str, Entries: yyDollar[4].entrieslist, Dataspace: yyDollar[5].str}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:458
		{
			yyVAL.entrieslist = make([]ShardingRuleEntry, 0)
			yyVAL.entrieslist = append(yyVAL.entrieslist, yyDollar[1].shruleEntry)
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:464
		{
			yyVAL.entrieslist = append(yyDollar[1].entrieslist, yyDollar[2].shruleEntry)
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:470
		{
			yyVAL.shruleEntry = ShardingRuleEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:479
		{
			yyVAL.str = yyDollar[2].str
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:482
		{
			yyVAL.str = ""
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:486
		{
			yyVAL.str = yyDollar[2].str
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:491
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:497
		{
			yyVAL.str = yyDollar[3].str
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:500
		{
			yyVAL.str = ""
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:503
		{
			yyVAL.str = yyDollar[3].str
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:506
		{
			yyVAL.str = "default"
		}
	case 69:
		yyDollar = yyS[yypt-11 : yypt+1]
//line gram.y:511
		{
			yyVAL.kr = &KeyRangeDefinition{LowerBound: []byte(yyDollar[5].str), UpperBound: []byte(yyDollar[7].str), ShardID: yyDollar[10].str, KeyRangeID: yyDollar[3].str, Dataspace: yyDollar[11].str}
		}
	case 70:
		yyDollar = yyS[yypt-10 : yypt+1]
//line gram.y:515
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.kr = &KeyRangeDefinition{LowerBound: []byte(yyDollar[4].str), UpperBound: []byte(yyDollar[6].str), ShardID: yyDollar[9].str, KeyRangeID: "kr" + str, Dataspace: yyDollar[10].str}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:526
		{
			yyVAL.shard = &ShardDefinition{Id: yyDollar[2].str, Hosts: []string{yyDollar[5].str}}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:531
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.shard = &ShardDefinition{Id: "shard" + str, Hosts: []string{yyDollar[4].str}}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:542
		{
			yyVAL.unlock = &Unlock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:548
		{
			yyVAL.sharding_rule_selector = &ShardingRuleSelector{ID: yyDollar[3].str}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:554
		{
			yyVAL.key_range_selector = &KeyRangeSelector{KeyRangeID: yyDollar[3].str}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:560
		{
			yyVAL.split = &SplitKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeFromID: yyDollar[4].str, Border: []byte(yyDollar[6].str)}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:566
		{
			yyVAL.kill = &Kill{Cmd: yyDollar[2].str, Target: yyDollar[3].str}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:569
		{
			yyVAL.kill = &Kill{Cmd: "client", Target: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:575
		{
			yyVAL.move = &MoveKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:581
		{
			yyVAL.unite = &UniteKeyRange{KeyRangeIDL: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeIDR: yyDollar[4].str}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:587
		{
			yyVAL.listen = &Listen{addr: yyDollar[2].str}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:593
		{
			yyVAL.shutdown = &Shutdown{}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:601
		{
			yyVAL.register_router = &RegisterRouter{ID: yyDollar[3].str, Addr: yyDollar[5].str}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:607
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:612
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: `*`}
		}
	}
	goto yystack /* stack new state and value */
}
