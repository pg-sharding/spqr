// Code generated by goyacc -o gram.go -p yy gram.y. DO NOT EDIT.

//line gram.y:3
package spqrparser

import __yyfmt__ "fmt"

//line gram.y:3

import (
	"crypto/rand"
	"encoding/binary"
	"encoding/hex"
	"github.com/pg-sharding/spqr/qdb"
	"github.com/pg-sharding/spqr/router/rfqn"
	"math"
	"strings"
)

const SIGNED_INT_RANGE_ERROR string = "the Signed Value should be at the range of [-9223372036854775808, 9223372036854775807]."

func randomHex(n int) (string, error) {
	bytes := make([]byte, n)
	if _, err := rand.Read(bytes); err != nil {
		return "", err
	}
	return hex.EncodeToString(bytes), nil
}

//line gram.y:28
type yySymType struct {
	yys          int
	str          string
	strlist      []string
	byte         byte
	bytes        []byte
	integer      int
	uinteger     uint
	uintegerlist []uint
	bool         bool
	empty        struct{}

	set       *Set
	statement Statement
	show      *Show

	drop   *Drop
	create *Create

	kill   *Kill
	lock   *Lock
	unlock *Unlock

	krbound *KeyRangeBound

	qname         *rfqn.RelationFQN
	ds            *DistributionDefinition
	kr            *KeyRangeDefinition
	shard         *ShardDefinition
	sharding_rule *ShardingRuleDefinition

	register_router   *RegisterRouter
	unregister_router *UnregisterRouter

	split *SplitKeyRange
	move  *MoveKeyRange
	unite *UniteKeyRange

	redistribute *RedistributeKeyRange

	invalidate_cache      *InvalidateCache
	sync_reference_tables *SyncReferenceTables

	shutdown *Shutdown
	listen   *Listen

	trace     *TraceStmt
	stoptrace *StopTraceStmt

	distribution *DistributionDefinition

	alter                *Alter
	alter_distribution   *AlterDistribution
	distributed_relation *DistributedRelation
	alter_default_shard  *AlterDefaultShard

	relations    []*DistributedRelation
	relation     *DistributedRelation
	entrieslist  []ShardingRuleEntry
	dEntrieslist []DistributionKeyEntry

	shruleEntry ShardingRuleEntry

	distrKeyEntry DistributionKeyEntry
	aiEntry       *AutoIncrementEntry

	sharding_rule_selector *ShardingRuleSelector
	key_range_selector     *KeyRangeSelector
	distribution_selector  *DistributionSelector
	aiEntrieslist          []*AutoIncrementEntry

	colref ColumnRef
	where  WhereClauseNode

	order_clause OrderClause
	opt_asc_desc OptAscDesc

	group_clause GroupByClause

	opt_batch_size int

	retryMoveTaskGroup *RetryMoveTaskGroup
}

const IDENT = 57346
const COMMAND = 57347
const SHOW = 57348
const KILL = 57349
const WHERE = 57350
const OR = 57351
const AND = 57352
const TEQ = 57353
const TCOMMA = 57354
const TDOT = 57355
const SCONST = 57356
const ICONST = 57357
const INVALID_ICONST = 57358
const TSEMICOLON = 57359
const TMINUS = 57360
const TPLUS = 57361
const TOPENBR = 57362
const TCLOSEBR = 57363
const SHUTDOWN = 57364
const LISTEN = 57365
const REGISTER = 57366
const UNREGISTER = 57367
const ROUTER = 57368
const ROUTE = 57369
const CREATE = 57370
const ADD = 57371
const DROP = 57372
const LOCK = 57373
const UNLOCK = 57374
const SPLIT = 57375
const MOVE = 57376
const COMPOSE = 57377
const SET = 57378
const CASCADE = 57379
const ATTACH = 57380
const ALTER = 57381
const DETACH = 57382
const REDISTRIBUTE = 57383
const REFERENCE = 57384
const CHECK = 57385
const APPLY = 57386
const SHARDING = 57387
const COLUMN = 57388
const TABLE = 57389
const TABLES = 57390
const HASH = 57391
const FUNCTION = 57392
const KEY = 57393
const RANGE = 57394
const DISTRIBUTION = 57395
const RELATION = 57396
const REPLICATED = 57397
const AUTO = 57398
const INCREMENT = 57399
const SEQUENCE = 57400
const SCHEMA = 57401
const SHARDS = 57402
const KEY_RANGES = 57403
const ROUTERS = 57404
const SHARD = 57405
const HOST = 57406
const SHARDING_RULES = 57407
const RULE = 57408
const COLUMNS = 57409
const VERSION = 57410
const HOSTS = 57411
const SEQUENCES = 57412
const IS_READ_ONLY = 57413
const MOVE_STATS = 57414
const BY = 57415
const FROM = 57416
const TO = 57417
const WITH = 57418
const UNITE = 57419
const ALL = 57420
const ADDRESS = 57421
const FOR = 57422
const CLIENT = 57423
const BATCH = 57424
const SIZE = 57425
const INVALIDATE = 57426
const CACHE = 57427
const SYNC = 57428
const RETRY = 57429
const DISTRIBUTED = 57430
const IN = 57431
const ON = 57432
const DEFAULT = 57433
const IDENTITY = 57434
const MURMUR = 57435
const CITY = 57436
const START = 57437
const STOP = 57438
const TRACE = 57439
const MESSAGES = 57440
const TASK = 57441
const GROUP = 57442
const VARCHAR = 57443
const INTEGER = 57444
const INT = 57445
const TYPES = 57446
const UUID = 57447
const OP = 57448
const ASC = 57449
const DESC = 57450
const ORDER = 57451

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"COMMAND",
	"SHOW",
	"KILL",
	"WHERE",
	"OR",
	"AND",
	"TEQ",
	"TCOMMA",
	"TDOT",
	"SCONST",
	"ICONST",
	"INVALID_ICONST",
	"TSEMICOLON",
	"TMINUS",
	"TPLUS",
	"TOPENBR",
	"TCLOSEBR",
	"SHUTDOWN",
	"LISTEN",
	"REGISTER",
	"UNREGISTER",
	"ROUTER",
	"ROUTE",
	"CREATE",
	"ADD",
	"DROP",
	"LOCK",
	"UNLOCK",
	"SPLIT",
	"MOVE",
	"COMPOSE",
	"SET",
	"CASCADE",
	"ATTACH",
	"ALTER",
	"DETACH",
	"REDISTRIBUTE",
	"REFERENCE",
	"CHECK",
	"APPLY",
	"SHARDING",
	"COLUMN",
	"TABLE",
	"TABLES",
	"HASH",
	"FUNCTION",
	"KEY",
	"RANGE",
	"DISTRIBUTION",
	"RELATION",
	"REPLICATED",
	"AUTO",
	"INCREMENT",
	"SEQUENCE",
	"SCHEMA",
	"SHARDS",
	"KEY_RANGES",
	"ROUTERS",
	"SHARD",
	"HOST",
	"SHARDING_RULES",
	"RULE",
	"COLUMNS",
	"VERSION",
	"HOSTS",
	"SEQUENCES",
	"IS_READ_ONLY",
	"MOVE_STATS",
	"BY",
	"FROM",
	"TO",
	"WITH",
	"UNITE",
	"ALL",
	"ADDRESS",
	"FOR",
	"CLIENT",
	"BATCH",
	"SIZE",
	"INVALIDATE",
	"CACHE",
	"SYNC",
	"RETRY",
	"DISTRIBUTED",
	"IN",
	"ON",
	"DEFAULT",
	"IDENTITY",
	"MURMUR",
	"CITY",
	"START",
	"STOP",
	"TRACE",
	"MESSAGES",
	"TASK",
	"GROUP",
	"VARCHAR",
	"INTEGER",
	"INT",
	"TYPES",
	"UUID",
	"OP",
	"ASC",
	"DESC",
	"ORDER",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:1237

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 365

var yyAct = [...]int16{
	178, 250, 299, 267, 130, 253, 214, 212, 296, 177,
	244, 213, 206, 199, 162, 205, 198, 175, 110, 220,
	154, 117, 173, 320, 321, 196, 221, 245, 246, 247,
	191, 248, 107, 174, 122, 148, 74, 164, 114, 68,
	64, 63, 32, 33, 315, 66, 84, 70, 307, 308,
	309, 195, 73, 101, 187, 186, 105, 71, 35, 34,
	40, 41, 264, 241, 26, 25, 29, 30, 31, 36,
	37, 120, 121, 192, 123, 42, 161, 38, 98, 278,
	201, 234, 112, 83, 127, 113, 252, 132, 60, 184,
	158, 53, 137, 72, 138, 139, 102, 54, 120, 52,
	102, 202, 102, 102, 153, 156, 102, 124, 160, 55,
	310, 102, 291, 39, 252, 136, 167, 169, 165, 135,
	43, 204, 45, 44, 134, 171, 172, 167, 270, 232,
	222, 27, 28, 150, 62, 180, 181, 182, 183, 211,
	159, 170, 116, 103, 242, 238, 201, 237, 80, 268,
	265, 193, 179, 53, 316, 126, 203, 215, 111, 54,
	82, 52, 216, 185, 129, 189, 190, 202, 86, 218,
	168, 55, 106, 287, 197, 97, 166, 140, 85, 87,
	119, 157, 88, 217, 108, 149, 215, 115, 125, 266,
	108, 109, 104, 240, 227, 109, 235, 109, 215, 231,
	236, 76, 255, 256, 79, 288, 254, 239, 285, 284,
	283, 102, 251, 155, 249, 152, 276, 277, 65, 261,
	257, 69, 100, 118, 294, 144, 145, 99, 94, 258,
	258, 93, 271, 51, 146, 147, 142, 102, 279, 47,
	274, 272, 280, 281, 289, 259, 50, 131, 275, 75,
	77, 286, 49, 176, 155, 89, 90, 91, 92, 48,
	59, 260, 133, 251, 96, 219, 297, 300, 323, 301,
	224, 290, 293, 58, 292, 226, 225, 262, 324, 57,
	302, 313, 258, 303, 86, 224, 56, 273, 305, 208,
	226, 225, 311, 304, 85, 87, 282, 229, 88, 207,
	209, 102, 312, 210, 230, 317, 318, 128, 269, 163,
	61, 46, 1, 325, 297, 22, 233, 300, 19, 328,
	327, 329, 326, 18, 330, 17, 16, 15, 14, 12,
	13, 8, 9, 319, 194, 263, 151, 243, 143, 188,
	141, 23, 21, 95, 24, 20, 306, 200, 314, 295,
	298, 6, 5, 4, 3, 7, 11, 10, 81, 78,
	67, 2, 322, 228, 223,
}

var yyPact = [...]int16{
	36, -1000, 222, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 108, 46, -56, -57, -6,
	150, 150, 144, 79, 280, -1000, 150, 150, 150, 150,
	205, 202, 122, -7, 193, 180, -1000, -1000, -1000, -1000,
	-1000, -1000, 297, 77, 140, 96, -1000, -1000, -1000, -1000,
	143, 104, -1000, 4, -60, -1000, 135, -1000, 76, 186,
	102, 297, -66, 297, 141, -1000, 103, -1000, 299, 299,
	-1000, 232, 232, -1000, -1000, -1000, -1000, -1000, 247, 50,
	44, 40, 16, 297, 99, -1000, 196, 297, -1000, -64,
	137, 169, -1000, 207, 107, 14, 71, 297, -1000, -1000,
	-13, 305, -61, 232, -1000, 98, 92, -1000, -1000, 186,
	-1000, -1000, -1000, -1000, 297, 297, 297, -67, 233, -67,
	-1000, -1000, -1000, -1000, 297, 297, 297, 297, 10, -1000,
	-1000, -1000, 109, -1000, -36, -37, 104, 104, -70, -17,
	297, -40, -79, 166, 100, 297, 47, 285, 70, 280,
	101, 297, 130, 252, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -83, 57, 281, 233, 293, -1000, -83,
	56, -1000, -1, -1000, 280, 305, 84, 82, 104, -1000,
	-1000, -1000, 297, -27, -1000, 81, -74, 100, 34, -1000,
	157, 297, 297, -1000, 285, 218, -1000, -1000, -1000, -1000,
	246, 280, 265, -1000, -28, 93, -1000, 138, 90, 304,
	-1000, 55, 297, 233, -1000, -1000, -1000, 266, 280, -1000,
	-1000, -1000, 285, 173, -4, -1000, -1000, 297, -1000, -1000,
	-1000, 297, 297, 284, -1000, 161, 160, 159, -1000, 34,
	-1000, -1000, 120, -1000, 155, -1000, -1000, 217, 285, 37,
	-1000, 265, 280, -1000, 164, 297, 297, -1000, 297, -1000,
	297, -1000, 281, -1000, -1000, 270, -1000, -1000, 232, -1000,
	-1000, -1000, -74, -1000, -1000, -1000, -1000, 297, -44, 35,
	-1000, 297, -1000, 265, 280, 269, -1000, -51, 142, -1000,
	157, -1000, -84, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	264, 6, 265, 297, -1000, 232, 297, 90, -1000, -1000,
	-1000, -1000, 6, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 84, 17, 12, 15, 364, 363, 9, 11, 0,
	362, 4, 362, 361, 360, 218, 221, 359, 358, 357,
	356, 355, 354, 353, 352, 351, 14, 259, 252, 246,
	233, 16, 350, 6, 349, 348, 13, 3, 2, 8,
	20, 347, 5, 346, 1, 345, 344, 343, 342, 341,
	340, 339, 338, 18, 337, 336, 7, 335, 10, 21,
	334, 19, 333, 22, 332, 331, 330, 329, 328, 327,
	326, 325, 323, 318, 316, 315, 312, 311, 32, 310,
}

var yyR1 = [...]int8{
	0, 76, 77, 77, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 12, 12, 12, 11,
	8, 8, 8, 8, 9, 10, 10, 26, 26, 5,
	5, 5, 6, 6, 7, 2, 2, 2, 1, 1,
	17, 18, 59, 59, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 22, 22, 22, 22, 24,
	24, 25, 45, 47, 47, 47, 47, 47, 32, 32,
	38, 53, 53, 33, 33, 34, 34, 39, 35, 35,
	37, 37, 51, 51, 50, 52, 79, 79, 78, 78,
	57, 57, 57, 23, 23, 23, 23, 23, 46, 62,
	62, 62, 61, 61, 63, 63, 19, 19, 65, 27,
	55, 55, 54, 54, 58, 58, 58, 58, 58, 58,
	58, 60, 60, 28, 28, 31, 31, 36, 40, 40,
	41, 41, 43, 43, 43, 42, 42, 44, 44, 3,
	3, 3, 3, 4, 4, 29, 29, 30, 30, 56,
	56, 64, 14, 15, 16, 68, 20, 20, 69, 70,
	70, 70, 74, 74, 71, 67, 66, 48, 49, 49,
	72, 73, 73, 75,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 0, 2,
	1, 1, 1, 0, 2, 4, 2, 4, 3, 4,
	3, 3, 3, 4, 4, 2, 2, 2, 2, 4,
	4, 3, 2, 2, 4, 2, 5, 4, 3, 1,
	2, 7, 4, 3, 0, 3, 1, 2, 2, 0,
	2, 0, 1, 2, 2, 2, 1, 0, 1, 1,
	2, 3, 0, 2, 2, 2, 2, 6, 5, 1,
	1, 0, 4, 0, 3, 0, 5, 5, 2, 4,
	3, 0, 3, 1, 1, 2, 1, 1, 2, 2,
	1, 3, 0, 6, 5, 1, 2, 2, 2, 0,
	2, 2, 1, 1, 1, 3, 0, 3, 0, 1,
	1, 1, 2, 1, 3, 9, 8, 5, 4, 1,
	3, 2, 3, 3, 2, 6, 3, 3, 4, 5,
	6, 6, 3, 0, 4, 2, 1, 2, 5, 6,
	5, 3, 3, 4,
}

var yyChk = [...]int16{
	-1000, -76, -13, -22, -23, -24, -25, -21, -65, -64,
	-19, -20, -67, -66, -68, -69, -70, -71, -72, -73,
	-45, -48, -75, -49, -46, 29, 28, 95, 96, 30,
	31, 32, 6, 7, 23, 22, 33, 34, 41, 77,
	24, 25, 39, 84, 87, 86, -77, 17, -27, -28,
	-29, -30, 53, 45, 51, 63, -27, -28, -29, -30,
	42, -79, 88, 97, 97, -15, 51, -14, 45, -16,
	53, 63, 99, 58, 42, -15, 51, -15, -17, 60,
	4, -18, 81, 4, -8, 14, 4, 15, 18, -15,
	-15, -15, -15, 26, 26, -47, -16, 53, 85, 34,
	42, -9, 4, 66, 52, -9, 76, -78, 47, 54,
	-53, 54, 78, 81, 98, 52, 66, -59, 37, 78,
	-9, -9, 100, -9, -78, 47, 52, -1, 8, -1,
	-11, 15, -11, 15, 74, 75, 75, 76, -9, -9,
	78, -50, 40, -52, 29, 30, 38, 39, 99, 48,
	-78, -55, 46, -9, -40, 47, -9, 74, 76, 69,
	-9, 89, -26, 4, 98, -11, 78, -9, 78, -9,
	-59, -9, -9, -63, 100, -2, 20, -7, -9, -63,
	-9, -9, -9, -9, 79, 54, 91, 91, -51, -53,
	-53, 100, 90, -9, -60, 91, 104, -40, -31, -36,
	-41, 46, 67, -9, 74, -4, -3, 14, 4, 15,
	18, 69, -56, -8, -33, 56, -9, 53, -33, 13,
	-61, 109, 73, -5, 4, 10, 9, -2, -6, 4,
	11, -61, 73, -74, 82, -8, -26, 63, 63, -53,
	-9, 90, 63, -54, -58, 101, 102, 103, 105, -31,
	-44, -36, 80, -42, 49, -9, -9, -4, 12, 27,
	15, -56, 12, -57, 90, 57, 51, -37, 59, 4,
	73, -7, -2, 21, -8, -4, 43, 44, 83, -9,
	-9, -9, 12, 49, 49, 49, -44, 53, 50, 27,
	-3, 75, -8, -56, 60, -34, -39, -9, -32, -38,
	-9, -9, -7, -11, -58, -9, -43, 92, 93, 94,
	75, -9, -56, 12, -35, 95, 12, -33, -42, -62,
	107, 108, -10, 4, 14, -44, -39, -11, -38, -37,
	-44,
}

var yyDef = [...]int16{
	0, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 0, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 3, 65, 66,
	67, 68, 0, 0, 0, 0, 103, 104, 105, 106,
	0, 0, 96, 0, 0, 54, 0, 56, 0, 53,
	0, 0, 0, 0, 0, 118, 0, 161, 48, 48,
	50, 0, 0, 51, 175, 30, 31, 32, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 177, 0,
	0, 121, 34, 139, 0, 0, 0, 0, 98, 99,
	0, 0, 0, 0, 71, 0, 0, 58, 52, 53,
	164, 60, 61, 62, 0, 0, 0, 115, 0, 115,
	166, 29, 167, 33, 0, 0, 0, 0, 0, 181,
	182, 73, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 139, 0, 0, 0, 0, 0, 0,
	84, 0, 84, 37, 69, 70, 55, 163, 57, 162,
	59, 63, 64, 113, 0, 49, 0, 0, 44, 113,
	0, 168, 173, 174, 0, 0, 0, 0, 94, 92,
	95, 183, 0, 0, 119, 0, 0, 0, 148, 135,
	146, 0, 0, 138, 0, 0, 153, 149, 150, 151,
	0, 0, 158, 159, 102, 0, 108, 0, 91, 0,
	116, 0, 0, 0, 39, 40, 41, 0, 0, 42,
	43, 117, 0, 169, 0, 180, 74, 0, 77, 93,
	178, 0, 0, 120, 123, 124, 126, 127, 130, 148,
	134, 136, 0, 137, 0, 140, 141, 0, 0, 0,
	152, 157, 0, 107, 0, 0, 0, 82, 0, 38,
	0, 114, 47, 45, 46, 165, 170, 171, 0, 76,
	179, 131, 0, 125, 128, 129, 133, 0, 0, 0,
	154, 0, 160, 100, 0, 83, 86, 89, 84, 79,
	146, 90, 111, 172, 122, 147, 145, 142, 143, 144,
	0, 148, 101, 0, 87, 0, 0, 91, 80, 112,
	109, 110, 148, 35, 36, 156, 85, 88, 78, 81,
	155,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:278
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:279
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:284
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:288
		{
			setParseTree(yylex, yyDollar[1].create)
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:292
		{
			setParseTree(yylex, yyDollar[1].trace)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:296
		{
			setParseTree(yylex, yyDollar[1].stoptrace)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:300
		{
			setParseTree(yylex, yyDollar[1].drop)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:304
		{
			setParseTree(yylex, yyDollar[1].lock)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:308
		{
			setParseTree(yylex, yyDollar[1].unlock)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:312
		{
			setParseTree(yylex, yyDollar[1].show)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:316
		{
			setParseTree(yylex, yyDollar[1].kill)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:320
		{
			setParseTree(yylex, yyDollar[1].listen)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:324
		{
			setParseTree(yylex, yyDollar[1].shutdown)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:328
		{
			setParseTree(yylex, yyDollar[1].split)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:332
		{
			setParseTree(yylex, yyDollar[1].move)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:336
		{
			setParseTree(yylex, yyDollar[1].redistribute)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:340
		{
			setParseTree(yylex, yyDollar[1].unite)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:344
		{
			setParseTree(yylex, yyDollar[1].register_router)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:348
		{
			setParseTree(yylex, yyDollar[1].unregister_router)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:352
		{
			setParseTree(yylex, yyDollar[1].alter)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:356
		{
			setParseTree(yylex, yyDollar[1].invalidate_cache)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:360
		{
			setParseTree(yylex, yyDollar[1].retryMoveTaskGroup)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:364
		{
			setParseTree(yylex, yyDollar[1].sync_reference_tables)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:368
		{
			setParseTree(yylex, yyDollar[1].alter)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:373
		{
			if yyDollar[1].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				yyVAL.integer = int(yyDollar[1].uinteger)
			}
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:380
		{
			if yyDollar[2].uinteger > uint(-math.MinInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				yyVAL.integer = int(-yyDollar[2].uinteger)
			}
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:387
		{
			if yyDollar[2].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				yyVAL.integer = int(yyDollar[2].uinteger)
			}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:397
		{
			yyVAL.uinteger = uint(yyDollar[1].uinteger)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:402
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:406
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:408
		{
			if yyDollar[1].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(yyDollar[1].uinteger))
				yyVAL.str = string(buf)
			}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:417
		{
			if yyDollar[2].uinteger > uint(-math.MinInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(-yyDollar[2].uinteger))
				yyVAL.str = string(buf)
			}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:429
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:435
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:438
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:444
		{
			yyVAL.qname = &rfqn.RelationFQN{RelationName: yyDollar[1].str}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:448
		{
			yyVAL.qname = &rfqn.RelationFQN{RelationName: yyDollar[3].str, SchemaName: yyDollar[1].str}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:454
		{
			yyVAL.str = yyDollar[1].str
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:456
		{
			yyVAL.str = "AND"
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:458
		{
			yyVAL.str = "OR"
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:463
		{
			yyVAL.str = yyDollar[1].str
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:465
		{
			yyVAL.str = "="
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:471
		{
			yyVAL.colref = ColumnRef{
				ColName: yyDollar[1].str,
			}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:479
		{
			yyVAL.where = yyDollar[2].where
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:482
		{
			yyVAL.where = WhereClauseLeaf{
				ColRef: yyDollar[1].colref,
				Op:     yyDollar[2].str,
				Value:  yyDollar[3].str,
			}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:490
		{
			yyVAL.where = WhereClauseOp{
				Op:    yyDollar[2].str,
				Left:  yyDollar[1].where,
				Right: yyDollar[3].where,
			}
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:500
		{
			yyVAL.where = WhereClauseEmpty{}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:504
		{
			yyVAL.where = yyDollar[2].where
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:511
		{
			switch v := strings.ToLower(string(yyDollar[1].str)); v {
			case DatabasesStr, RoutersStr, PoolsStr, InstanceStr, ShardsStr, BackendConnectionsStr, KeyRangesStr, ShardingRules, ClientsStr, StatusStr, DistributionsStr, CoordinatorAddrStr, VersionStr, RelationsStr, ReferenceRelationsStr, TaskGroupStr, PreparedStatementsStr, QuantilesStr, SequencesStr, IsReadOnlyStr, MoveStatsStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:522
		{
			switch v := string(yyDollar[1].str); v {
			case ClientStr:
				yyVAL.str = v
			default:
				yyVAL.str = UnsupportedStr
			}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:532
		{
			yyVAL.bool = true
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:532
		{
			yyVAL.bool = false
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:536
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].key_range_selector}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:540
		{
			yyVAL.drop = &Drop{Element: &KeyRangeSelector{KeyRangeID: `*`}}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:544
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].sharding_rule_selector}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:548
		{
			yyVAL.drop = &Drop{Element: &ShardingRuleSelector{ID: `*`}}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:552
		{
			yyVAL.drop = &Drop{Element: yyDollar[2].distribution_selector, CascadeDelete: yyDollar[3].bool}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:556
		{
			yyVAL.drop = &Drop{Element: &DistributionSelector{ID: `*`}, CascadeDelete: yyDollar[4].bool}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:560
		{
			yyVAL.drop = &Drop{Element: &ShardSelector{ID: yyDollar[3].str}}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:564
		{
			yyVAL.drop = &Drop{Element: &TaskGroupSelector{}}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:568
		{
			yyVAL.drop = &Drop{Element: &SequenceSelector{Name: yyDollar[3].str}}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:572
		{
			yyVAL.drop = &Drop{
				Element: &ReferenceRelationSelector{
					ID: yyDollar[4].str,
				},
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:580
		{
			yyVAL.drop = &Drop{
				Element: &ReferenceRelationSelector{
					ID: yyDollar[4].str,
				},
			}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:591
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:596
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:601
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:605
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:611
		{
			yyVAL.trace = &TraceStmt{All: true}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:614
		{
			yyVAL.trace = &TraceStmt{
				Client: yyDollar[4].uinteger,
			}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:622
		{
			yyVAL.stoptrace = &StopTraceStmt{}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:628
		{
			yyVAL.alter = &Alter{Element: yyDollar[2].alter_distribution}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:634
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AttachRelation{
					Distribution: yyDollar[1].distribution_selector,
					Relations:    yyDollar[2].relations,
				},
			}
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:643
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &DetachRelation{
					Distribution: yyDollar[1].distribution_selector,
					RelationName: yyDollar[4].qname,
				},
			}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:652
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AlterRelation{
					Distribution: yyDollar[1].distribution_selector,
					Relation:     yyDollar[2].distributed_relation,
				},
			}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:661
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &AlterDefaultShard{
					Distribution: yyDollar[1].distribution_selector,
					Shard:        yyDollar[5].str,
				},
			}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:670
		{
			yyVAL.alter_distribution = &AlterDistribution{
				Element: &DropDefaultShard{Distribution: yyDollar[1].distribution_selector},
			}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:679
		{
			yyVAL.dEntrieslist = append(yyDollar[1].dEntrieslist, yyDollar[3].distrKeyEntry)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:681
		{
			yyVAL.dEntrieslist = []DistributionKeyEntry{
				yyDollar[1].distrKeyEntry,
			}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:691
		{
			yyVAL.distrKeyEntry = DistributionKeyEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 81:
		yyDollar = yyS[yypt-7 : yypt+1]
//line gram.y:700
		{
			if len(yyDollar[2].qname.SchemaName) > 0 && len(yyDollar[7].str) > 0 {
				yylex.Error("it is forbidden to use both a qualified relation name and the keyword SCHEMA")
				return 1
			} else if len(yyDollar[2].qname.SchemaName) > 0 {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.RelationName,
					DistributionKey:      yyDollar[5].dEntrieslist,
					AutoIncrementEntries: yyDollar[6].aiEntrieslist,
					SchemaName:           yyDollar[2].qname.SchemaName,
				}
			} else {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.RelationName,
					DistributionKey:      yyDollar[5].dEntrieslist,
					AutoIncrementEntries: yyDollar[6].aiEntrieslist,
					SchemaName:           yyDollar[7].str,
				}
			}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:721
		{
			if len(yyDollar[2].qname.SchemaName) > 0 && len(yyDollar[4].str) > 0 {
				yylex.Error("it is forbidden to use both a qualified relation name and the keyword SCHEMA")
				return 1
			} else if len(yyDollar[2].qname.SchemaName) > 0 {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.RelationName,
					ReplicatedRelation:   true,
					AutoIncrementEntries: yyDollar[3].aiEntrieslist,
					SchemaName:           yyDollar[2].qname.SchemaName,
				}
			} else {
				yyVAL.distributed_relation = &DistributedRelation{
					Name:                 yyDollar[2].qname.RelationName,
					ReplicatedRelation:   true,
					AutoIncrementEntries: yyDollar[3].aiEntrieslist,
					SchemaName:           yyDollar[4].str,
				}
			}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:743
		{
			yyVAL.aiEntrieslist = yyDollar[3].aiEntrieslist
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:745
		{
			yyVAL.aiEntrieslist = nil
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:751
		{
			yyVAL.aiEntrieslist = append(yyDollar[1].aiEntrieslist, yyDollar[3].aiEntry)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:753
		{
			yyVAL.aiEntrieslist = []*AutoIncrementEntry{
				yyDollar[1].aiEntry,
			}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:761
		{
			yyVAL.aiEntry = &AutoIncrementEntry{
				Column: yyDollar[1].str,
				Start:  uint64(yyDollar[2].uinteger),
			}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:770
		{
			yyVAL.uinteger = yyDollar[2].uinteger
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:772
		{
			yyVAL.uinteger = 0
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:777
		{
			yyVAL.str = yyDollar[2].str
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:779
		{
			yyVAL.str = ""
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:784
		{
			yyVAL.relations = []*DistributedRelation{yyDollar[1].distributed_relation}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:786
		{
			yyVAL.relations = append(yyDollar[1].relations, yyDollar[2].distributed_relation)
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:791
		{
			yyVAL.relations = yyDollar[2].relations
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:796
		{
			yyVAL.distributed_relation = yyDollar[2].distributed_relation
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:801
		{
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:804
		{
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:804
		{
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:808
		{
			yyVAL.strlist = yyDollar[2].strlist
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:809
		{
			yyVAL.strlist = yyDollar[3].strlist
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:809
		{
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:813
		{
			yyVAL.create = &Create{Element: yyDollar[2].ds}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:818
		{
			yyVAL.create = &Create{Element: yyDollar[2].sharding_rule}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:823
		{
			yyVAL.create = &Create{Element: yyDollar[2].kr}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:828
		{
			yyVAL.create = &Create{Element: yyDollar[2].shard}
		}
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:833
		{
			yyVAL.create = &Create{
				Element: &ReferenceRelationDefinition{
					TableName:            yyDollar[4].str,
					AutoIncrementEntries: yyDollar[5].aiEntrieslist,
					ShardIds:             yyDollar[6].strlist,
				},
			}
		}
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:845
		{
			yyVAL.alter = &Alter{
				Element: &AlterDistribution{
					Element: &AttachRelation{
						Distribution: &DistributionSelector{ID: yyDollar[5].str},
						Relations:    []*DistributedRelation{yyDollar[3].distributed_relation},
					},
				},
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:857
		{
			yyVAL.opt_asc_desc = &SortByAsc{}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:858
		{
			yyVAL.opt_asc_desc = &SortByDesc{}
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:859
		{
			yyVAL.opt_asc_desc = &SortByDefault{}
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:863
		{
			yyVAL.order_clause = &Order{Col: yyDollar[3].colref, OptAscDesc: yyDollar[4].opt_asc_desc}
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:866
		{
			yyVAL.order_clause = OrderClause(nil)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:871
		{
			yyVAL.group_clause = GroupBy{Col: yyDollar[3].colref}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:874
		{
			yyVAL.group_clause = GroupByClauseEmpty{}
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:879
		{
			yyVAL.show = &Show{Cmd: yyDollar[2].str, Where: yyDollar[3].where, GroupBy: yyDollar[4].group_clause, Order: yyDollar[5].order_clause}
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:881
		{
			yyVAL.show = &Show{Cmd: ShardsStr, Where: yyDollar[3].where, GroupBy: yyDollar[4].group_clause, Order: yyDollar[5].order_clause}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:886
		{
			yyVAL.lock = &Lock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:894
		{
			yyVAL.ds = &DistributionDefinition{
				ID:           yyDollar[2].str,
				ColTypes:     yyDollar[3].strlist,
				DefaultShard: yyDollar[4].str,
			}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:903
		{
			yyVAL.strlist = yyDollar[3].strlist
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:905
		{
			/* empty column types should be prohibited */
			yyVAL.strlist = nil
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:911
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:913
		{
			yyVAL.strlist = []string{
				yyDollar[1].str,
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:920
		{
			yyVAL.str = qdb.ColumnTypeVarchar
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:922
		{
			yyVAL.str = qdb.ColumnTypeVarcharHashed
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:924
		{
			yyVAL.str = qdb.ColumnTypeInteger
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:926
		{
			yyVAL.str = qdb.ColumnTypeInteger
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:928
		{
			yyVAL.str = qdb.ColumnTypeUinteger
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:930
		{
			yyVAL.str = qdb.ColumnTypeUinteger
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:932
		{
			yyVAL.str = qdb.ColumnTypeUUID
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:937
		{
			yyVAL.str = yyDollar[3].str
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:939
		{
			yyVAL.str = ""
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:945
		{
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: yyDollar[3].str, TableName: yyDollar[4].str, Entries: yyDollar[5].entrieslist, Distribution: yyDollar[6].str}
		}
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:950
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.sharding_rule = &ShardingRuleDefinition{ID: "shrule" + str, TableName: yyDollar[3].str, Entries: yyDollar[4].entrieslist, Distribution: yyDollar[5].str}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:959
		{
			yyVAL.entrieslist = make([]ShardingRuleEntry, 0)
			yyVAL.entrieslist = append(yyVAL.entrieslist, yyDollar[1].shruleEntry)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:965
		{
			yyVAL.entrieslist = append(yyDollar[1].entrieslist, yyDollar[2].shruleEntry)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:971
		{
			yyVAL.shruleEntry = ShardingRuleEntry{
				Column:       yyDollar[1].str,
				HashFunction: yyDollar[2].str,
			}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:980
		{
			yyVAL.str = yyDollar[2].str
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:983
		{
			yyVAL.str = ""
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:987
		{
			yyVAL.str = yyDollar[2].str
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:992
		{
			yyVAL.str = yyDollar[2].str
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:998
		{
			yyVAL.str = "identity"
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1000
		{
			yyVAL.str = "murmur"
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1002
		{
			yyVAL.str = "city"
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1008
		{
			yyVAL.str = yyDollar[3].str
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:1010
		{
			yyVAL.str = ""
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1015
		{
			yyVAL.str = yyDollar[3].str
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:1017
		{
			yyVAL.str = "default"
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1023
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1027
		{
			yyVAL.bytes = []byte(yyDollar[1].str)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1029
		{
			if yyDollar[1].uinteger > uint(math.MaxInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(yyDollar[1].uinteger))
				yyVAL.bytes = buf
			}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1038
		{
			if yyDollar[2].uinteger > uint(-math.MinInt64) {
				yylex.Error(SIGNED_INT_RANGE_ERROR)
				return 1
			} else {
				buf := make([]byte, binary.MaxVarintLen64)
				binary.PutVarint(buf, int64(-yyDollar[2].uinteger))
				yyVAL.bytes = buf
			}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1050
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: [][]byte{
					yyDollar[1].bytes,
				},
			}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1057
		{
			yyVAL.krbound = &KeyRangeBound{
				Pivots: append(yyDollar[1].krbound.Pivots, yyDollar[3].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-9 : yypt+1]
//line gram.y:1066
		{
			yyVAL.kr = &KeyRangeDefinition{
				KeyRangeID:   yyDollar[3].str,
				LowerBound:   yyDollar[5].krbound,
				ShardID:      yyDollar[8].str,
				Distribution: yyDollar[9].str,
			}
		}
	case 156:
		yyDollar = yyS[yypt-8 : yypt+1]
//line gram.y:1075
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.kr = &KeyRangeDefinition{
				LowerBound:   yyDollar[4].krbound,
				ShardID:      yyDollar[7].str,
				Distribution: yyDollar[8].str,
				KeyRangeID:   "kr" + str,
			}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1090
		{
			yyVAL.shard = &ShardDefinition{Id: yyDollar[2].str, Hosts: yyDollar[5].strlist}
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1095
		{
			str, err := randomHex(6)
			if err != nil {
				panic(err)
			}
			yyVAL.shard = &ShardDefinition{Id: "shard" + str, Hosts: yyDollar[4].strlist}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1105
		{
			yyVAL.strlist = []string{yyDollar[1].str}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1110
		{
			yyVAL.strlist = append(yyDollar[1].strlist, yyDollar[3].str)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1116
		{
			yyVAL.unlock = &Unlock{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1122
		{
			yyVAL.sharding_rule_selector = &ShardingRuleSelector{ID: yyDollar[3].str}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1128
		{
			yyVAL.key_range_selector = &KeyRangeSelector{KeyRangeID: yyDollar[3].str}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1134
		{
			yyVAL.distribution_selector = &DistributionSelector{ID: yyDollar[2].str}
		}
	case 165:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1140
		{
			yyVAL.split = &SplitKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeFromID: yyDollar[4].str, Border: yyDollar[6].krbound}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1146
		{
			yyVAL.kill = &Kill{Cmd: yyDollar[2].str, Target: yyDollar[3].uinteger}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1149
		{
			yyVAL.kill = &Kill{Cmd: "client", Target: yyDollar[3].uinteger}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1155
		{
			yyVAL.move = &MoveKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str}
		}
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1161
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Check: true, Apply: true}
		}
	case 170:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1163
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Check: true}
		}
	case 171:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1165
		{
			yyVAL.redistribute = &RedistributeKeyRange{KeyRangeID: yyDollar[2].key_range_selector.KeyRangeID, DestShardID: yyDollar[4].str, BatchSize: yyDollar[5].opt_batch_size, Apply: true}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1169
		{
			yyVAL.opt_batch_size = int(yyDollar[3].uinteger)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:1170
		{
			yyVAL.opt_batch_size = -1
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1174
		{
			yyVAL.unite = &UniteKeyRange{KeyRangeIDL: yyDollar[2].key_range_selector.KeyRangeID, KeyRangeIDR: yyDollar[4].str}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1180
		{
			yyVAL.listen = &Listen{addr: yyDollar[2].str}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:1186
		{
			yyVAL.shutdown = &Shutdown{}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:1192
		{
			yyVAL.invalidate_cache = &InvalidateCache{}
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1198
		{
			yyVAL.sync_reference_tables = &SyncReferenceTables{
				ShardID:          yyDollar[5].str,
				RelationSelector: "*",
			}
		}
	case 179:
		yyDollar = yyS[yypt-6 : yypt+1]
//line gram.y:1204
		{
			yyVAL.sync_reference_tables = &SyncReferenceTables{
				ShardID:          yyDollar[6].str,
				RelationSelector: yyDollar[4].str,
			}
		}
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:1215
		{
			yyVAL.register_router = &RegisterRouter{ID: yyDollar[3].str, Addr: yyDollar[5].str}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1221
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: yyDollar[3].str}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:1226
		{
			yyVAL.unregister_router = &UnregisterRouter{ID: `*`}
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:1234
		{
			yyVAL.retryMoveTaskGroup = &RetryMoveTaskGroup{}
		}
	}
	goto yystack /* stack new state and value */
}
